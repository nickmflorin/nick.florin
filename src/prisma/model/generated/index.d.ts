
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model NestedDetail
 * 
 */
export type NestedDetail = $Result.DefaultSelection<Prisma.$NestedDetailPayload>
/**
 * Model Detail
 * 
 */
export type Detail = $Result.DefaultSelection<Prisma.$DetailPayload>
/**
 * Model Resume
 * 
 */
export type Resume = $Result.DefaultSelection<Prisma.$ResumePayload>
/**
 * Model Repository
 * 
 */
export type Repository = $Result.DefaultSelection<Prisma.$RepositoryPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model Experience
 * 
 */
export type Experience = $Result.DefaultSelection<Prisma.$ExperiencePayload>
/**
 * Model Education
 * 
 */
export type Education = $Result.DefaultSelection<Prisma.$EducationPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const DetailEntityType: {
  EXPERIENCE: 'EXPERIENCE',
  EDUCATION: 'EDUCATION'
};

export type DetailEntityType = (typeof DetailEntityType)[keyof typeof DetailEntityType]


export const SkillCategory: {
  DEVOPS: 'DEVOPS',
  DATABASE: 'DATABASE',
  API_DEVELOPMENT: 'API_DEVELOPMENT',
  TESTING: 'TESTING',
  PROGRAMMING_LANGUAGE: 'PROGRAMMING_LANGUAGE',
  FRAMEWORK: 'FRAMEWORK',
  PACKAGE: 'PACKAGE',
  PACKAGE_MANAGER: 'PACKAGE_MANAGER',
  VERSION_MANAGER: 'VERSION_MANAGER',
  ORM: 'ORM',
  WORKFLOW: 'WORKFLOW'
};

export type SkillCategory = (typeof SkillCategory)[keyof typeof SkillCategory]


export const ProgrammingLanguage: {
  JAVASCRIPT: 'JAVASCRIPT',
  TYPESCRIPT: 'TYPESCRIPT',
  PYTHON: 'PYTHON',
  SWIFT: 'SWIFT',
  CSS: 'CSS',
  SCSS: 'SCSS',
  CPLUSPLUS: 'CPLUSPLUS',
  BASH: 'BASH',
  JQUERY: 'JQUERY',
  HTML: 'HTML',
  MATLAB: 'MATLAB',
  R: 'R'
};

export type ProgrammingLanguage = (typeof ProgrammingLanguage)[keyof typeof ProgrammingLanguage]


export const ProgrammingDomain: {
  BACKEND: 'BACKEND',
  FRONTEND: 'FRONTEND',
  MOBILE: 'MOBILE',
  FULL_STACK: 'FULL_STACK'
};

export type ProgrammingDomain = (typeof ProgrammingDomain)[keyof typeof ProgrammingDomain]


export const Degree: {
  BACHELORS_OF_SCIENCE: 'BACHELORS_OF_SCIENCE',
  MASTERS_OF_SCIENCE_IN_ENGINEERING: 'MASTERS_OF_SCIENCE_IN_ENGINEERING',
  MASTERS_OF_SCIENCE: 'MASTERS_OF_SCIENCE'
};

export type Degree = (typeof Degree)[keyof typeof Degree]

}

export type DetailEntityType = $Enums.DetailEntityType

export const DetailEntityType: typeof $Enums.DetailEntityType

export type SkillCategory = $Enums.SkillCategory

export const SkillCategory: typeof $Enums.SkillCategory

export type ProgrammingLanguage = $Enums.ProgrammingLanguage

export const ProgrammingLanguage: typeof $Enums.ProgrammingLanguage

export type ProgrammingDomain = $Enums.ProgrammingDomain

export const ProgrammingDomain: typeof $Enums.ProgrammingDomain

export type Degree = $Enums.Degree

export const Degree: typeof $Enums.Degree

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.nestedDetail`: Exposes CRUD operations for the **NestedDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NestedDetails
    * const nestedDetails = await prisma.nestedDetail.findMany()
    * ```
    */
  get nestedDetail(): Prisma.NestedDetailDelegate<ExtArgs>;

  /**
   * `prisma.detail`: Exposes CRUD operations for the **Detail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Details
    * const details = await prisma.detail.findMany()
    * ```
    */
  get detail(): Prisma.DetailDelegate<ExtArgs>;

  /**
   * `prisma.resume`: Exposes CRUD operations for the **Resume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resumes
    * const resumes = await prisma.resume.findMany()
    * ```
    */
  get resume(): Prisma.ResumeDelegate<ExtArgs>;

  /**
   * `prisma.repository`: Exposes CRUD operations for the **Repository** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repositories
    * const repositories = await prisma.repository.findMany()
    * ```
    */
  get repository(): Prisma.RepositoryDelegate<ExtArgs>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.experience`: Exposes CRUD operations for the **Experience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Experiences
    * const experiences = await prisma.experience.findMany()
    * ```
    */
  get experience(): Prisma.ExperienceDelegate<ExtArgs>;

  /**
   * `prisma.education`: Exposes CRUD operations for the **Education** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Educations
    * const educations = await prisma.education.findMany()
    * ```
    */
  get education(): Prisma.EducationDelegate<ExtArgs>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    NestedDetail: 'NestedDetail',
    Detail: 'Detail',
    Resume: 'Resume',
    Repository: 'Repository',
    Skill: 'Skill',
    Course: 'Course',
    Project: 'Project',
    Company: 'Company',
    School: 'School',
    Experience: 'Experience',
    Education: 'Education',
    Profile: 'Profile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'nestedDetail' | 'detail' | 'resume' | 'repository' | 'skill' | 'course' | 'project' | 'company' | 'school' | 'experience' | 'education' | 'profile'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      NestedDetail: {
        payload: Prisma.$NestedDetailPayload<ExtArgs>
        fields: Prisma.NestedDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NestedDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NestedDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          findFirst: {
            args: Prisma.NestedDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NestedDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          findMany: {
            args: Prisma.NestedDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>[]
          }
          create: {
            args: Prisma.NestedDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          createMany: {
            args: Prisma.NestedDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NestedDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          update: {
            args: Prisma.NestedDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          deleteMany: {
            args: Prisma.NestedDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NestedDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NestedDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NestedDetailPayload>
          }
          aggregate: {
            args: Prisma.NestedDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNestedDetail>
          }
          groupBy: {
            args: Prisma.NestedDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NestedDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.NestedDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<NestedDetailCountAggregateOutputType> | number
          }
        }
      }
      Detail: {
        payload: Prisma.$DetailPayload<ExtArgs>
        fields: Prisma.DetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          findFirst: {
            args: Prisma.DetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          findMany: {
            args: Prisma.DetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>[]
          }
          create: {
            args: Prisma.DetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          createMany: {
            args: Prisma.DetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          update: {
            args: Prisma.DetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          deleteMany: {
            args: Prisma.DetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DetailPayload>
          }
          aggregate: {
            args: Prisma.DetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDetail>
          }
          groupBy: {
            args: Prisma.DetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetailCountArgs<ExtArgs>,
            result: $Utils.Optional<DetailCountAggregateOutputType> | number
          }
        }
      }
      Resume: {
        payload: Prisma.$ResumePayload<ExtArgs>
        fields: Prisma.ResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findFirst: {
            args: Prisma.ResumeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findMany: {
            args: Prisma.ResumeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>[]
          }
          create: {
            args: Prisma.ResumeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          createMany: {
            args: Prisma.ResumeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResumeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          update: {
            args: Prisma.ResumeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          deleteMany: {
            args: Prisma.ResumeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResumeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          aggregate: {
            args: Prisma.ResumeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResume>
          }
          groupBy: {
            args: Prisma.ResumeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeCountArgs<ExtArgs>,
            result: $Utils.Optional<ResumeCountAggregateOutputType> | number
          }
        }
      }
      Repository: {
        payload: Prisma.$RepositoryPayload<ExtArgs>
        fields: Prisma.RepositoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepositoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepositoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          findFirst: {
            args: Prisma.RepositoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepositoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          findMany: {
            args: Prisma.RepositoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>[]
          }
          create: {
            args: Prisma.RepositoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          createMany: {
            args: Prisma.RepositoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RepositoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          update: {
            args: Prisma.RepositoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          deleteMany: {
            args: Prisma.RepositoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RepositoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RepositoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RepositoryPayload>
          }
          aggregate: {
            args: Prisma.RepositoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRepository>
          }
          groupBy: {
            args: Prisma.RepositoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RepositoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepositoryCountArgs<ExtArgs>,
            result: $Utils.Optional<RepositoryCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>,
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      Experience: {
        payload: Prisma.$ExperiencePayload<ExtArgs>
        fields: Prisma.ExperienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExperienceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExperienceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findFirst: {
            args: Prisma.ExperienceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExperienceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          findMany: {
            args: Prisma.ExperienceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>[]
          }
          create: {
            args: Prisma.ExperienceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          createMany: {
            args: Prisma.ExperienceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExperienceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          update: {
            args: Prisma.ExperienceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          deleteMany: {
            args: Prisma.ExperienceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExperienceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExperienceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExperiencePayload>
          }
          aggregate: {
            args: Prisma.ExperienceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExperience>
          }
          groupBy: {
            args: Prisma.ExperienceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExperienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExperienceCountArgs<ExtArgs>,
            result: $Utils.Optional<ExperienceCountAggregateOutputType> | number
          }
        }
      }
      Education: {
        payload: Prisma.$EducationPayload<ExtArgs>
        fields: Prisma.EducationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EducationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EducationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findFirst: {
            args: Prisma.EducationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EducationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          findMany: {
            args: Prisma.EducationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>[]
          }
          create: {
            args: Prisma.EducationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          createMany: {
            args: Prisma.EducationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EducationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          update: {
            args: Prisma.EducationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          deleteMany: {
            args: Prisma.EducationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EducationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EducationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EducationPayload>
          }
          aggregate: {
            args: Prisma.EducationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEducation>
          }
          groupBy: {
            args: Prisma.EducationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EducationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EducationCountArgs<ExtArgs>,
            result: $Utils.Optional<EducationCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    updatedSkills: number
    createdSkills: number
    updatedCompanies: number
    createdCompanies: number
    updatedExperiences: number
    createdExperiences: number
    updatedSchools: number
    createdSchools: number
    updatedEducations: number
    createdEducations: number
    updatedProfiles: number
    createdProfiles: number
    updatedDetails: number
    createdDetails: number
    updatedNestedDetails: number
    createdNestedDetails: number
    updatedCourses: number
    createdCourses: number
    updatedProjects: number
    createdProjects: number
    updatedRepositories: number
    createdRepositories: number
    updatedResumes: number
    createdResumes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedSkills?: boolean | UserCountOutputTypeCountUpdatedSkillsArgs
    createdSkills?: boolean | UserCountOutputTypeCountCreatedSkillsArgs
    updatedCompanies?: boolean | UserCountOutputTypeCountUpdatedCompaniesArgs
    createdCompanies?: boolean | UserCountOutputTypeCountCreatedCompaniesArgs
    updatedExperiences?: boolean | UserCountOutputTypeCountUpdatedExperiencesArgs
    createdExperiences?: boolean | UserCountOutputTypeCountCreatedExperiencesArgs
    updatedSchools?: boolean | UserCountOutputTypeCountUpdatedSchoolsArgs
    createdSchools?: boolean | UserCountOutputTypeCountCreatedSchoolsArgs
    updatedEducations?: boolean | UserCountOutputTypeCountUpdatedEducationsArgs
    createdEducations?: boolean | UserCountOutputTypeCountCreatedEducationsArgs
    updatedProfiles?: boolean | UserCountOutputTypeCountUpdatedProfilesArgs
    createdProfiles?: boolean | UserCountOutputTypeCountCreatedProfilesArgs
    updatedDetails?: boolean | UserCountOutputTypeCountUpdatedDetailsArgs
    createdDetails?: boolean | UserCountOutputTypeCountCreatedDetailsArgs
    updatedNestedDetails?: boolean | UserCountOutputTypeCountUpdatedNestedDetailsArgs
    createdNestedDetails?: boolean | UserCountOutputTypeCountCreatedNestedDetailsArgs
    updatedCourses?: boolean | UserCountOutputTypeCountUpdatedCoursesArgs
    createdCourses?: boolean | UserCountOutputTypeCountCreatedCoursesArgs
    updatedProjects?: boolean | UserCountOutputTypeCountUpdatedProjectsArgs
    createdProjects?: boolean | UserCountOutputTypeCountCreatedProjectsArgs
    updatedRepositories?: boolean | UserCountOutputTypeCountUpdatedRepositoriesArgs
    createdRepositories?: boolean | UserCountOutputTypeCountCreatedRepositoriesArgs
    updatedResumes?: boolean | UserCountOutputTypeCountUpdatedResumesArgs
    createdResumes?: boolean | UserCountOutputTypeCountCreatedResumesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepositoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepositoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
  }



  /**
   * Count Type NestedDetailCountOutputType
   */

  export type NestedDetailCountOutputType = {
    skills: number
  }

  export type NestedDetailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | NestedDetailCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes

  /**
   * NestedDetailCountOutputType without action
   */
  export type NestedDetailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetailCountOutputType
     */
    select?: NestedDetailCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NestedDetailCountOutputType without action
   */
  export type NestedDetailCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }



  /**
   * Count Type DetailCountOutputType
   */

  export type DetailCountOutputType = {
    nestedDetails: number
    skills: number
  }

  export type DetailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nestedDetails?: boolean | DetailCountOutputTypeCountNestedDetailsArgs
    skills?: boolean | DetailCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes

  /**
   * DetailCountOutputType without action
   */
  export type DetailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetailCountOutputType
     */
    select?: DetailCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DetailCountOutputType without action
   */
  export type DetailCountOutputTypeCountNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
  }


  /**
   * DetailCountOutputType without action
   */
  export type DetailCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }



  /**
   * Count Type RepositoryCountOutputType
   */

  export type RepositoryCountOutputType = {
    skills: number
    projects: number
  }

  export type RepositoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | RepositoryCountOutputTypeCountSkillsArgs
    projects?: boolean | RepositoryCountOutputTypeCountProjectsArgs
  }

  // Custom InputTypes

  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RepositoryCountOutputType
     */
    select?: RepositoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * RepositoryCountOutputType without action
   */
  export type RepositoryCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }



  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    experiences: number
    educations: number
    courses: number
    projects: number
    details: number
    nestedDetails: number
    repositories: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiences?: boolean | SkillCountOutputTypeCountExperiencesArgs
    educations?: boolean | SkillCountOutputTypeCountEducationsArgs
    courses?: boolean | SkillCountOutputTypeCountCoursesArgs
    projects?: boolean | SkillCountOutputTypeCountProjectsArgs
    details?: boolean | SkillCountOutputTypeCountDetailsArgs
    nestedDetails?: boolean | SkillCountOutputTypeCountNestedDetailsArgs
    repositories?: boolean | SkillCountOutputTypeCountRepositoriesArgs
  }

  // Custom InputTypes

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
  }


  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepositoryWhereInput
  }



  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    skills: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | CourseCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }



  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    skills: number
    details: number
    nestedDetails: number
    repositories: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | ProjectCountOutputTypeCountSkillsArgs
    details?: boolean | ProjectCountOutputTypeCountDetailsArgs
    nestedDetails?: boolean | ProjectCountOutputTypeCountNestedDetailsArgs
    repositories?: boolean | ProjectCountOutputTypeCountRepositoriesArgs
  }

  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepositoryWhereInput
  }



  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    experiences: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    experiences?: boolean | CompanyCountOutputTypeCountExperiencesArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
  }



  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    educations: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    educations?: boolean | SchoolCountOutputTypeCountEducationsArgs
  }

  // Custom InputTypes

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
  }



  /**
   * Count Type ExperienceCountOutputType
   */

  export type ExperienceCountOutputType = {
    skills: number
  }

  export type ExperienceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | ExperienceCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes

  /**
   * ExperienceCountOutputType without action
   */
  export type ExperienceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExperienceCountOutputType
     */
    select?: ExperienceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExperienceCountOutputType without action
   */
  export type ExperienceCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }



  /**
   * Count Type EducationCountOutputType
   */

  export type EducationCountOutputType = {
    skills: number
    courses: number
  }

  export type EducationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skills?: boolean | EducationCountOutputTypeCountSkillsArgs
    courses?: boolean | EducationCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes

  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EducationCountOutputType
     */
    select?: EducationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
  }


  /**
   * EducationCountOutputType without action
   */
  export type EducationCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstName: string | null
    lastName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    firstName: number
    lastName: number
    profileImageUrl: number
    emailAddress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    firstName?: true
    lastName?: true
    profileImageUrl?: true
    emailAddress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl: string | null
    emailAddress: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    updatedSkills?: boolean | User$updatedSkillsArgs<ExtArgs>
    createdSkills?: boolean | User$createdSkillsArgs<ExtArgs>
    updatedCompanies?: boolean | User$updatedCompaniesArgs<ExtArgs>
    createdCompanies?: boolean | User$createdCompaniesArgs<ExtArgs>
    updatedExperiences?: boolean | User$updatedExperiencesArgs<ExtArgs>
    createdExperiences?: boolean | User$createdExperiencesArgs<ExtArgs>
    updatedSchools?: boolean | User$updatedSchoolsArgs<ExtArgs>
    createdSchools?: boolean | User$createdSchoolsArgs<ExtArgs>
    updatedEducations?: boolean | User$updatedEducationsArgs<ExtArgs>
    createdEducations?: boolean | User$createdEducationsArgs<ExtArgs>
    updatedProfiles?: boolean | User$updatedProfilesArgs<ExtArgs>
    createdProfiles?: boolean | User$createdProfilesArgs<ExtArgs>
    updatedDetails?: boolean | User$updatedDetailsArgs<ExtArgs>
    createdDetails?: boolean | User$createdDetailsArgs<ExtArgs>
    updatedNestedDetails?: boolean | User$updatedNestedDetailsArgs<ExtArgs>
    createdNestedDetails?: boolean | User$createdNestedDetailsArgs<ExtArgs>
    updatedCourses?: boolean | User$updatedCoursesArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    updatedProjects?: boolean | User$updatedProjectsArgs<ExtArgs>
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    updatedRepositories?: boolean | User$updatedRepositoriesArgs<ExtArgs>
    createdRepositories?: boolean | User$createdRepositoriesArgs<ExtArgs>
    updatedResumes?: boolean | User$updatedResumesArgs<ExtArgs>
    createdResumes?: boolean | User$createdResumesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    firstName?: boolean
    lastName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedSkills?: boolean | User$updatedSkillsArgs<ExtArgs>
    createdSkills?: boolean | User$createdSkillsArgs<ExtArgs>
    updatedCompanies?: boolean | User$updatedCompaniesArgs<ExtArgs>
    createdCompanies?: boolean | User$createdCompaniesArgs<ExtArgs>
    updatedExperiences?: boolean | User$updatedExperiencesArgs<ExtArgs>
    createdExperiences?: boolean | User$createdExperiencesArgs<ExtArgs>
    updatedSchools?: boolean | User$updatedSchoolsArgs<ExtArgs>
    createdSchools?: boolean | User$createdSchoolsArgs<ExtArgs>
    updatedEducations?: boolean | User$updatedEducationsArgs<ExtArgs>
    createdEducations?: boolean | User$createdEducationsArgs<ExtArgs>
    updatedProfiles?: boolean | User$updatedProfilesArgs<ExtArgs>
    createdProfiles?: boolean | User$createdProfilesArgs<ExtArgs>
    updatedDetails?: boolean | User$updatedDetailsArgs<ExtArgs>
    createdDetails?: boolean | User$createdDetailsArgs<ExtArgs>
    updatedNestedDetails?: boolean | User$updatedNestedDetailsArgs<ExtArgs>
    createdNestedDetails?: boolean | User$createdNestedDetailsArgs<ExtArgs>
    updatedCourses?: boolean | User$updatedCoursesArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    updatedProjects?: boolean | User$updatedProjectsArgs<ExtArgs>
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    updatedRepositories?: boolean | User$updatedRepositoriesArgs<ExtArgs>
    createdRepositories?: boolean | User$createdRepositoriesArgs<ExtArgs>
    updatedResumes?: boolean | User$updatedResumesArgs<ExtArgs>
    createdResumes?: boolean | User$createdResumesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      updatedSkills: Prisma.$SkillPayload<ExtArgs>[]
      createdSkills: Prisma.$SkillPayload<ExtArgs>[]
      updatedCompanies: Prisma.$CompanyPayload<ExtArgs>[]
      createdCompanies: Prisma.$CompanyPayload<ExtArgs>[]
      updatedExperiences: Prisma.$ExperiencePayload<ExtArgs>[]
      createdExperiences: Prisma.$ExperiencePayload<ExtArgs>[]
      updatedSchools: Prisma.$SchoolPayload<ExtArgs>[]
      createdSchools: Prisma.$SchoolPayload<ExtArgs>[]
      updatedEducations: Prisma.$EducationPayload<ExtArgs>[]
      createdEducations: Prisma.$EducationPayload<ExtArgs>[]
      updatedProfiles: Prisma.$ProfilePayload<ExtArgs>[]
      createdProfiles: Prisma.$ProfilePayload<ExtArgs>[]
      updatedDetails: Prisma.$DetailPayload<ExtArgs>[]
      createdDetails: Prisma.$DetailPayload<ExtArgs>[]
      updatedNestedDetails: Prisma.$NestedDetailPayload<ExtArgs>[]
      createdNestedDetails: Prisma.$NestedDetailPayload<ExtArgs>[]
      updatedCourses: Prisma.$CoursePayload<ExtArgs>[]
      createdCourses: Prisma.$CoursePayload<ExtArgs>[]
      updatedProjects: Prisma.$ProjectPayload<ExtArgs>[]
      createdProjects: Prisma.$ProjectPayload<ExtArgs>[]
      updatedRepositories: Prisma.$RepositoryPayload<ExtArgs>[]
      createdRepositories: Prisma.$RepositoryPayload<ExtArgs>[]
      updatedResumes: Prisma.$ResumePayload<ExtArgs>[]
      createdResumes: Prisma.$ResumePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      firstName: string
      lastName: string
      profileImageUrl: string | null
      emailAddress: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    updatedSkills<T extends User$updatedSkillsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdSkills<T extends User$createdSkillsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedCompanies<T extends User$updatedCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdCompanies<T extends User$createdCompaniesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedExperiences<T extends User$updatedExperiencesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedExperiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findMany'> | Null>;

    createdExperiences<T extends User$createdExperiencesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdExperiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedSchools<T extends User$updatedSchoolsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedSchoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdSchools<T extends User$createdSchoolsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdSchoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedEducations<T extends User$updatedEducationsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedEducationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdEducations<T extends User$createdEducationsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEducationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProfiles<T extends User$updatedProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'> | Null>;

    createdProfiles<T extends User$createdProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedDetails<T extends User$updatedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdDetails<T extends User$createdDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedNestedDetails<T extends User$updatedNestedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedNestedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdNestedDetails<T extends User$createdNestedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdNestedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedCourses<T extends User$updatedCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    createdCourses<T extends User$createdCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedProjects<T extends User$updatedProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdProjects<T extends User$createdProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedRepositories<T extends User$updatedRepositoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedRepositoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    createdRepositories<T extends User$createdRepositoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRepositoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    updatedResumes<T extends User$updatedResumesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedResumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findMany'> | Null>;

    createdResumes<T extends User$createdResumesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdResumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly profileImageUrl: FieldRef<"User", 'String'>
    readonly emailAddress: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.updatedSkills
   */
  export type User$updatedSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * User.createdSkills
   */
  export type User$createdSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * User.updatedCompanies
   */
  export type User$updatedCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * User.createdCompanies
   */
  export type User$createdCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * User.updatedExperiences
   */
  export type User$updatedExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * User.createdExperiences
   */
  export type User$createdExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * User.updatedSchools
   */
  export type User$updatedSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * User.createdSchools
   */
  export type User$createdSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * User.updatedEducations
   */
  export type User$updatedEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * User.createdEducations
   */
  export type User$createdEducationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * User.updatedProfiles
   */
  export type User$updatedProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * User.createdProfiles
   */
  export type User$createdProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * User.updatedDetails
   */
  export type User$updatedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    where?: DetailWhereInput
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    cursor?: DetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * User.createdDetails
   */
  export type User$createdDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    where?: DetailWhereInput
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    cursor?: DetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * User.updatedNestedDetails
   */
  export type User$updatedNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    cursor?: NestedDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * User.createdNestedDetails
   */
  export type User$createdNestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    cursor?: NestedDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * User.updatedCourses
   */
  export type User$updatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * User.createdCourses
   */
  export type User$createdCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * User.updatedProjects
   */
  export type User$updatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * User.createdProjects
   */
  export type User$createdProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * User.updatedRepositories
   */
  export type User$updatedRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    where?: RepositoryWhereInput
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    cursor?: RepositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * User.createdRepositories
   */
  export type User$createdRepositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    where?: RepositoryWhereInput
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    cursor?: RepositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * User.updatedResumes
   */
  export type User$updatedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    cursor?: ResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * User.createdResumes
   */
  export type User$createdResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    cursor?: ResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model NestedDetail
   */

  export type AggregateNestedDetail = {
    _count: NestedDetailCountAggregateOutputType | null
    _min: NestedDetailMinAggregateOutputType | null
    _max: NestedDetailMaxAggregateOutputType | null
  }

  export type NestedDetailMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    label: string | null
    description: string | null
    shortDescription: string | null
    visible: boolean | null
    detailId: string | null
    projectId: string | null
  }

  export type NestedDetailMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    label: string | null
    description: string | null
    shortDescription: string | null
    visible: boolean | null
    detailId: string | null
    projectId: string | null
  }

  export type NestedDetailCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    label: number
    description: number
    shortDescription: number
    visible: number
    detailId: number
    projectId: number
    _all: number
  }


  export type NestedDetailMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    detailId?: true
    projectId?: true
  }

  export type NestedDetailMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    detailId?: true
    projectId?: true
  }

  export type NestedDetailCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    detailId?: true
    projectId?: true
    _all?: true
  }

  export type NestedDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NestedDetail to aggregate.
     */
    where?: NestedDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NestedDetails to fetch.
     */
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NestedDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NestedDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NestedDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NestedDetails
    **/
    _count?: true | NestedDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NestedDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NestedDetailMaxAggregateInputType
  }

  export type GetNestedDetailAggregateType<T extends NestedDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateNestedDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNestedDetail[P]>
      : GetScalarType<T[P], AggregateNestedDetail[P]>
  }




  export type NestedDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithAggregationInput | NestedDetailOrderByWithAggregationInput[]
    by: NestedDetailScalarFieldEnum[] | NestedDetailScalarFieldEnum
    having?: NestedDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NestedDetailCountAggregateInputType | true
    _min?: NestedDetailMinAggregateInputType
    _max?: NestedDetailMaxAggregateInputType
  }

  export type NestedDetailGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    label: string
    description: string | null
    shortDescription: string | null
    visible: boolean
    detailId: string
    projectId: string | null
    _count: NestedDetailCountAggregateOutputType | null
    _min: NestedDetailMinAggregateOutputType | null
    _max: NestedDetailMaxAggregateOutputType | null
  }

  type GetNestedDetailGroupByPayload<T extends NestedDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NestedDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NestedDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NestedDetailGroupByOutputType[P]>
            : GetScalarType<T[P], NestedDetailGroupByOutputType[P]>
        }
      >
    >


  export type NestedDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    label?: boolean
    description?: boolean
    shortDescription?: boolean
    visible?: boolean
    detailId?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    detail?: boolean | DetailDefaultArgs<ExtArgs>
    project?: boolean | NestedDetail$projectArgs<ExtArgs>
    skills?: boolean | NestedDetail$skillsArgs<ExtArgs>
    _count?: boolean | NestedDetailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nestedDetail"]>

  export type NestedDetailSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    label?: boolean
    description?: boolean
    shortDescription?: boolean
    visible?: boolean
    detailId?: boolean
    projectId?: boolean
  }

  export type NestedDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    detail?: boolean | DetailDefaultArgs<ExtArgs>
    project?: boolean | NestedDetail$projectArgs<ExtArgs>
    skills?: boolean | NestedDetail$skillsArgs<ExtArgs>
    _count?: boolean | NestedDetailCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NestedDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NestedDetail"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      detail: Prisma.$DetailPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      skills: Prisma.$SkillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      label: string
      description: string | null
      shortDescription: string | null
      visible: boolean
      detailId: string
      projectId: string | null
    }, ExtArgs["result"]["nestedDetail"]>
    composites: {}
  }


  type NestedDetailGetPayload<S extends boolean | null | undefined | NestedDetailDefaultArgs> = $Result.GetResult<Prisma.$NestedDetailPayload, S>

  type NestedDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NestedDetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NestedDetailCountAggregateInputType | true
    }

  export interface NestedDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NestedDetail'], meta: { name: 'NestedDetail' } }
    /**
     * Find zero or one NestedDetail that matches the filter.
     * @param {NestedDetailFindUniqueArgs} args - Arguments to find a NestedDetail
     * @example
     * // Get one NestedDetail
     * const nestedDetail = await prisma.nestedDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NestedDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NestedDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NestedDetailFindUniqueOrThrowArgs} args - Arguments to find a NestedDetail
     * @example
     * // Get one NestedDetail
     * const nestedDetail = await prisma.nestedDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NestedDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NestedDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailFindFirstArgs} args - Arguments to find a NestedDetail
     * @example
     * // Get one NestedDetail
     * const nestedDetail = await prisma.nestedDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NestedDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailFindFirstArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NestedDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailFindFirstOrThrowArgs} args - Arguments to find a NestedDetail
     * @example
     * // Get one NestedDetail
     * const nestedDetail = await prisma.nestedDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NestedDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NestedDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NestedDetails
     * const nestedDetails = await prisma.nestedDetail.findMany()
     * 
     * // Get first 10 NestedDetails
     * const nestedDetails = await prisma.nestedDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nestedDetailWithIdOnly = await prisma.nestedDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NestedDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NestedDetail.
     * @param {NestedDetailCreateArgs} args - Arguments to create a NestedDetail.
     * @example
     * // Create one NestedDetail
     * const NestedDetail = await prisma.nestedDetail.create({
     *   data: {
     *     // ... data to create a NestedDetail
     *   }
     * })
     * 
    **/
    create<T extends NestedDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailCreateArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NestedDetails.
     *     @param {NestedDetailCreateManyArgs} args - Arguments to create many NestedDetails.
     *     @example
     *     // Create many NestedDetails
     *     const nestedDetail = await prisma.nestedDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NestedDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NestedDetail.
     * @param {NestedDetailDeleteArgs} args - Arguments to delete one NestedDetail.
     * @example
     * // Delete one NestedDetail
     * const NestedDetail = await prisma.nestedDetail.delete({
     *   where: {
     *     // ... filter to delete one NestedDetail
     *   }
     * })
     * 
    **/
    delete<T extends NestedDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailDeleteArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NestedDetail.
     * @param {NestedDetailUpdateArgs} args - Arguments to update one NestedDetail.
     * @example
     * // Update one NestedDetail
     * const nestedDetail = await prisma.nestedDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NestedDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailUpdateArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NestedDetails.
     * @param {NestedDetailDeleteManyArgs} args - Arguments to filter NestedDetails to delete.
     * @example
     * // Delete a few NestedDetails
     * const { count } = await prisma.nestedDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NestedDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NestedDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NestedDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NestedDetails
     * const nestedDetail = await prisma.nestedDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NestedDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NestedDetail.
     * @param {NestedDetailUpsertArgs} args - Arguments to update or create a NestedDetail.
     * @example
     * // Update or create a NestedDetail
     * const nestedDetail = await prisma.nestedDetail.upsert({
     *   create: {
     *     // ... data to create a NestedDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NestedDetail we want to update
     *   }
     * })
    **/
    upsert<T extends NestedDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NestedDetailUpsertArgs<ExtArgs>>
    ): Prisma__NestedDetailClient<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NestedDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailCountArgs} args - Arguments to filter NestedDetails to count.
     * @example
     * // Count the number of NestedDetails
     * const count = await prisma.nestedDetail.count({
     *   where: {
     *     // ... the filter for the NestedDetails we want to count
     *   }
     * })
    **/
    count<T extends NestedDetailCountArgs>(
      args?: Subset<T, NestedDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NestedDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NestedDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NestedDetailAggregateArgs>(args: Subset<T, NestedDetailAggregateArgs>): Prisma.PrismaPromise<GetNestedDetailAggregateType<T>>

    /**
     * Group by NestedDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NestedDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NestedDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NestedDetailGroupByArgs['orderBy'] }
        : { orderBy?: NestedDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NestedDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNestedDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NestedDetail model
   */
  readonly fields: NestedDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NestedDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NestedDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    detail<T extends DetailDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DetailDefaultArgs<ExtArgs>>): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    project<T extends NestedDetail$projectArgs<ExtArgs> = {}>(args?: Subset<T, NestedDetail$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    skills<T extends NestedDetail$skillsArgs<ExtArgs> = {}>(args?: Subset<T, NestedDetail$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NestedDetail model
   */ 
  interface NestedDetailFieldRefs {
    readonly id: FieldRef<"NestedDetail", 'String'>
    readonly createdAt: FieldRef<"NestedDetail", 'DateTime'>
    readonly createdById: FieldRef<"NestedDetail", 'String'>
    readonly updatedAt: FieldRef<"NestedDetail", 'DateTime'>
    readonly updatedById: FieldRef<"NestedDetail", 'String'>
    readonly label: FieldRef<"NestedDetail", 'String'>
    readonly description: FieldRef<"NestedDetail", 'String'>
    readonly shortDescription: FieldRef<"NestedDetail", 'String'>
    readonly visible: FieldRef<"NestedDetail", 'Boolean'>
    readonly detailId: FieldRef<"NestedDetail", 'String'>
    readonly projectId: FieldRef<"NestedDetail", 'String'>
  }
    

  // Custom InputTypes

  /**
   * NestedDetail findUnique
   */
  export type NestedDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter, which NestedDetail to fetch.
     */
    where: NestedDetailWhereUniqueInput
  }


  /**
   * NestedDetail findUniqueOrThrow
   */
  export type NestedDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter, which NestedDetail to fetch.
     */
    where: NestedDetailWhereUniqueInput
  }


  /**
   * NestedDetail findFirst
   */
  export type NestedDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter, which NestedDetail to fetch.
     */
    where?: NestedDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NestedDetails to fetch.
     */
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NestedDetails.
     */
    cursor?: NestedDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NestedDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NestedDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NestedDetails.
     */
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * NestedDetail findFirstOrThrow
   */
  export type NestedDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter, which NestedDetail to fetch.
     */
    where?: NestedDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NestedDetails to fetch.
     */
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NestedDetails.
     */
    cursor?: NestedDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NestedDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NestedDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NestedDetails.
     */
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * NestedDetail findMany
   */
  export type NestedDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter, which NestedDetails to fetch.
     */
    where?: NestedDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NestedDetails to fetch.
     */
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NestedDetails.
     */
    cursor?: NestedDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NestedDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NestedDetails.
     */
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * NestedDetail create
   */
  export type NestedDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a NestedDetail.
     */
    data: XOR<NestedDetailCreateInput, NestedDetailUncheckedCreateInput>
  }


  /**
   * NestedDetail createMany
   */
  export type NestedDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NestedDetails.
     */
    data: NestedDetailCreateManyInput | NestedDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * NestedDetail update
   */
  export type NestedDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a NestedDetail.
     */
    data: XOR<NestedDetailUpdateInput, NestedDetailUncheckedUpdateInput>
    /**
     * Choose, which NestedDetail to update.
     */
    where: NestedDetailWhereUniqueInput
  }


  /**
   * NestedDetail updateMany
   */
  export type NestedDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NestedDetails.
     */
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyInput>
    /**
     * Filter which NestedDetails to update
     */
    where?: NestedDetailWhereInput
  }


  /**
   * NestedDetail upsert
   */
  export type NestedDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the NestedDetail to update in case it exists.
     */
    where: NestedDetailWhereUniqueInput
    /**
     * In case the NestedDetail found by the `where` argument doesn't exist, create a new NestedDetail with this data.
     */
    create: XOR<NestedDetailCreateInput, NestedDetailUncheckedCreateInput>
    /**
     * In case the NestedDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NestedDetailUpdateInput, NestedDetailUncheckedUpdateInput>
  }


  /**
   * NestedDetail delete
   */
  export type NestedDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    /**
     * Filter which NestedDetail to delete.
     */
    where: NestedDetailWhereUniqueInput
  }


  /**
   * NestedDetail deleteMany
   */
  export type NestedDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NestedDetails to delete
     */
    where?: NestedDetailWhereInput
  }


  /**
   * NestedDetail.project
   */
  export type NestedDetail$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }


  /**
   * NestedDetail.skills
   */
  export type NestedDetail$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * NestedDetail without action
   */
  export type NestedDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
  }



  /**
   * Model Detail
   */

  export type AggregateDetail = {
    _count: DetailCountAggregateOutputType | null
    _min: DetailMinAggregateOutputType | null
    _max: DetailMaxAggregateOutputType | null
  }

  export type DetailMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    entityId: string | null
    entityType: $Enums.DetailEntityType | null
    label: string | null
    description: string | null
    shortDescription: string | null
    visible: boolean | null
    projectId: string | null
  }

  export type DetailMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    entityId: string | null
    entityType: $Enums.DetailEntityType | null
    label: string | null
    description: string | null
    shortDescription: string | null
    visible: boolean | null
    projectId: string | null
  }

  export type DetailCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    entityId: number
    entityType: number
    label: number
    description: number
    shortDescription: number
    visible: number
    projectId: number
    _all: number
  }


  export type DetailMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    entityId?: true
    entityType?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    projectId?: true
  }

  export type DetailMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    entityId?: true
    entityType?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    projectId?: true
  }

  export type DetailCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    entityId?: true
    entityType?: true
    label?: true
    description?: true
    shortDescription?: true
    visible?: true
    projectId?: true
    _all?: true
  }

  export type DetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Detail to aggregate.
     */
    where?: DetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     */
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Details
    **/
    _count?: true | DetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailMaxAggregateInputType
  }

  export type GetDetailAggregateType<T extends DetailAggregateArgs> = {
        [P in keyof T & keyof AggregateDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetail[P]>
      : GetScalarType<T[P], AggregateDetail[P]>
  }




  export type DetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetailWhereInput
    orderBy?: DetailOrderByWithAggregationInput | DetailOrderByWithAggregationInput[]
    by: DetailScalarFieldEnum[] | DetailScalarFieldEnum
    having?: DetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailCountAggregateInputType | true
    _min?: DetailMinAggregateInputType
    _max?: DetailMaxAggregateInputType
  }

  export type DetailGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description: string | null
    shortDescription: string | null
    visible: boolean
    projectId: string | null
    _count: DetailCountAggregateOutputType | null
    _min: DetailMinAggregateOutputType | null
    _max: DetailMaxAggregateOutputType | null
  }

  type GetDetailGroupByPayload<T extends DetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailGroupByOutputType[P]>
            : GetScalarType<T[P], DetailGroupByOutputType[P]>
        }
      >
    >


  export type DetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    entityId?: boolean
    entityType?: boolean
    label?: boolean
    description?: boolean
    shortDescription?: boolean
    visible?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    nestedDetails?: boolean | Detail$nestedDetailsArgs<ExtArgs>
    project?: boolean | Detail$projectArgs<ExtArgs>
    skills?: boolean | Detail$skillsArgs<ExtArgs>
    _count?: boolean | DetailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["detail"]>

  export type DetailSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    entityId?: boolean
    entityType?: boolean
    label?: boolean
    description?: boolean
    shortDescription?: boolean
    visible?: boolean
    projectId?: boolean
  }

  export type DetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    nestedDetails?: boolean | Detail$nestedDetailsArgs<ExtArgs>
    project?: boolean | Detail$projectArgs<ExtArgs>
    skills?: boolean | Detail$skillsArgs<ExtArgs>
    _count?: boolean | DetailCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Detail"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      nestedDetails: Prisma.$NestedDetailPayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs> | null
      skills: Prisma.$SkillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      entityId: string
      entityType: $Enums.DetailEntityType
      label: string
      description: string | null
      shortDescription: string | null
      visible: boolean
      projectId: string | null
    }, ExtArgs["result"]["detail"]>
    composites: {}
  }


  type DetailGetPayload<S extends boolean | null | undefined | DetailDefaultArgs> = $Result.GetResult<Prisma.$DetailPayload, S>

  type DetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DetailCountAggregateInputType | true
    }

  export interface DetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Detail'], meta: { name: 'Detail' } }
    /**
     * Find zero or one Detail that matches the filter.
     * @param {DetailFindUniqueArgs} args - Arguments to find a Detail
     * @example
     * // Get one Detail
     * const detail = await prisma.detail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DetailFindUniqueArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Detail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DetailFindUniqueOrThrowArgs} args - Arguments to find a Detail
     * @example
     * // Get one Detail
     * const detail = await prisma.detail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Detail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailFindFirstArgs} args - Arguments to find a Detail
     * @example
     * // Get one Detail
     * const detail = await prisma.detail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailFindFirstArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Detail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailFindFirstOrThrowArgs} args - Arguments to find a Detail
     * @example
     * // Get one Detail
     * const detail = await prisma.detail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Details
     * const details = await prisma.detail.findMany()
     * 
     * // Get first 10 Details
     * const details = await prisma.detail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detailWithIdOnly = await prisma.detail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Detail.
     * @param {DetailCreateArgs} args - Arguments to create a Detail.
     * @example
     * // Create one Detail
     * const Detail = await prisma.detail.create({
     *   data: {
     *     // ... data to create a Detail
     *   }
     * })
     * 
    **/
    create<T extends DetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailCreateArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Details.
     *     @param {DetailCreateManyArgs} args - Arguments to create many Details.
     *     @example
     *     // Create many Details
     *     const detail = await prisma.detail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Detail.
     * @param {DetailDeleteArgs} args - Arguments to delete one Detail.
     * @example
     * // Delete one Detail
     * const Detail = await prisma.detail.delete({
     *   where: {
     *     // ... filter to delete one Detail
     *   }
     * })
     * 
    **/
    delete<T extends DetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DetailDeleteArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Detail.
     * @param {DetailUpdateArgs} args - Arguments to update one Detail.
     * @example
     * // Update one Detail
     * const detail = await prisma.detail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DetailUpdateArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Details.
     * @param {DetailDeleteManyArgs} args - Arguments to filter Details to delete.
     * @example
     * // Delete a few Details
     * const { count } = await prisma.detail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Details
     * const detail = await prisma.detail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Detail.
     * @param {DetailUpsertArgs} args - Arguments to update or create a Detail.
     * @example
     * // Update or create a Detail
     * const detail = await prisma.detail.upsert({
     *   create: {
     *     // ... data to create a Detail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Detail we want to update
     *   }
     * })
    **/
    upsert<T extends DetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DetailUpsertArgs<ExtArgs>>
    ): Prisma__DetailClient<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailCountArgs} args - Arguments to filter Details to count.
     * @example
     * // Count the number of Details
     * const count = await prisma.detail.count({
     *   where: {
     *     // ... the filter for the Details we want to count
     *   }
     * })
    **/
    count<T extends DetailCountArgs>(
      args?: Subset<T, DetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Detail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailAggregateArgs>(args: Subset<T, DetailAggregateArgs>): Prisma.PrismaPromise<GetDetailAggregateType<T>>

    /**
     * Group by Detail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailGroupByArgs['orderBy'] }
        : { orderBy?: DetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Detail model
   */
  readonly fields: DetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Detail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    nestedDetails<T extends Detail$nestedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, Detail$nestedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    project<T extends Detail$projectArgs<ExtArgs> = {}>(args?: Subset<T, Detail$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    skills<T extends Detail$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Detail$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Detail model
   */ 
  interface DetailFieldRefs {
    readonly id: FieldRef<"Detail", 'String'>
    readonly createdAt: FieldRef<"Detail", 'DateTime'>
    readonly createdById: FieldRef<"Detail", 'String'>
    readonly updatedAt: FieldRef<"Detail", 'DateTime'>
    readonly updatedById: FieldRef<"Detail", 'String'>
    readonly entityId: FieldRef<"Detail", 'String'>
    readonly entityType: FieldRef<"Detail", 'DetailEntityType'>
    readonly label: FieldRef<"Detail", 'String'>
    readonly description: FieldRef<"Detail", 'String'>
    readonly shortDescription: FieldRef<"Detail", 'String'>
    readonly visible: FieldRef<"Detail", 'Boolean'>
    readonly projectId: FieldRef<"Detail", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Detail findUnique
   */
  export type DetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter, which Detail to fetch.
     */
    where: DetailWhereUniqueInput
  }


  /**
   * Detail findUniqueOrThrow
   */
  export type DetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter, which Detail to fetch.
     */
    where: DetailWhereUniqueInput
  }


  /**
   * Detail findFirst
   */
  export type DetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter, which Detail to fetch.
     */
    where?: DetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     */
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Details.
     */
    cursor?: DetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Details.
     */
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * Detail findFirstOrThrow
   */
  export type DetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter, which Detail to fetch.
     */
    where?: DetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     */
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Details.
     */
    cursor?: DetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Details.
     */
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * Detail findMany
   */
  export type DetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter, which Details to fetch.
     */
    where?: DetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     */
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Details.
     */
    cursor?: DetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     */
    skip?: number
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * Detail create
   */
  export type DetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * The data needed to create a Detail.
     */
    data: XOR<DetailCreateInput, DetailUncheckedCreateInput>
  }


  /**
   * Detail createMany
   */
  export type DetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Details.
     */
    data: DetailCreateManyInput | DetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Detail update
   */
  export type DetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * The data needed to update a Detail.
     */
    data: XOR<DetailUpdateInput, DetailUncheckedUpdateInput>
    /**
     * Choose, which Detail to update.
     */
    where: DetailWhereUniqueInput
  }


  /**
   * Detail updateMany
   */
  export type DetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Details.
     */
    data: XOR<DetailUpdateManyMutationInput, DetailUncheckedUpdateManyInput>
    /**
     * Filter which Details to update
     */
    where?: DetailWhereInput
  }


  /**
   * Detail upsert
   */
  export type DetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * The filter to search for the Detail to update in case it exists.
     */
    where: DetailWhereUniqueInput
    /**
     * In case the Detail found by the `where` argument doesn't exist, create a new Detail with this data.
     */
    create: XOR<DetailCreateInput, DetailUncheckedCreateInput>
    /**
     * In case the Detail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetailUpdateInput, DetailUncheckedUpdateInput>
  }


  /**
   * Detail delete
   */
  export type DetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    /**
     * Filter which Detail to delete.
     */
    where: DetailWhereUniqueInput
  }


  /**
   * Detail deleteMany
   */
  export type DetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Details to delete
     */
    where?: DetailWhereInput
  }


  /**
   * Detail.nestedDetails
   */
  export type Detail$nestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    cursor?: NestedDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * Detail.project
   */
  export type Detail$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }


  /**
   * Detail.skills
   */
  export type Detail$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Detail without action
   */
  export type DetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
  }



  /**
   * Model Resume
   */

  export type AggregateResume = {
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  export type ResumeAvgAggregateOutputType = {
    size: number | null
  }

  export type ResumeSumAggregateOutputType = {
    size: bigint | null
  }

  export type ResumeMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    primary: boolean | null
    downloadUrl: string | null
    url: string | null
    pathname: string | null
    filename: string | null
    size: bigint | null
  }

  export type ResumeMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    primary: boolean | null
    downloadUrl: string | null
    url: string | null
    pathname: string | null
    filename: string | null
    size: bigint | null
  }

  export type ResumeCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    primary: number
    downloadUrl: number
    url: number
    pathname: number
    filename: number
    size: number
    _all: number
  }


  export type ResumeAvgAggregateInputType = {
    size?: true
  }

  export type ResumeSumAggregateInputType = {
    size?: true
  }

  export type ResumeMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    primary?: true
    downloadUrl?: true
    url?: true
    pathname?: true
    filename?: true
    size?: true
  }

  export type ResumeMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    primary?: true
    downloadUrl?: true
    url?: true
    pathname?: true
    filename?: true
    size?: true
  }

  export type ResumeCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    primary?: true
    downloadUrl?: true
    url?: true
    pathname?: true
    filename?: true
    size?: true
    _all?: true
  }

  export type ResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resume to aggregate.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resumes
    **/
    _count?: true | ResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeMaxAggregateInputType
  }

  export type GetResumeAggregateType<T extends ResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResume[P]>
      : GetScalarType<T[P], AggregateResume[P]>
  }




  export type ResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithAggregationInput | ResumeOrderByWithAggregationInput[]
    by: ResumeScalarFieldEnum[] | ResumeScalarFieldEnum
    having?: ResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeCountAggregateInputType | true
    _avg?: ResumeAvgAggregateInputType
    _sum?: ResumeSumAggregateInputType
    _min?: ResumeMinAggregateInputType
    _max?: ResumeMaxAggregateInputType
  }

  export type ResumeGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    primary: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  type GetResumeGroupByPayload<T extends ResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeGroupByOutputType[P]>
        }
      >
    >


  export type ResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    primary?: boolean
    downloadUrl?: boolean
    url?: boolean
    pathname?: boolean
    filename?: boolean
    size?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resume"]>

  export type ResumeSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    primary?: boolean
    downloadUrl?: boolean
    url?: boolean
    pathname?: boolean
    filename?: boolean
    size?: boolean
  }

  export type ResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resume"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      primary: boolean
      downloadUrl: string
      url: string
      pathname: string
      filename: string
      size: bigint
    }, ExtArgs["result"]["resume"]>
    composites: {}
  }


  type ResumeGetPayload<S extends boolean | null | undefined | ResumeDefaultArgs> = $Result.GetResult<Prisma.$ResumePayload, S>

  type ResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResumeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResumeCountAggregateInputType | true
    }

  export interface ResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resume'], meta: { name: 'Resume' } }
    /**
     * Find zero or one Resume that matches the filter.
     * @param {ResumeFindUniqueArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResumeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeFindUniqueArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Resume that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResumeFindUniqueOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResumeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Resume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResumeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindFirstArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Resume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResumeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Resumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resumes
     * const resumes = await prisma.resume.findMany()
     * 
     * // Get first 10 Resumes
     * const resumes = await prisma.resume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeWithIdOnly = await prisma.resume.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResumeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Resume.
     * @param {ResumeCreateArgs} args - Arguments to create a Resume.
     * @example
     * // Create one Resume
     * const Resume = await prisma.resume.create({
     *   data: {
     *     // ... data to create a Resume
     *   }
     * })
     * 
    **/
    create<T extends ResumeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeCreateArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Resumes.
     *     @param {ResumeCreateManyArgs} args - Arguments to create many Resumes.
     *     @example
     *     // Create many Resumes
     *     const resume = await prisma.resume.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResumeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resume.
     * @param {ResumeDeleteArgs} args - Arguments to delete one Resume.
     * @example
     * // Delete one Resume
     * const Resume = await prisma.resume.delete({
     *   where: {
     *     // ... filter to delete one Resume
     *   }
     * })
     * 
    **/
    delete<T extends ResumeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeDeleteArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Resume.
     * @param {ResumeUpdateArgs} args - Arguments to update one Resume.
     * @example
     * // Update one Resume
     * const resume = await prisma.resume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResumeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpdateArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Resumes.
     * @param {ResumeDeleteManyArgs} args - Arguments to filter Resumes to delete.
     * @example
     * // Delete a few Resumes
     * const { count } = await prisma.resume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResumeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resumes
     * const resume = await prisma.resume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResumeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resume.
     * @param {ResumeUpsertArgs} args - Arguments to update or create a Resume.
     * @example
     * // Update or create a Resume
     * const resume = await prisma.resume.upsert({
     *   create: {
     *     // ... data to create a Resume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resume we want to update
     *   }
     * })
    **/
    upsert<T extends ResumeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpsertArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeCountArgs} args - Arguments to filter Resumes to count.
     * @example
     * // Count the number of Resumes
     * const count = await prisma.resume.count({
     *   where: {
     *     // ... the filter for the Resumes we want to count
     *   }
     * })
    **/
    count<T extends ResumeCountArgs>(
      args?: Subset<T, ResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeAggregateArgs>(args: Subset<T, ResumeAggregateArgs>): Prisma.PrismaPromise<GetResumeAggregateType<T>>

    /**
     * Group by Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeGroupByArgs['orderBy'] }
        : { orderBy?: ResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resume model
   */
  readonly fields: ResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Resume model
   */ 
  interface ResumeFieldRefs {
    readonly id: FieldRef<"Resume", 'String'>
    readonly createdAt: FieldRef<"Resume", 'DateTime'>
    readonly createdById: FieldRef<"Resume", 'String'>
    readonly updatedAt: FieldRef<"Resume", 'DateTime'>
    readonly updatedById: FieldRef<"Resume", 'String'>
    readonly primary: FieldRef<"Resume", 'Boolean'>
    readonly downloadUrl: FieldRef<"Resume", 'String'>
    readonly url: FieldRef<"Resume", 'String'>
    readonly pathname: FieldRef<"Resume", 'String'>
    readonly filename: FieldRef<"Resume", 'String'>
    readonly size: FieldRef<"Resume", 'BigInt'>
  }
    

  // Custom InputTypes

  /**
   * Resume findUnique
   */
  export type ResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume findUniqueOrThrow
   */
  export type ResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume findFirst
   */
  export type ResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume findFirstOrThrow
   */
  export type ResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume findMany
   */
  export type ResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resumes to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume create
   */
  export type ResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a Resume.
     */
    data: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
  }


  /**
   * Resume createMany
   */
  export type ResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resumes.
     */
    data: ResumeCreateManyInput | ResumeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Resume update
   */
  export type ResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a Resume.
     */
    data: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
    /**
     * Choose, which Resume to update.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume updateMany
   */
  export type ResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resumes.
     */
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyInput>
    /**
     * Filter which Resumes to update
     */
    where?: ResumeWhereInput
  }


  /**
   * Resume upsert
   */
  export type ResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the Resume to update in case it exists.
     */
    where: ResumeWhereUniqueInput
    /**
     * In case the Resume found by the `where` argument doesn't exist, create a new Resume with this data.
     */
    create: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
    /**
     * In case the Resume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
  }


  /**
   * Resume delete
   */
  export type ResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter which Resume to delete.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume deleteMany
   */
  export type ResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resumes to delete
     */
    where?: ResumeWhereInput
  }


  /**
   * Resume without action
   */
  export type ResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
  }



  /**
   * Model Repository
   */

  export type AggregateRepository = {
    _count: RepositoryCountAggregateOutputType | null
    _min: RepositoryMinAggregateOutputType | null
    _max: RepositoryMaxAggregateOutputType | null
  }

  export type RepositoryMinAggregateOutputType = {
    id: string | null
    slug: string | null
    description: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    visible: boolean | null
    highlighted: boolean | null
    startDate: Date | null
    npmPackageName: string | null
  }

  export type RepositoryMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    description: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    visible: boolean | null
    highlighted: boolean | null
    startDate: Date | null
    npmPackageName: string | null
  }

  export type RepositoryCountAggregateOutputType = {
    id: number
    slug: number
    description: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    visible: number
    highlighted: number
    startDate: number
    npmPackageName: number
    _all: number
  }


  export type RepositoryMinAggregateInputType = {
    id?: true
    slug?: true
    description?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    highlighted?: true
    startDate?: true
    npmPackageName?: true
  }

  export type RepositoryMaxAggregateInputType = {
    id?: true
    slug?: true
    description?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    highlighted?: true
    startDate?: true
    npmPackageName?: true
  }

  export type RepositoryCountAggregateInputType = {
    id?: true
    slug?: true
    description?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    highlighted?: true
    startDate?: true
    npmPackageName?: true
    _all?: true
  }

  export type RepositoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repository to aggregate.
     */
    where?: RepositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repositories to fetch.
     */
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Repositories
    **/
    _count?: true | RepositoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepositoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepositoryMaxAggregateInputType
  }

  export type GetRepositoryAggregateType<T extends RepositoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRepository]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepository[P]>
      : GetScalarType<T[P], AggregateRepository[P]>
  }




  export type RepositoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepositoryWhereInput
    orderBy?: RepositoryOrderByWithAggregationInput | RepositoryOrderByWithAggregationInput[]
    by: RepositoryScalarFieldEnum[] | RepositoryScalarFieldEnum
    having?: RepositoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepositoryCountAggregateInputType | true
    _min?: RepositoryMinAggregateInputType
    _max?: RepositoryMaxAggregateInputType
  }

  export type RepositoryGroupByOutputType = {
    id: string
    slug: string
    description: string | null
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    visible: boolean
    highlighted: boolean
    startDate: Date
    npmPackageName: string | null
    _count: RepositoryCountAggregateOutputType | null
    _min: RepositoryMinAggregateOutputType | null
    _max: RepositoryMaxAggregateOutputType | null
  }

  type GetRepositoryGroupByPayload<T extends RepositoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepositoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepositoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepositoryGroupByOutputType[P]>
            : GetScalarType<T[P], RepositoryGroupByOutputType[P]>
        }
      >
    >


  export type RepositorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    description?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    visible?: boolean
    highlighted?: boolean
    startDate?: boolean
    npmPackageName?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Repository$skillsArgs<ExtArgs>
    projects?: boolean | Repository$projectsArgs<ExtArgs>
    _count?: boolean | RepositoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repository"]>

  export type RepositorySelectScalar = {
    id?: boolean
    slug?: boolean
    description?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    visible?: boolean
    highlighted?: boolean
    startDate?: boolean
    npmPackageName?: boolean
  }

  export type RepositoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Repository$skillsArgs<ExtArgs>
    projects?: boolean | Repository$projectsArgs<ExtArgs>
    _count?: boolean | RepositoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RepositoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Repository"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      skills: Prisma.$SkillPayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      slug: string
      description: string | null
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      visible: boolean
      highlighted: boolean
      startDate: Date
      npmPackageName: string | null
    }, ExtArgs["result"]["repository"]>
    composites: {}
  }


  type RepositoryGetPayload<S extends boolean | null | undefined | RepositoryDefaultArgs> = $Result.GetResult<Prisma.$RepositoryPayload, S>

  type RepositoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RepositoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RepositoryCountAggregateInputType | true
    }

  export interface RepositoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Repository'], meta: { name: 'Repository' } }
    /**
     * Find zero or one Repository that matches the filter.
     * @param {RepositoryFindUniqueArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RepositoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryFindUniqueArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Repository that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RepositoryFindUniqueOrThrowArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RepositoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Repository that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryFindFirstArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RepositoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryFindFirstArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Repository that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryFindFirstOrThrowArgs} args - Arguments to find a Repository
     * @example
     * // Get one Repository
     * const repository = await prisma.repository.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RepositoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Repositories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repositories
     * const repositories = await prisma.repository.findMany()
     * 
     * // Get first 10 Repositories
     * const repositories = await prisma.repository.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repositoryWithIdOnly = await prisma.repository.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RepositoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Repository.
     * @param {RepositoryCreateArgs} args - Arguments to create a Repository.
     * @example
     * // Create one Repository
     * const Repository = await prisma.repository.create({
     *   data: {
     *     // ... data to create a Repository
     *   }
     * })
     * 
    **/
    create<T extends RepositoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryCreateArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Repositories.
     *     @param {RepositoryCreateManyArgs} args - Arguments to create many Repositories.
     *     @example
     *     // Create many Repositories
     *     const repository = await prisma.repository.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RepositoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Repository.
     * @param {RepositoryDeleteArgs} args - Arguments to delete one Repository.
     * @example
     * // Delete one Repository
     * const Repository = await prisma.repository.delete({
     *   where: {
     *     // ... filter to delete one Repository
     *   }
     * })
     * 
    **/
    delete<T extends RepositoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryDeleteArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Repository.
     * @param {RepositoryUpdateArgs} args - Arguments to update one Repository.
     * @example
     * // Update one Repository
     * const repository = await prisma.repository.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RepositoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryUpdateArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Repositories.
     * @param {RepositoryDeleteManyArgs} args - Arguments to filter Repositories to delete.
     * @example
     * // Delete a few Repositories
     * const { count } = await prisma.repository.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RepositoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RepositoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repositories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repositories
     * const repository = await prisma.repository.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RepositoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Repository.
     * @param {RepositoryUpsertArgs} args - Arguments to update or create a Repository.
     * @example
     * // Update or create a Repository
     * const repository = await prisma.repository.upsert({
     *   create: {
     *     // ... data to create a Repository
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repository we want to update
     *   }
     * })
    **/
    upsert<T extends RepositoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RepositoryUpsertArgs<ExtArgs>>
    ): Prisma__RepositoryClient<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Repositories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryCountArgs} args - Arguments to filter Repositories to count.
     * @example
     * // Count the number of Repositories
     * const count = await prisma.repository.count({
     *   where: {
     *     // ... the filter for the Repositories we want to count
     *   }
     * })
    **/
    count<T extends RepositoryCountArgs>(
      args?: Subset<T, RepositoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepositoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repository.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepositoryAggregateArgs>(args: Subset<T, RepositoryAggregateArgs>): Prisma.PrismaPromise<GetRepositoryAggregateType<T>>

    /**
     * Group by Repository.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepositoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepositoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepositoryGroupByArgs['orderBy'] }
        : { orderBy?: RepositoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepositoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepositoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Repository model
   */
  readonly fields: RepositoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Repository.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepositoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    skills<T extends Repository$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Repository$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    projects<T extends Repository$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Repository$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Repository model
   */ 
  interface RepositoryFieldRefs {
    readonly id: FieldRef<"Repository", 'String'>
    readonly slug: FieldRef<"Repository", 'String'>
    readonly description: FieldRef<"Repository", 'String'>
    readonly createdAt: FieldRef<"Repository", 'DateTime'>
    readonly createdById: FieldRef<"Repository", 'String'>
    readonly updatedAt: FieldRef<"Repository", 'DateTime'>
    readonly updatedById: FieldRef<"Repository", 'String'>
    readonly visible: FieldRef<"Repository", 'Boolean'>
    readonly highlighted: FieldRef<"Repository", 'Boolean'>
    readonly startDate: FieldRef<"Repository", 'DateTime'>
    readonly npmPackageName: FieldRef<"Repository", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Repository findUnique
   */
  export type RepositoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter, which Repository to fetch.
     */
    where: RepositoryWhereUniqueInput
  }


  /**
   * Repository findUniqueOrThrow
   */
  export type RepositoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter, which Repository to fetch.
     */
    where: RepositoryWhereUniqueInput
  }


  /**
   * Repository findFirst
   */
  export type RepositoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter, which Repository to fetch.
     */
    where?: RepositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repositories to fetch.
     */
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repositories.
     */
    cursor?: RepositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repositories.
     */
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * Repository findFirstOrThrow
   */
  export type RepositoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter, which Repository to fetch.
     */
    where?: RepositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repositories to fetch.
     */
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Repositories.
     */
    cursor?: RepositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repositories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Repositories.
     */
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * Repository findMany
   */
  export type RepositoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter, which Repositories to fetch.
     */
    where?: RepositoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Repositories to fetch.
     */
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Repositories.
     */
    cursor?: RepositoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Repositories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Repositories.
     */
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * Repository create
   */
  export type RepositoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Repository.
     */
    data: XOR<RepositoryCreateInput, RepositoryUncheckedCreateInput>
  }


  /**
   * Repository createMany
   */
  export type RepositoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Repositories.
     */
    data: RepositoryCreateManyInput | RepositoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Repository update
   */
  export type RepositoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Repository.
     */
    data: XOR<RepositoryUpdateInput, RepositoryUncheckedUpdateInput>
    /**
     * Choose, which Repository to update.
     */
    where: RepositoryWhereUniqueInput
  }


  /**
   * Repository updateMany
   */
  export type RepositoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Repositories.
     */
    data: XOR<RepositoryUpdateManyMutationInput, RepositoryUncheckedUpdateManyInput>
    /**
     * Filter which Repositories to update
     */
    where?: RepositoryWhereInput
  }


  /**
   * Repository upsert
   */
  export type RepositoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Repository to update in case it exists.
     */
    where: RepositoryWhereUniqueInput
    /**
     * In case the Repository found by the `where` argument doesn't exist, create a new Repository with this data.
     */
    create: XOR<RepositoryCreateInput, RepositoryUncheckedCreateInput>
    /**
     * In case the Repository was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepositoryUpdateInput, RepositoryUncheckedUpdateInput>
  }


  /**
   * Repository delete
   */
  export type RepositoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    /**
     * Filter which Repository to delete.
     */
    where: RepositoryWhereUniqueInput
  }


  /**
   * Repository deleteMany
   */
  export type RepositoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Repositories to delete
     */
    where?: RepositoryWhereInput
  }


  /**
   * Repository.skills
   */
  export type Repository$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Repository.projects
   */
  export type Repository$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Repository without action
   */
  export type RepositoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
  }



  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    experience: number | null
    calculatedExperience: number | null
  }

  export type SkillSumAggregateOutputType = {
    experience: number | null
    calculatedExperience: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: string | null
    label: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    visible: boolean | null
    description: string | null
    experience: number | null
    calculatedExperience: number | null
    includeInTopSkills: boolean | null
  }

  export type SkillMaxAggregateOutputType = {
    id: string | null
    label: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    visible: boolean | null
    description: string | null
    experience: number | null
    calculatedExperience: number | null
    includeInTopSkills: boolean | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    label: number
    slug: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    visible: number
    description: number
    categories: number
    programmingLanguages: number
    programmingDomains: number
    experience: number
    calculatedExperience: number
    includeInTopSkills: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    experience?: true
    calculatedExperience?: true
  }

  export type SkillSumAggregateInputType = {
    experience?: true
    calculatedExperience?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    label?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    description?: true
    experience?: true
    calculatedExperience?: true
    includeInTopSkills?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    label?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    description?: true
    experience?: true
    calculatedExperience?: true
    includeInTopSkills?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    label?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    visible?: true
    description?: true
    categories?: true
    programmingLanguages?: true
    programmingDomains?: true
    experience?: true
    calculatedExperience?: true
    includeInTopSkills?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: string
    label: string
    slug: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    visible: boolean
    description: string | null
    categories: $Enums.SkillCategory[]
    programmingLanguages: $Enums.ProgrammingLanguage[]
    programmingDomains: $Enums.ProgrammingDomain[]
    experience: number | null
    calculatedExperience: number
    includeInTopSkills: boolean
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    visible?: boolean
    description?: boolean
    categories?: boolean
    programmingLanguages?: boolean
    programmingDomains?: boolean
    experience?: boolean
    calculatedExperience?: boolean
    includeInTopSkills?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    experiences?: boolean | Skill$experiencesArgs<ExtArgs>
    educations?: boolean | Skill$educationsArgs<ExtArgs>
    courses?: boolean | Skill$coursesArgs<ExtArgs>
    projects?: boolean | Skill$projectsArgs<ExtArgs>
    details?: boolean | Skill$detailsArgs<ExtArgs>
    nestedDetails?: boolean | Skill$nestedDetailsArgs<ExtArgs>
    repositories?: boolean | Skill$repositoriesArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    label?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    visible?: boolean
    description?: boolean
    categories?: boolean
    programmingLanguages?: boolean
    programmingDomains?: boolean
    experience?: boolean
    calculatedExperience?: boolean
    includeInTopSkills?: boolean
  }

  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    experiences?: boolean | Skill$experiencesArgs<ExtArgs>
    educations?: boolean | Skill$educationsArgs<ExtArgs>
    courses?: boolean | Skill$coursesArgs<ExtArgs>
    projects?: boolean | Skill$projectsArgs<ExtArgs>
    details?: boolean | Skill$detailsArgs<ExtArgs>
    nestedDetails?: boolean | Skill$nestedDetailsArgs<ExtArgs>
    repositories?: boolean | Skill$repositoriesArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      experiences: Prisma.$ExperiencePayload<ExtArgs>[]
      educations: Prisma.$EducationPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
      projects: Prisma.$ProjectPayload<ExtArgs>[]
      details: Prisma.$DetailPayload<ExtArgs>[]
      nestedDetails: Prisma.$NestedDetailPayload<ExtArgs>[]
      repositories: Prisma.$RepositoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
      slug: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      visible: boolean
      description: string | null
      categories: $Enums.SkillCategory[]
      programmingLanguages: $Enums.ProgrammingLanguage[]
      programmingDomains: $Enums.ProgrammingDomain[]
      experience: number | null
      calculatedExperience: number
      includeInTopSkills: boolean
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }


  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Skill that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
    **/
    create<T extends SkillCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SkillCreateArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Skills.
     *     @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skill = await prisma.skill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
    **/
    delete<T extends SkillDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
    **/
    upsert<T extends SkillUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>
    ): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    experiences<T extends Skill$experiencesArgs<ExtArgs> = {}>(args?: Subset<T, Skill$experiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findMany'> | Null>;

    educations<T extends Skill$educationsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$educationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends Skill$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Skill$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    projects<T extends Skill$projectsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'> | Null>;

    details<T extends Skill$detailsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    nestedDetails<T extends Skill$nestedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$nestedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    repositories<T extends Skill$repositoriesArgs<ExtArgs> = {}>(args?: Subset<T, Skill$repositoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Skill model
   */ 
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'String'>
    readonly label: FieldRef<"Skill", 'String'>
    readonly slug: FieldRef<"Skill", 'String'>
    readonly createdAt: FieldRef<"Skill", 'DateTime'>
    readonly createdById: FieldRef<"Skill", 'String'>
    readonly updatedAt: FieldRef<"Skill", 'DateTime'>
    readonly updatedById: FieldRef<"Skill", 'String'>
    readonly visible: FieldRef<"Skill", 'Boolean'>
    readonly description: FieldRef<"Skill", 'String'>
    readonly categories: FieldRef<"Skill", 'SkillCategory[]'>
    readonly programmingLanguages: FieldRef<"Skill", 'ProgrammingLanguage[]'>
    readonly programmingDomains: FieldRef<"Skill", 'ProgrammingDomain[]'>
    readonly experience: FieldRef<"Skill", 'Int'>
    readonly calculatedExperience: FieldRef<"Skill", 'Int'>
    readonly includeInTopSkills: FieldRef<"Skill", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }


  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
  }


  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }


  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }


  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
  }


  /**
   * Skill.experiences
   */
  export type Skill$experiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * Skill.educations
   */
  export type Skill$educationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * Skill.courses
   */
  export type Skill$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Skill.projects
   */
  export type Skill$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Skill.details
   */
  export type Skill$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    where?: DetailWhereInput
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    cursor?: DetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * Skill.nestedDetails
   */
  export type Skill$nestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    cursor?: NestedDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * Skill.repositories
   */
  export type Skill$repositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    where?: RepositoryWhereInput
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    cursor?: RepositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
  }



  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    educationId: string | null
    visible: boolean | null
    description: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    educationId: string | null
    visible: boolean | null
    description: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    shortName: number
    slug: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    educationId: number
    visible: number
    description: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    educationId?: true
    visible?: true
    description?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    educationId?: true
    visible?: true
    description?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    educationId?: true
    visible?: true
    description?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    name: string
    shortName: string | null
    slug: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    educationId: string
    visible: boolean
    description: string | null
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    educationId?: boolean
    visible?: boolean
    description?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | EducationDefaultArgs<ExtArgs>
    skills?: boolean | Course$skillsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    shortName?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    educationId?: boolean
    visible?: boolean
    description?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    education?: boolean | EducationDefaultArgs<ExtArgs>
    skills?: boolean | Course$skillsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      education: Prisma.$EducationPayload<ExtArgs>
      skills: Prisma.$SkillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      shortName: string | null
      slug: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      educationId: string
      visible: boolean
      description: string | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }


  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    education<T extends EducationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EducationDefaultArgs<ExtArgs>>): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    skills<T extends Course$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Course$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly name: FieldRef<"Course", 'String'>
    readonly shortName: FieldRef<"Course", 'String'>
    readonly slug: FieldRef<"Course", 'String'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly createdById: FieldRef<"Course", 'String'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
    readonly updatedById: FieldRef<"Course", 'String'>
    readonly educationId: FieldRef<"Course", 'String'>
    readonly visible: FieldRef<"Course", 'Boolean'>
    readonly description: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.skills
   */
  export type Course$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
  }



  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    description: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    highlighted: boolean | null
    visible: boolean | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    shortName: string | null
    description: string | null
    slug: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    highlighted: boolean | null
    visible: boolean | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    shortName: number
    description: number
    slug: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    startDate: number
    highlighted: number
    visible: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    description?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    highlighted?: true
    visible?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    description?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    highlighted?: true
    visible?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    shortName?: true
    description?: true
    slug?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    highlighted?: true
    visible?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    shortName: string | null
    description: string
    slug: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    startDate: Date
    highlighted: boolean
    visible: boolean
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    highlighted?: boolean
    visible?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Project$skillsArgs<ExtArgs>
    details?: boolean | Project$detailsArgs<ExtArgs>
    nestedDetails?: boolean | Project$nestedDetailsArgs<ExtArgs>
    repositories?: boolean | Project$repositoriesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    slug?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    highlighted?: boolean
    visible?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Project$skillsArgs<ExtArgs>
    details?: boolean | Project$detailsArgs<ExtArgs>
    nestedDetails?: boolean | Project$nestedDetailsArgs<ExtArgs>
    repositories?: boolean | Project$repositoriesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      skills: Prisma.$SkillPayload<ExtArgs>[]
      details: Prisma.$DetailPayload<ExtArgs>[]
      nestedDetails: Prisma.$NestedDetailPayload<ExtArgs>[]
      repositories: Prisma.$RepositoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      shortName: string | null
      description: string
      slug: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      startDate: Date
      highlighted: boolean
      visible: boolean
    }, ExtArgs["result"]["project"]>
    composites: {}
  }


  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    skills<T extends Project$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Project$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    details<T extends Project$detailsArgs<ExtArgs> = {}>(args?: Subset<T, Project$detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    nestedDetails<T extends Project$nestedDetailsArgs<ExtArgs> = {}>(args?: Subset<T, Project$nestedDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NestedDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    repositories<T extends Project$repositoriesArgs<ExtArgs> = {}>(args?: Subset<T, Project$repositoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepositoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly shortName: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly slug: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly createdById: FieldRef<"Project", 'String'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly updatedById: FieldRef<"Project", 'String'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly highlighted: FieldRef<"Project", 'Boolean'>
    readonly visible: FieldRef<"Project", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project.skills
   */
  export type Project$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Project.details
   */
  export type Project$detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Detail
     */
    select?: DetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DetailInclude<ExtArgs> | null
    where?: DetailWhereInput
    orderBy?: DetailOrderByWithRelationInput | DetailOrderByWithRelationInput[]
    cursor?: DetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetailScalarFieldEnum | DetailScalarFieldEnum[]
  }


  /**
   * Project.nestedDetails
   */
  export type Project$nestedDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NestedDetail
     */
    select?: NestedDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NestedDetailInclude<ExtArgs> | null
    where?: NestedDetailWhereInput
    orderBy?: NestedDetailOrderByWithRelationInput | NestedDetailOrderByWithRelationInput[]
    cursor?: NestedDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NestedDetailScalarFieldEnum | NestedDetailScalarFieldEnum[]
  }


  /**
   * Project.repositories
   */
  export type Project$repositoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Repository
     */
    select?: RepositorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RepositoryInclude<ExtArgs> | null
    where?: RepositoryWhereInput
    orderBy?: RepositoryOrderByWithRelationInput | RepositoryOrderByWithRelationInput[]
    cursor?: RepositoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepositoryScalarFieldEnum | RepositoryScalarFieldEnum[]
  }


  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
  }



  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    name: string | null
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string | null
    state: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    name: string | null
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string | null
    state: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    name: number
    shortName: number
    description: number
    logoImageUrl: number
    websiteUrl: number
    city: number
    state: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    name: string
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string
    state: string
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    logoImageUrl?: boolean
    websiteUrl?: boolean
    city?: boolean
    state?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    experiences?: boolean | Company$experiencesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    logoImageUrl?: boolean
    websiteUrl?: boolean
    city?: boolean
    state?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    experiences?: boolean | Company$experiencesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      experiences: Prisma.$ExperiencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      name: string
      shortName: string | null
      description: string | null
      logoImageUrl: string | null
      websiteUrl: string | null
      city: string
      state: string
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    experiences<T extends Company$experiencesArgs<ExtArgs> = {}>(args?: Subset<T, Company$experiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly createdById: FieldRef<"Company", 'String'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly updatedById: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly shortName: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly logoImageUrl: FieldRef<"Company", 'String'>
    readonly websiteUrl: FieldRef<"Company", 'String'>
    readonly city: FieldRef<"Company", 'String'>
    readonly state: FieldRef<"Company", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.experiences
   */
  export type Company$experiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    cursor?: ExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    name: string | null
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string | null
    state: string | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    name: string | null
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string | null
    state: string | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    name: number
    shortName: number
    description: number
    logoImageUrl: number
    websiteUrl: number
    city: number
    state: number
    _all: number
  }


  export type SchoolMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    name?: true
    shortName?: true
    description?: true
    logoImageUrl?: true
    websiteUrl?: true
    city?: true
    state?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    name: string
    shortName: string | null
    description: string | null
    logoImageUrl: string | null
    websiteUrl: string | null
    city: string
    state: string
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    logoImageUrl?: boolean
    websiteUrl?: boolean
    city?: boolean
    state?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    educations?: boolean | School$educationsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    name?: boolean
    shortName?: boolean
    description?: boolean
    logoImageUrl?: boolean
    websiteUrl?: boolean
    city?: boolean
    state?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    educations?: boolean | School$educationsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      educations: Prisma.$EducationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      name: string
      shortName: string | null
      description: string | null
      logoImageUrl: string | null
      websiteUrl: string | null
      city: string
      state: string
    }, ExtArgs["result"]["school"]>
    composites: {}
  }


  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
    **/
    create<T extends SchoolCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schools.
     *     @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const school = await prisma.school.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
    **/
    delete<T extends SchoolDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    educations<T extends School$educationsArgs<ExtArgs> = {}>(args?: Subset<T, School$educationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'String'>
    readonly createdAt: FieldRef<"School", 'DateTime'>
    readonly createdById: FieldRef<"School", 'String'>
    readonly updatedAt: FieldRef<"School", 'DateTime'>
    readonly updatedById: FieldRef<"School", 'String'>
    readonly name: FieldRef<"School", 'String'>
    readonly shortName: FieldRef<"School", 'String'>
    readonly description: FieldRef<"School", 'String'>
    readonly logoImageUrl: FieldRef<"School", 'String'>
    readonly websiteUrl: FieldRef<"School", 'String'>
    readonly city: FieldRef<"School", 'String'>
    readonly state: FieldRef<"School", 'String'>
  }
    

  // Custom InputTypes

  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }


  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }


  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }


  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }


  /**
   * School.educations
   */
  export type School$educationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    cursor?: EducationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
  }



  /**
   * Model Experience
   */

  export type AggregateExperience = {
    _count: ExperienceCountAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  export type ExperienceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    endDate: Date | null
    companyId: string | null
    title: string | null
    shortTitle: string | null
    description: string | null
    isRemote: boolean | null
    visible: boolean | null
    highlighted: boolean | null
  }

  export type ExperienceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    endDate: Date | null
    companyId: string | null
    title: string | null
    shortTitle: string | null
    description: string | null
    isRemote: boolean | null
    visible: boolean | null
    highlighted: boolean | null
  }

  export type ExperienceCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    startDate: number
    endDate: number
    companyId: number
    title: number
    shortTitle: number
    description: number
    isRemote: number
    visible: number
    highlighted: number
    _all: number
  }


  export type ExperienceMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    companyId?: true
    title?: true
    shortTitle?: true
    description?: true
    isRemote?: true
    visible?: true
    highlighted?: true
  }

  export type ExperienceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    companyId?: true
    title?: true
    shortTitle?: true
    description?: true
    isRemote?: true
    visible?: true
    highlighted?: true
  }

  export type ExperienceCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    companyId?: true
    title?: true
    shortTitle?: true
    description?: true
    isRemote?: true
    visible?: true
    highlighted?: true
    _all?: true
  }

  export type ExperienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experience to aggregate.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Experiences
    **/
    _count?: true | ExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExperienceMaxAggregateInputType
  }

  export type GetExperienceAggregateType<T extends ExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExperience[P]>
      : GetScalarType<T[P], AggregateExperience[P]>
  }




  export type ExperienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExperienceWhereInput
    orderBy?: ExperienceOrderByWithAggregationInput | ExperienceOrderByWithAggregationInput[]
    by: ExperienceScalarFieldEnum[] | ExperienceScalarFieldEnum
    having?: ExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExperienceCountAggregateInputType | true
    _min?: ExperienceMinAggregateInputType
    _max?: ExperienceMaxAggregateInputType
  }

  export type ExperienceGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    startDate: Date
    endDate: Date | null
    companyId: string
    title: string
    shortTitle: string | null
    description: string | null
    isRemote: boolean
    visible: boolean
    highlighted: boolean
    _count: ExperienceCountAggregateOutputType | null
    _min: ExperienceMinAggregateOutputType | null
    _max: ExperienceMaxAggregateOutputType | null
  }

  type GetExperienceGroupByPayload<T extends ExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], ExperienceGroupByOutputType[P]>
        }
      >
    >


  export type ExperienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    endDate?: boolean
    companyId?: boolean
    title?: boolean
    shortTitle?: boolean
    description?: boolean
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Experience$skillsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | ExperienceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["experience"]>

  export type ExperienceSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    endDate?: boolean
    companyId?: boolean
    title?: boolean
    shortTitle?: boolean
    description?: boolean
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ExperienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Experience$skillsArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    _count?: boolean | ExperienceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExperiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Experience"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      skills: Prisma.$SkillPayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      startDate: Date
      endDate: Date | null
      companyId: string
      title: string
      shortTitle: string | null
      description: string | null
      isRemote: boolean
      visible: boolean
      highlighted: boolean
    }, ExtArgs["result"]["experience"]>
    composites: {}
  }


  type ExperienceGetPayload<S extends boolean | null | undefined | ExperienceDefaultArgs> = $Result.GetResult<Prisma.$ExperiencePayload, S>

  type ExperienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExperienceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExperienceCountAggregateInputType | true
    }

  export interface ExperienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Experience'], meta: { name: 'Experience' } }
    /**
     * Find zero or one Experience that matches the filter.
     * @param {ExperienceFindUniqueArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExperienceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceFindUniqueArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Experience that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExperienceFindUniqueOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExperienceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Experience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExperienceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceFindFirstArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Experience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindFirstOrThrowArgs} args - Arguments to find a Experience
     * @example
     * // Get one Experience
     * const experience = await prisma.experience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExperienceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Experiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Experiences
     * const experiences = await prisma.experience.findMany()
     * 
     * // Get first 10 Experiences
     * const experiences = await prisma.experience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const experienceWithIdOnly = await prisma.experience.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExperienceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Experience.
     * @param {ExperienceCreateArgs} args - Arguments to create a Experience.
     * @example
     * // Create one Experience
     * const Experience = await prisma.experience.create({
     *   data: {
     *     // ... data to create a Experience
     *   }
     * })
     * 
    **/
    create<T extends ExperienceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceCreateArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Experiences.
     *     @param {ExperienceCreateManyArgs} args - Arguments to create many Experiences.
     *     @example
     *     // Create many Experiences
     *     const experience = await prisma.experience.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExperienceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Experience.
     * @param {ExperienceDeleteArgs} args - Arguments to delete one Experience.
     * @example
     * // Delete one Experience
     * const Experience = await prisma.experience.delete({
     *   where: {
     *     // ... filter to delete one Experience
     *   }
     * })
     * 
    **/
    delete<T extends ExperienceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceDeleteArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Experience.
     * @param {ExperienceUpdateArgs} args - Arguments to update one Experience.
     * @example
     * // Update one Experience
     * const experience = await prisma.experience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExperienceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceUpdateArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Experiences.
     * @param {ExperienceDeleteManyArgs} args - Arguments to filter Experiences to delete.
     * @example
     * // Delete a few Experiences
     * const { count } = await prisma.experience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExperienceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExperienceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Experiences
     * const experience = await prisma.experience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExperienceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Experience.
     * @param {ExperienceUpsertArgs} args - Arguments to update or create a Experience.
     * @example
     * // Update or create a Experience
     * const experience = await prisma.experience.upsert({
     *   create: {
     *     // ... data to create a Experience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Experience we want to update
     *   }
     * })
    **/
    upsert<T extends ExperienceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExperienceUpsertArgs<ExtArgs>>
    ): Prisma__ExperienceClient<$Result.GetResult<Prisma.$ExperiencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Experiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceCountArgs} args - Arguments to filter Experiences to count.
     * @example
     * // Count the number of Experiences
     * const count = await prisma.experience.count({
     *   where: {
     *     // ... the filter for the Experiences we want to count
     *   }
     * })
    **/
    count<T extends ExperienceCountArgs>(
      args?: Subset<T, ExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExperienceAggregateArgs>(args: Subset<T, ExperienceAggregateArgs>): Prisma.PrismaPromise<GetExperienceAggregateType<T>>

    /**
     * Group by Experience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExperienceGroupByArgs['orderBy'] }
        : { orderBy?: ExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Experience model
   */
  readonly fields: ExperienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Experience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExperienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    skills<T extends Experience$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Experience$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Experience model
   */ 
  interface ExperienceFieldRefs {
    readonly id: FieldRef<"Experience", 'String'>
    readonly createdAt: FieldRef<"Experience", 'DateTime'>
    readonly createdById: FieldRef<"Experience", 'String'>
    readonly updatedAt: FieldRef<"Experience", 'DateTime'>
    readonly updatedById: FieldRef<"Experience", 'String'>
    readonly startDate: FieldRef<"Experience", 'DateTime'>
    readonly endDate: FieldRef<"Experience", 'DateTime'>
    readonly companyId: FieldRef<"Experience", 'String'>
    readonly title: FieldRef<"Experience", 'String'>
    readonly shortTitle: FieldRef<"Experience", 'String'>
    readonly description: FieldRef<"Experience", 'String'>
    readonly isRemote: FieldRef<"Experience", 'Boolean'>
    readonly visible: FieldRef<"Experience", 'Boolean'>
    readonly highlighted: FieldRef<"Experience", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Experience findUnique
   */
  export type ExperienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience findUniqueOrThrow
   */
  export type ExperienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience findFirst
   */
  export type ExperienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * Experience findFirstOrThrow
   */
  export type ExperienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experience to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Experiences.
     */
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * Experience findMany
   */
  export type ExperienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter, which Experiences to fetch.
     */
    where?: ExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Experiences to fetch.
     */
    orderBy?: ExperienceOrderByWithRelationInput | ExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Experiences.
     */
    cursor?: ExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Experiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Experiences.
     */
    skip?: number
    distinct?: ExperienceScalarFieldEnum | ExperienceScalarFieldEnum[]
  }


  /**
   * Experience create
   */
  export type ExperienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to create a Experience.
     */
    data: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
  }


  /**
   * Experience createMany
   */
  export type ExperienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Experiences.
     */
    data: ExperienceCreateManyInput | ExperienceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Experience update
   */
  export type ExperienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The data needed to update a Experience.
     */
    data: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
    /**
     * Choose, which Experience to update.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience updateMany
   */
  export type ExperienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Experiences.
     */
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyInput>
    /**
     * Filter which Experiences to update
     */
    where?: ExperienceWhereInput
  }


  /**
   * Experience upsert
   */
  export type ExperienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * The filter to search for the Experience to update in case it exists.
     */
    where: ExperienceWhereUniqueInput
    /**
     * In case the Experience found by the `where` argument doesn't exist, create a new Experience with this data.
     */
    create: XOR<ExperienceCreateInput, ExperienceUncheckedCreateInput>
    /**
     * In case the Experience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExperienceUpdateInput, ExperienceUncheckedUpdateInput>
  }


  /**
   * Experience delete
   */
  export type ExperienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
    /**
     * Filter which Experience to delete.
     */
    where: ExperienceWhereUniqueInput
  }


  /**
   * Experience deleteMany
   */
  export type ExperienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Experiences to delete
     */
    where?: ExperienceWhereInput
  }


  /**
   * Experience.skills
   */
  export type Experience$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Experience without action
   */
  export type ExperienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Experience
     */
    select?: ExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExperienceInclude<ExtArgs> | null
  }



  /**
   * Model Education
   */

  export type AggregateEducation = {
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  export type EducationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    endDate: Date | null
    note: string | null
    degree: $Enums.Degree | null
    description: string | null
    major: string | null
    shortMajor: string | null
    minor: string | null
    concentration: string | null
    schoolId: string | null
    postPoned: boolean | null
    visible: boolean | null
    highlighted: boolean | null
  }

  export type EducationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    startDate: Date | null
    endDate: Date | null
    note: string | null
    degree: $Enums.Degree | null
    description: string | null
    major: string | null
    shortMajor: string | null
    minor: string | null
    concentration: string | null
    schoolId: string | null
    postPoned: boolean | null
    visible: boolean | null
    highlighted: boolean | null
  }

  export type EducationCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    startDate: number
    endDate: number
    note: number
    degree: number
    description: number
    major: number
    shortMajor: number
    minor: number
    concentration: number
    schoolId: number
    postPoned: number
    visible: number
    highlighted: number
    _all: number
  }


  export type EducationMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    note?: true
    degree?: true
    description?: true
    major?: true
    shortMajor?: true
    minor?: true
    concentration?: true
    schoolId?: true
    postPoned?: true
    visible?: true
    highlighted?: true
  }

  export type EducationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    note?: true
    degree?: true
    description?: true
    major?: true
    shortMajor?: true
    minor?: true
    concentration?: true
    schoolId?: true
    postPoned?: true
    visible?: true
    highlighted?: true
  }

  export type EducationCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    startDate?: true
    endDate?: true
    note?: true
    degree?: true
    description?: true
    major?: true
    shortMajor?: true
    minor?: true
    concentration?: true
    schoolId?: true
    postPoned?: true
    visible?: true
    highlighted?: true
    _all?: true
  }

  export type EducationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Education to aggregate.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Educations
    **/
    _count?: true | EducationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EducationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EducationMaxAggregateInputType
  }

  export type GetEducationAggregateType<T extends EducationAggregateArgs> = {
        [P in keyof T & keyof AggregateEducation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEducation[P]>
      : GetScalarType<T[P], AggregateEducation[P]>
  }




  export type EducationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EducationWhereInput
    orderBy?: EducationOrderByWithAggregationInput | EducationOrderByWithAggregationInput[]
    by: EducationScalarFieldEnum[] | EducationScalarFieldEnum
    having?: EducationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EducationCountAggregateInputType | true
    _min?: EducationMinAggregateInputType
    _max?: EducationMaxAggregateInputType
  }

  export type EducationGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    startDate: Date
    endDate: Date | null
    note: string | null
    degree: $Enums.Degree
    description: string | null
    major: string
    shortMajor: string | null
    minor: string | null
    concentration: string | null
    schoolId: string
    postPoned: boolean
    visible: boolean
    highlighted: boolean
    _count: EducationCountAggregateOutputType | null
    _min: EducationMinAggregateOutputType | null
    _max: EducationMaxAggregateOutputType | null
  }

  type GetEducationGroupByPayload<T extends EducationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EducationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EducationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EducationGroupByOutputType[P]>
            : GetScalarType<T[P], EducationGroupByOutputType[P]>
        }
      >
    >


  export type EducationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    endDate?: boolean
    note?: boolean
    degree?: boolean
    description?: boolean
    major?: boolean
    shortMajor?: boolean
    minor?: boolean
    concentration?: boolean
    schoolId?: boolean
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Education$skillsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    courses?: boolean | Education$coursesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["education"]>

  export type EducationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    startDate?: boolean
    endDate?: boolean
    note?: boolean
    degree?: boolean
    description?: boolean
    major?: boolean
    shortMajor?: boolean
    minor?: boolean
    concentration?: boolean
    schoolId?: boolean
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type EducationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    skills?: boolean | Education$skillsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    courses?: boolean | Education$coursesArgs<ExtArgs>
    _count?: boolean | EducationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EducationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Education"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      skills: Prisma.$SkillPayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs>
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      startDate: Date
      endDate: Date | null
      note: string | null
      degree: $Enums.Degree
      description: string | null
      major: string
      shortMajor: string | null
      minor: string | null
      concentration: string | null
      schoolId: string
      postPoned: boolean
      visible: boolean
      highlighted: boolean
    }, ExtArgs["result"]["education"]>
    composites: {}
  }


  type EducationGetPayload<S extends boolean | null | undefined | EducationDefaultArgs> = $Result.GetResult<Prisma.$EducationPayload, S>

  type EducationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EducationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EducationCountAggregateInputType | true
    }

  export interface EducationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Education'], meta: { name: 'Education' } }
    /**
     * Find zero or one Education that matches the filter.
     * @param {EducationFindUniqueArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EducationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EducationFindUniqueArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Education that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EducationFindUniqueOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EducationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Education that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EducationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationFindFirstArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Education that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindFirstOrThrowArgs} args - Arguments to find a Education
     * @example
     * // Get one Education
     * const education = await prisma.education.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EducationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Educations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Educations
     * const educations = await prisma.education.findMany()
     * 
     * // Get first 10 Educations
     * const educations = await prisma.education.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const educationWithIdOnly = await prisma.education.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EducationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Education.
     * @param {EducationCreateArgs} args - Arguments to create a Education.
     * @example
     * // Create one Education
     * const Education = await prisma.education.create({
     *   data: {
     *     // ... data to create a Education
     *   }
     * })
     * 
    **/
    create<T extends EducationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EducationCreateArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Educations.
     *     @param {EducationCreateManyArgs} args - Arguments to create many Educations.
     *     @example
     *     // Create many Educations
     *     const education = await prisma.education.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EducationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Education.
     * @param {EducationDeleteArgs} args - Arguments to delete one Education.
     * @example
     * // Delete one Education
     * const Education = await prisma.education.delete({
     *   where: {
     *     // ... filter to delete one Education
     *   }
     * })
     * 
    **/
    delete<T extends EducationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EducationDeleteArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Education.
     * @param {EducationUpdateArgs} args - Arguments to update one Education.
     * @example
     * // Update one Education
     * const education = await prisma.education.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EducationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EducationUpdateArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Educations.
     * @param {EducationDeleteManyArgs} args - Arguments to filter Educations to delete.
     * @example
     * // Delete a few Educations
     * const { count } = await prisma.education.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EducationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EducationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Educations
     * const education = await prisma.education.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EducationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EducationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Education.
     * @param {EducationUpsertArgs} args - Arguments to update or create a Education.
     * @example
     * // Update or create a Education
     * const education = await prisma.education.upsert({
     *   create: {
     *     // ... data to create a Education
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Education we want to update
     *   }
     * })
    **/
    upsert<T extends EducationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EducationUpsertArgs<ExtArgs>>
    ): Prisma__EducationClient<$Result.GetResult<Prisma.$EducationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Educations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationCountArgs} args - Arguments to filter Educations to count.
     * @example
     * // Count the number of Educations
     * const count = await prisma.education.count({
     *   where: {
     *     // ... the filter for the Educations we want to count
     *   }
     * })
    **/
    count<T extends EducationCountArgs>(
      args?: Subset<T, EducationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EducationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EducationAggregateArgs>(args: Subset<T, EducationAggregateArgs>): Prisma.PrismaPromise<GetEducationAggregateType<T>>

    /**
     * Group by Education.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EducationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EducationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EducationGroupByArgs['orderBy'] }
        : { orderBy?: EducationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EducationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEducationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Education model
   */
  readonly fields: EducationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Education.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EducationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    skills<T extends Education$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Education$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, 'findMany'> | Null>;

    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    courses<T extends Education$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Education$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Education model
   */ 
  interface EducationFieldRefs {
    readonly id: FieldRef<"Education", 'String'>
    readonly createdAt: FieldRef<"Education", 'DateTime'>
    readonly createdById: FieldRef<"Education", 'String'>
    readonly updatedAt: FieldRef<"Education", 'DateTime'>
    readonly updatedById: FieldRef<"Education", 'String'>
    readonly startDate: FieldRef<"Education", 'DateTime'>
    readonly endDate: FieldRef<"Education", 'DateTime'>
    readonly note: FieldRef<"Education", 'String'>
    readonly degree: FieldRef<"Education", 'Degree'>
    readonly description: FieldRef<"Education", 'String'>
    readonly major: FieldRef<"Education", 'String'>
    readonly shortMajor: FieldRef<"Education", 'String'>
    readonly minor: FieldRef<"Education", 'String'>
    readonly concentration: FieldRef<"Education", 'String'>
    readonly schoolId: FieldRef<"Education", 'String'>
    readonly postPoned: FieldRef<"Education", 'Boolean'>
    readonly visible: FieldRef<"Education", 'Boolean'>
    readonly highlighted: FieldRef<"Education", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Education findUnique
   */
  export type EducationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education findUniqueOrThrow
   */
  export type EducationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education findFirst
   */
  export type EducationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * Education findFirstOrThrow
   */
  export type EducationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Education to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Educations.
     */
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * Education findMany
   */
  export type EducationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter, which Educations to fetch.
     */
    where?: EducationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Educations to fetch.
     */
    orderBy?: EducationOrderByWithRelationInput | EducationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Educations.
     */
    cursor?: EducationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Educations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Educations.
     */
    skip?: number
    distinct?: EducationScalarFieldEnum | EducationScalarFieldEnum[]
  }


  /**
   * Education create
   */
  export type EducationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to create a Education.
     */
    data: XOR<EducationCreateInput, EducationUncheckedCreateInput>
  }


  /**
   * Education createMany
   */
  export type EducationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Educations.
     */
    data: EducationCreateManyInput | EducationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Education update
   */
  export type EducationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The data needed to update a Education.
     */
    data: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
    /**
     * Choose, which Education to update.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education updateMany
   */
  export type EducationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Educations.
     */
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyInput>
    /**
     * Filter which Educations to update
     */
    where?: EducationWhereInput
  }


  /**
   * Education upsert
   */
  export type EducationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * The filter to search for the Education to update in case it exists.
     */
    where: EducationWhereUniqueInput
    /**
     * In case the Education found by the `where` argument doesn't exist, create a new Education with this data.
     */
    create: XOR<EducationCreateInput, EducationUncheckedCreateInput>
    /**
     * In case the Education was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EducationUpdateInput, EducationUncheckedUpdateInput>
  }


  /**
   * Education delete
   */
  export type EducationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
    /**
     * Filter which Education to delete.
     */
    where: EducationWhereUniqueInput
  }


  /**
   * Education deleteMany
   */
  export type EducationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Educations to delete
     */
    where?: EducationWhereInput
  }


  /**
   * Education.skills
   */
  export type Education$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SkillInclude<ExtArgs> | null
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    cursor?: SkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }


  /**
   * Education.courses
   */
  export type Education$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Education without action
   */
  export type EducationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Education
     */
    select?: EducationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EducationInclude<ExtArgs> | null
  }



  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    middleName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    phoneNumber: string | null
    intro: string | null
    tagline: string | null
    githubUrl: string | null
    linkedinUrl: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    middleName: string | null
    profileImageUrl: string | null
    emailAddress: string | null
    phoneNumber: string | null
    intro: string | null
    tagline: string | null
    githubUrl: string | null
    linkedinUrl: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    firstName: number
    lastName: number
    displayName: number
    middleName: number
    profileImageUrl: number
    emailAddress: number
    phoneNumber: number
    intro: number
    tagline: number
    githubUrl: number
    linkedinUrl: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    firstName?: true
    lastName?: true
    displayName?: true
    middleName?: true
    profileImageUrl?: true
    emailAddress?: true
    phoneNumber?: true
    intro?: true
    tagline?: true
    githubUrl?: true
    linkedinUrl?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    firstName?: true
    lastName?: true
    displayName?: true
    middleName?: true
    profileImageUrl?: true
    emailAddress?: true
    phoneNumber?: true
    intro?: true
    tagline?: true
    githubUrl?: true
    linkedinUrl?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    firstName?: true
    lastName?: true
    displayName?: true
    middleName?: true
    profileImageUrl?: true
    emailAddress?: true
    phoneNumber?: true
    intro?: true
    tagline?: true
    githubUrl?: true
    linkedinUrl?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    createdAt: Date
    createdById: string
    updatedAt: Date
    updatedById: string
    firstName: string
    lastName: string
    displayName: string
    middleName: string | null
    profileImageUrl: string | null
    emailAddress: string
    phoneNumber: string | null
    intro: string
    tagline: string | null
    githubUrl: string | null
    linkedinUrl: string | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    middleName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    phoneNumber?: boolean
    intro?: boolean
    tagline?: boolean
    githubUrl?: boolean
    linkedinUrl?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    middleName?: boolean
    profileImageUrl?: boolean
    emailAddress?: boolean
    phoneNumber?: boolean
    intro?: boolean
    tagline?: boolean
    githubUrl?: boolean
    linkedinUrl?: boolean
  }

  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      createdById: string
      updatedAt: Date
      updatedById: string
      firstName: string
      lastName: string
      displayName: string
      middleName: string | null
      profileImageUrl: string | null
      emailAddress: string
      phoneNumber: string | null
      intro: string
      tagline: string | null
      githubUrl: string | null
      linkedinUrl: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }


  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>
    ): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly createdById: FieldRef<"Profile", 'String'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedById: FieldRef<"Profile", 'String'>
    readonly firstName: FieldRef<"Profile", 'String'>
    readonly lastName: FieldRef<"Profile", 'String'>
    readonly displayName: FieldRef<"Profile", 'String'>
    readonly middleName: FieldRef<"Profile", 'String'>
    readonly profileImageUrl: FieldRef<"Profile", 'String'>
    readonly emailAddress: FieldRef<"Profile", 'String'>
    readonly phoneNumber: FieldRef<"Profile", 'String'>
    readonly intro: FieldRef<"Profile", 'String'>
    readonly tagline: FieldRef<"Profile", 'String'>
    readonly githubUrl: FieldRef<"Profile", 'String'>
    readonly linkedinUrl: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    firstName: 'firstName',
    lastName: 'lastName',
    profileImageUrl: 'profileImageUrl',
    emailAddress: 'emailAddress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const NestedDetailScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    label: 'label',
    description: 'description',
    shortDescription: 'shortDescription',
    visible: 'visible',
    detailId: 'detailId',
    projectId: 'projectId'
  };

  export type NestedDetailScalarFieldEnum = (typeof NestedDetailScalarFieldEnum)[keyof typeof NestedDetailScalarFieldEnum]


  export const DetailScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    entityId: 'entityId',
    entityType: 'entityType',
    label: 'label',
    description: 'description',
    shortDescription: 'shortDescription',
    visible: 'visible',
    projectId: 'projectId'
  };

  export type DetailScalarFieldEnum = (typeof DetailScalarFieldEnum)[keyof typeof DetailScalarFieldEnum]


  export const ResumeScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    primary: 'primary',
    downloadUrl: 'downloadUrl',
    url: 'url',
    pathname: 'pathname',
    filename: 'filename',
    size: 'size'
  };

  export type ResumeScalarFieldEnum = (typeof ResumeScalarFieldEnum)[keyof typeof ResumeScalarFieldEnum]


  export const RepositoryScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    description: 'description',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    visible: 'visible',
    highlighted: 'highlighted',
    startDate: 'startDate',
    npmPackageName: 'npmPackageName'
  };

  export type RepositoryScalarFieldEnum = (typeof RepositoryScalarFieldEnum)[keyof typeof RepositoryScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    label: 'label',
    slug: 'slug',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    visible: 'visible',
    description: 'description',
    categories: 'categories',
    programmingLanguages: 'programmingLanguages',
    programmingDomains: 'programmingDomains',
    experience: 'experience',
    calculatedExperience: 'calculatedExperience',
    includeInTopSkills: 'includeInTopSkills'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    shortName: 'shortName',
    slug: 'slug',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    educationId: 'educationId',
    visible: 'visible',
    description: 'description'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    shortName: 'shortName',
    description: 'description',
    slug: 'slug',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    startDate: 'startDate',
    highlighted: 'highlighted',
    visible: 'visible'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    name: 'name',
    shortName: 'shortName',
    description: 'description',
    logoImageUrl: 'logoImageUrl',
    websiteUrl: 'websiteUrl',
    city: 'city',
    state: 'state'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    name: 'name',
    shortName: 'shortName',
    description: 'description',
    logoImageUrl: 'logoImageUrl',
    websiteUrl: 'websiteUrl',
    city: 'city',
    state: 'state'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const ExperienceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    startDate: 'startDate',
    endDate: 'endDate',
    companyId: 'companyId',
    title: 'title',
    shortTitle: 'shortTitle',
    description: 'description',
    isRemote: 'isRemote',
    visible: 'visible',
    highlighted: 'highlighted'
  };

  export type ExperienceScalarFieldEnum = (typeof ExperienceScalarFieldEnum)[keyof typeof ExperienceScalarFieldEnum]


  export const EducationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    startDate: 'startDate',
    endDate: 'endDate',
    note: 'note',
    degree: 'degree',
    description: 'description',
    major: 'major',
    shortMajor: 'shortMajor',
    minor: 'minor',
    concentration: 'concentration',
    schoolId: 'schoolId',
    postPoned: 'postPoned',
    visible: 'visible',
    highlighted: 'highlighted'
  };

  export type EducationScalarFieldEnum = (typeof EducationScalarFieldEnum)[keyof typeof EducationScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    firstName: 'firstName',
    lastName: 'lastName',
    displayName: 'displayName',
    middleName: 'middleName',
    profileImageUrl: 'profileImageUrl',
    emailAddress: 'emailAddress',
    phoneNumber: 'phoneNumber',
    intro: 'intro',
    tagline: 'tagline',
    githubUrl: 'githubUrl',
    linkedinUrl: 'linkedinUrl'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DetailEntityType'
   */
  export type EnumDetailEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DetailEntityType'>
    


  /**
   * Reference to a field of type 'DetailEntityType[]'
   */
  export type ListEnumDetailEntityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DetailEntityType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'SkillCategory[]'
   */
  export type ListEnumSkillCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillCategory[]'>
    


  /**
   * Reference to a field of type 'SkillCategory'
   */
  export type EnumSkillCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillCategory'>
    


  /**
   * Reference to a field of type 'ProgrammingLanguage[]'
   */
  export type ListEnumProgrammingLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgrammingLanguage[]'>
    


  /**
   * Reference to a field of type 'ProgrammingLanguage'
   */
  export type EnumProgrammingLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgrammingLanguage'>
    


  /**
   * Reference to a field of type 'ProgrammingDomain[]'
   */
  export type ListEnumProgrammingDomainFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgrammingDomain[]'>
    


  /**
   * Reference to a field of type 'ProgrammingDomain'
   */
  export type EnumProgrammingDomainFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProgrammingDomain'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Degree'
   */
  export type EnumDegreeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Degree'>
    


  /**
   * Reference to a field of type 'Degree[]'
   */
  export type ListEnumDegreeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Degree[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    emailAddress?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    updatedSkills?: SkillListRelationFilter
    createdSkills?: SkillListRelationFilter
    updatedCompanies?: CompanyListRelationFilter
    createdCompanies?: CompanyListRelationFilter
    updatedExperiences?: ExperienceListRelationFilter
    createdExperiences?: ExperienceListRelationFilter
    updatedSchools?: SchoolListRelationFilter
    createdSchools?: SchoolListRelationFilter
    updatedEducations?: EducationListRelationFilter
    createdEducations?: EducationListRelationFilter
    updatedProfiles?: ProfileListRelationFilter
    createdProfiles?: ProfileListRelationFilter
    updatedDetails?: DetailListRelationFilter
    createdDetails?: DetailListRelationFilter
    updatedNestedDetails?: NestedDetailListRelationFilter
    createdNestedDetails?: NestedDetailListRelationFilter
    updatedCourses?: CourseListRelationFilter
    createdCourses?: CourseListRelationFilter
    updatedProjects?: ProjectListRelationFilter
    createdProjects?: ProjectListRelationFilter
    updatedRepositories?: RepositoryListRelationFilter
    createdRepositories?: RepositoryListRelationFilter
    updatedResumes?: ResumeListRelationFilter
    createdResumes?: ResumeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    updatedSkills?: SkillOrderByRelationAggregateInput
    createdSkills?: SkillOrderByRelationAggregateInput
    updatedCompanies?: CompanyOrderByRelationAggregateInput
    createdCompanies?: CompanyOrderByRelationAggregateInput
    updatedExperiences?: ExperienceOrderByRelationAggregateInput
    createdExperiences?: ExperienceOrderByRelationAggregateInput
    updatedSchools?: SchoolOrderByRelationAggregateInput
    createdSchools?: SchoolOrderByRelationAggregateInput
    updatedEducations?: EducationOrderByRelationAggregateInput
    createdEducations?: EducationOrderByRelationAggregateInput
    updatedProfiles?: ProfileOrderByRelationAggregateInput
    createdProfiles?: ProfileOrderByRelationAggregateInput
    updatedDetails?: DetailOrderByRelationAggregateInput
    createdDetails?: DetailOrderByRelationAggregateInput
    updatedNestedDetails?: NestedDetailOrderByRelationAggregateInput
    createdNestedDetails?: NestedDetailOrderByRelationAggregateInput
    updatedCourses?: CourseOrderByRelationAggregateInput
    createdCourses?: CourseOrderByRelationAggregateInput
    updatedProjects?: ProjectOrderByRelationAggregateInput
    createdProjects?: ProjectOrderByRelationAggregateInput
    updatedRepositories?: RepositoryOrderByRelationAggregateInput
    createdRepositories?: RepositoryOrderByRelationAggregateInput
    updatedResumes?: ResumeOrderByRelationAggregateInput
    createdResumes?: ResumeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    profileImageUrl?: StringNullableFilter<"User"> | string | null
    emailAddress?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    updatedSkills?: SkillListRelationFilter
    createdSkills?: SkillListRelationFilter
    updatedCompanies?: CompanyListRelationFilter
    createdCompanies?: CompanyListRelationFilter
    updatedExperiences?: ExperienceListRelationFilter
    createdExperiences?: ExperienceListRelationFilter
    updatedSchools?: SchoolListRelationFilter
    createdSchools?: SchoolListRelationFilter
    updatedEducations?: EducationListRelationFilter
    createdEducations?: EducationListRelationFilter
    updatedProfiles?: ProfileListRelationFilter
    createdProfiles?: ProfileListRelationFilter
    updatedDetails?: DetailListRelationFilter
    createdDetails?: DetailListRelationFilter
    updatedNestedDetails?: NestedDetailListRelationFilter
    createdNestedDetails?: NestedDetailListRelationFilter
    updatedCourses?: CourseListRelationFilter
    createdCourses?: CourseListRelationFilter
    updatedProjects?: ProjectListRelationFilter
    createdProjects?: ProjectListRelationFilter
    updatedRepositories?: RepositoryListRelationFilter
    createdRepositories?: RepositoryListRelationFilter
    updatedResumes?: ResumeListRelationFilter
    createdResumes?: ResumeListRelationFilter
  }, "id" | "clerkId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    profileImageUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailAddress?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type NestedDetailWhereInput = {
    AND?: NestedDetailWhereInput | NestedDetailWhereInput[]
    OR?: NestedDetailWhereInput[]
    NOT?: NestedDetailWhereInput | NestedDetailWhereInput[]
    id?: UuidFilter<"NestedDetail"> | string
    createdAt?: DateTimeFilter<"NestedDetail"> | Date | string
    createdById?: UuidFilter<"NestedDetail"> | string
    updatedAt?: DateTimeFilter<"NestedDetail"> | Date | string
    updatedById?: UuidFilter<"NestedDetail"> | string
    label?: StringFilter<"NestedDetail"> | string
    description?: StringNullableFilter<"NestedDetail"> | string | null
    shortDescription?: StringNullableFilter<"NestedDetail"> | string | null
    visible?: BoolFilter<"NestedDetail"> | boolean
    detailId?: UuidFilter<"NestedDetail"> | string
    projectId?: UuidNullableFilter<"NestedDetail"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    detail?: XOR<DetailRelationFilter, DetailWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    skills?: SkillListRelationFilter
  }

  export type NestedDetailOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    visible?: SortOrder
    detailId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    detail?: DetailOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
  }

  export type NestedDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    label_detailId?: NestedDetailLabelDetailIdCompoundUniqueInput
    AND?: NestedDetailWhereInput | NestedDetailWhereInput[]
    OR?: NestedDetailWhereInput[]
    NOT?: NestedDetailWhereInput | NestedDetailWhereInput[]
    createdAt?: DateTimeFilter<"NestedDetail"> | Date | string
    createdById?: UuidFilter<"NestedDetail"> | string
    updatedAt?: DateTimeFilter<"NestedDetail"> | Date | string
    updatedById?: UuidFilter<"NestedDetail"> | string
    label?: StringFilter<"NestedDetail"> | string
    description?: StringNullableFilter<"NestedDetail"> | string | null
    shortDescription?: StringNullableFilter<"NestedDetail"> | string | null
    visible?: BoolFilter<"NestedDetail"> | boolean
    detailId?: UuidFilter<"NestedDetail"> | string
    projectId?: UuidNullableFilter<"NestedDetail"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    detail?: XOR<DetailRelationFilter, DetailWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    skills?: SkillListRelationFilter
  }, "id" | "label_detailId">

  export type NestedDetailOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    visible?: SortOrder
    detailId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: NestedDetailCountOrderByAggregateInput
    _max?: NestedDetailMaxOrderByAggregateInput
    _min?: NestedDetailMinOrderByAggregateInput
  }

  export type NestedDetailScalarWhereWithAggregatesInput = {
    AND?: NestedDetailScalarWhereWithAggregatesInput | NestedDetailScalarWhereWithAggregatesInput[]
    OR?: NestedDetailScalarWhereWithAggregatesInput[]
    NOT?: NestedDetailScalarWhereWithAggregatesInput | NestedDetailScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"NestedDetail"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NestedDetail"> | Date | string
    createdById?: UuidWithAggregatesFilter<"NestedDetail"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"NestedDetail"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"NestedDetail"> | string
    label?: StringWithAggregatesFilter<"NestedDetail"> | string
    description?: StringNullableWithAggregatesFilter<"NestedDetail"> | string | null
    shortDescription?: StringNullableWithAggregatesFilter<"NestedDetail"> | string | null
    visible?: BoolWithAggregatesFilter<"NestedDetail"> | boolean
    detailId?: UuidWithAggregatesFilter<"NestedDetail"> | string
    projectId?: UuidNullableWithAggregatesFilter<"NestedDetail"> | string | null
  }

  export type DetailWhereInput = {
    AND?: DetailWhereInput | DetailWhereInput[]
    OR?: DetailWhereInput[]
    NOT?: DetailWhereInput | DetailWhereInput[]
    id?: UuidFilter<"Detail"> | string
    createdAt?: DateTimeFilter<"Detail"> | Date | string
    createdById?: UuidFilter<"Detail"> | string
    updatedAt?: DateTimeFilter<"Detail"> | Date | string
    updatedById?: UuidFilter<"Detail"> | string
    entityId?: UuidFilter<"Detail"> | string
    entityType?: EnumDetailEntityTypeFilter<"Detail"> | $Enums.DetailEntityType
    label?: StringFilter<"Detail"> | string
    description?: StringNullableFilter<"Detail"> | string | null
    shortDescription?: StringNullableFilter<"Detail"> | string | null
    visible?: BoolFilter<"Detail"> | boolean
    projectId?: UuidNullableFilter<"Detail"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    nestedDetails?: NestedDetailListRelationFilter
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    skills?: SkillListRelationFilter
  }

  export type DetailOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    visible?: SortOrder
    projectId?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    nestedDetails?: NestedDetailOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
  }

  export type DetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    label_entityId_entityType?: DetailLabelEntityIdEntityTypeCompoundUniqueInput
    AND?: DetailWhereInput | DetailWhereInput[]
    OR?: DetailWhereInput[]
    NOT?: DetailWhereInput | DetailWhereInput[]
    createdAt?: DateTimeFilter<"Detail"> | Date | string
    createdById?: UuidFilter<"Detail"> | string
    updatedAt?: DateTimeFilter<"Detail"> | Date | string
    updatedById?: UuidFilter<"Detail"> | string
    entityId?: UuidFilter<"Detail"> | string
    entityType?: EnumDetailEntityTypeFilter<"Detail"> | $Enums.DetailEntityType
    label?: StringFilter<"Detail"> | string
    description?: StringNullableFilter<"Detail"> | string | null
    shortDescription?: StringNullableFilter<"Detail"> | string | null
    visible?: BoolFilter<"Detail"> | boolean
    projectId?: UuidNullableFilter<"Detail"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    nestedDetails?: NestedDetailListRelationFilter
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    skills?: SkillListRelationFilter
  }, "id" | "label_entityId_entityType">

  export type DetailOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    shortDescription?: SortOrderInput | SortOrder
    visible?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: DetailCountOrderByAggregateInput
    _max?: DetailMaxOrderByAggregateInput
    _min?: DetailMinOrderByAggregateInput
  }

  export type DetailScalarWhereWithAggregatesInput = {
    AND?: DetailScalarWhereWithAggregatesInput | DetailScalarWhereWithAggregatesInput[]
    OR?: DetailScalarWhereWithAggregatesInput[]
    NOT?: DetailScalarWhereWithAggregatesInput | DetailScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Detail"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Detail"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Detail"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Detail"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Detail"> | string
    entityId?: UuidWithAggregatesFilter<"Detail"> | string
    entityType?: EnumDetailEntityTypeWithAggregatesFilter<"Detail"> | $Enums.DetailEntityType
    label?: StringWithAggregatesFilter<"Detail"> | string
    description?: StringNullableWithAggregatesFilter<"Detail"> | string | null
    shortDescription?: StringNullableWithAggregatesFilter<"Detail"> | string | null
    visible?: BoolWithAggregatesFilter<"Detail"> | boolean
    projectId?: UuidNullableWithAggregatesFilter<"Detail"> | string | null
  }

  export type ResumeWhereInput = {
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    id?: UuidFilter<"Resume"> | string
    createdAt?: DateTimeFilter<"Resume"> | Date | string
    createdById?: UuidFilter<"Resume"> | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedById?: UuidFilter<"Resume"> | string
    primary?: BoolFilter<"Resume"> | boolean
    downloadUrl?: StringFilter<"Resume"> | string
    url?: StringFilter<"Resume"> | string
    pathname?: StringFilter<"Resume"> | string
    filename?: StringFilter<"Resume"> | string
    size?: BigIntFilter<"Resume"> | bigint | number
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ResumeOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    primary?: SortOrder
    downloadUrl?: SortOrder
    url?: SortOrder
    pathname?: SortOrder
    filename?: SortOrder
    size?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type ResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    createdAt?: DateTimeFilter<"Resume"> | Date | string
    createdById?: UuidFilter<"Resume"> | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedById?: UuidFilter<"Resume"> | string
    primary?: BoolFilter<"Resume"> | boolean
    downloadUrl?: StringFilter<"Resume"> | string
    url?: StringFilter<"Resume"> | string
    pathname?: StringFilter<"Resume"> | string
    filename?: StringFilter<"Resume"> | string
    size?: BigIntFilter<"Resume"> | bigint | number
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ResumeOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    primary?: SortOrder
    downloadUrl?: SortOrder
    url?: SortOrder
    pathname?: SortOrder
    filename?: SortOrder
    size?: SortOrder
    _count?: ResumeCountOrderByAggregateInput
    _avg?: ResumeAvgOrderByAggregateInput
    _max?: ResumeMaxOrderByAggregateInput
    _min?: ResumeMinOrderByAggregateInput
    _sum?: ResumeSumOrderByAggregateInput
  }

  export type ResumeScalarWhereWithAggregatesInput = {
    AND?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    OR?: ResumeScalarWhereWithAggregatesInput[]
    NOT?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Resume"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Resume"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Resume"> | string
    primary?: BoolWithAggregatesFilter<"Resume"> | boolean
    downloadUrl?: StringWithAggregatesFilter<"Resume"> | string
    url?: StringWithAggregatesFilter<"Resume"> | string
    pathname?: StringWithAggregatesFilter<"Resume"> | string
    filename?: StringWithAggregatesFilter<"Resume"> | string
    size?: BigIntWithAggregatesFilter<"Resume"> | bigint | number
  }

  export type RepositoryWhereInput = {
    AND?: RepositoryWhereInput | RepositoryWhereInput[]
    OR?: RepositoryWhereInput[]
    NOT?: RepositoryWhereInput | RepositoryWhereInput[]
    id?: UuidFilter<"Repository"> | string
    slug?: StringFilter<"Repository"> | string
    description?: StringNullableFilter<"Repository"> | string | null
    createdAt?: DateTimeFilter<"Repository"> | Date | string
    createdById?: UuidFilter<"Repository"> | string
    updatedAt?: DateTimeFilter<"Repository"> | Date | string
    updatedById?: UuidFilter<"Repository"> | string
    visible?: BoolFilter<"Repository"> | boolean
    highlighted?: BoolFilter<"Repository"> | boolean
    startDate?: DateTimeFilter<"Repository"> | Date | string
    npmPackageName?: StringNullableFilter<"Repository"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    projects?: ProjectListRelationFilter
  }

  export type RepositoryOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    startDate?: SortOrder
    npmPackageName?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
  }

  export type RepositoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    npmPackageName?: string
    AND?: RepositoryWhereInput | RepositoryWhereInput[]
    OR?: RepositoryWhereInput[]
    NOT?: RepositoryWhereInput | RepositoryWhereInput[]
    description?: StringNullableFilter<"Repository"> | string | null
    createdAt?: DateTimeFilter<"Repository"> | Date | string
    createdById?: UuidFilter<"Repository"> | string
    updatedAt?: DateTimeFilter<"Repository"> | Date | string
    updatedById?: UuidFilter<"Repository"> | string
    visible?: BoolFilter<"Repository"> | boolean
    highlighted?: BoolFilter<"Repository"> | boolean
    startDate?: DateTimeFilter<"Repository"> | Date | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    projects?: ProjectListRelationFilter
  }, "id" | "slug" | "npmPackageName">

  export type RepositoryOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    startDate?: SortOrder
    npmPackageName?: SortOrderInput | SortOrder
    _count?: RepositoryCountOrderByAggregateInput
    _max?: RepositoryMaxOrderByAggregateInput
    _min?: RepositoryMinOrderByAggregateInput
  }

  export type RepositoryScalarWhereWithAggregatesInput = {
    AND?: RepositoryScalarWhereWithAggregatesInput | RepositoryScalarWhereWithAggregatesInput[]
    OR?: RepositoryScalarWhereWithAggregatesInput[]
    NOT?: RepositoryScalarWhereWithAggregatesInput | RepositoryScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Repository"> | string
    slug?: StringWithAggregatesFilter<"Repository"> | string
    description?: StringNullableWithAggregatesFilter<"Repository"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Repository"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Repository"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Repository"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Repository"> | string
    visible?: BoolWithAggregatesFilter<"Repository"> | boolean
    highlighted?: BoolWithAggregatesFilter<"Repository"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"Repository"> | Date | string
    npmPackageName?: StringNullableWithAggregatesFilter<"Repository"> | string | null
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: UuidFilter<"Skill"> | string
    label?: StringFilter<"Skill"> | string
    slug?: StringFilter<"Skill"> | string
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    createdById?: UuidFilter<"Skill"> | string
    updatedAt?: DateTimeFilter<"Skill"> | Date | string
    updatedById?: UuidFilter<"Skill"> | string
    visible?: BoolFilter<"Skill"> | boolean
    description?: StringNullableFilter<"Skill"> | string | null
    categories?: EnumSkillCategoryNullableListFilter<"Skill">
    programmingLanguages?: EnumProgrammingLanguageNullableListFilter<"Skill">
    programmingDomains?: EnumProgrammingDomainNullableListFilter<"Skill">
    experience?: IntNullableFilter<"Skill"> | number | null
    calculatedExperience?: IntFilter<"Skill"> | number
    includeInTopSkills?: BoolFilter<"Skill"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    experiences?: ExperienceListRelationFilter
    educations?: EducationListRelationFilter
    courses?: CourseListRelationFilter
    projects?: ProjectListRelationFilter
    details?: DetailListRelationFilter
    nestedDetails?: NestedDetailListRelationFilter
    repositories?: RepositoryListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    description?: SortOrderInput | SortOrder
    categories?: SortOrder
    programmingLanguages?: SortOrder
    programmingDomains?: SortOrder
    experience?: SortOrderInput | SortOrder
    calculatedExperience?: SortOrder
    includeInTopSkills?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    experiences?: ExperienceOrderByRelationAggregateInput
    educations?: EducationOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
    projects?: ProjectOrderByRelationAggregateInput
    details?: DetailOrderByRelationAggregateInput
    nestedDetails?: NestedDetailOrderByRelationAggregateInput
    repositories?: RepositoryOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    label?: string
    slug?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    createdById?: UuidFilter<"Skill"> | string
    updatedAt?: DateTimeFilter<"Skill"> | Date | string
    updatedById?: UuidFilter<"Skill"> | string
    visible?: BoolFilter<"Skill"> | boolean
    description?: StringNullableFilter<"Skill"> | string | null
    categories?: EnumSkillCategoryNullableListFilter<"Skill">
    programmingLanguages?: EnumProgrammingLanguageNullableListFilter<"Skill">
    programmingDomains?: EnumProgrammingDomainNullableListFilter<"Skill">
    experience?: IntNullableFilter<"Skill"> | number | null
    calculatedExperience?: IntFilter<"Skill"> | number
    includeInTopSkills?: BoolFilter<"Skill"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    experiences?: ExperienceListRelationFilter
    educations?: EducationListRelationFilter
    courses?: CourseListRelationFilter
    projects?: ProjectListRelationFilter
    details?: DetailListRelationFilter
    nestedDetails?: NestedDetailListRelationFilter
    repositories?: RepositoryListRelationFilter
  }, "id" | "label" | "slug">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    description?: SortOrderInput | SortOrder
    categories?: SortOrder
    programmingLanguages?: SortOrder
    programmingDomains?: SortOrder
    experience?: SortOrderInput | SortOrder
    calculatedExperience?: SortOrder
    includeInTopSkills?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Skill"> | string
    label?: StringWithAggregatesFilter<"Skill"> | string
    slug?: StringWithAggregatesFilter<"Skill"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Skill"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Skill"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Skill"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Skill"> | string
    visible?: BoolWithAggregatesFilter<"Skill"> | boolean
    description?: StringNullableWithAggregatesFilter<"Skill"> | string | null
    categories?: EnumSkillCategoryNullableListFilter<"Skill">
    programmingLanguages?: EnumProgrammingLanguageNullableListFilter<"Skill">
    programmingDomains?: EnumProgrammingDomainNullableListFilter<"Skill">
    experience?: IntNullableWithAggregatesFilter<"Skill"> | number | null
    calculatedExperience?: IntWithAggregatesFilter<"Skill"> | number
    includeInTopSkills?: BoolWithAggregatesFilter<"Skill"> | boolean
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: UuidFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    shortName?: StringNullableFilter<"Course"> | string | null
    slug?: StringFilter<"Course"> | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    createdById?: UuidFilter<"Course"> | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    updatedById?: UuidFilter<"Course"> | string
    educationId?: UuidFilter<"Course"> | string
    visible?: BoolFilter<"Course"> | boolean
    description?: StringNullableFilter<"Course"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    education?: XOR<EducationRelationFilter, EducationWhereInput>
    skills?: SkillListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    educationId?: SortOrder
    visible?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    education?: EducationOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    shortName?: string
    slug?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    createdAt?: DateTimeFilter<"Course"> | Date | string
    createdById?: UuidFilter<"Course"> | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    updatedById?: UuidFilter<"Course"> | string
    educationId?: UuidFilter<"Course"> | string
    visible?: BoolFilter<"Course"> | boolean
    description?: StringNullableFilter<"Course"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    education?: XOR<EducationRelationFilter, EducationWhereInput>
    skills?: SkillListRelationFilter
  }, "id" | "name" | "shortName" | "slug">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    educationId?: SortOrder
    visible?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Course"> | string
    name?: StringWithAggregatesFilter<"Course"> | string
    shortName?: StringNullableWithAggregatesFilter<"Course"> | string | null
    slug?: StringWithAggregatesFilter<"Course"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Course"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Course"> | string
    educationId?: UuidWithAggregatesFilter<"Course"> | string
    visible?: BoolWithAggregatesFilter<"Course"> | boolean
    description?: StringNullableWithAggregatesFilter<"Course"> | string | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: UuidFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    shortName?: StringNullableFilter<"Project"> | string | null
    description?: StringFilter<"Project"> | string
    slug?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    createdById?: UuidFilter<"Project"> | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    updatedById?: UuidFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    highlighted?: BoolFilter<"Project"> | boolean
    visible?: BoolFilter<"Project"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    details?: DetailListRelationFilter
    nestedDetails?: NestedDetailListRelationFilter
    repositories?: RepositoryListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    highlighted?: SortOrder
    visible?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
    details?: DetailOrderByRelationAggregateInput
    nestedDetails?: NestedDetailOrderByRelationAggregateInput
    repositories?: RepositoryOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    shortName?: string
    slug?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    description?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    createdById?: UuidFilter<"Project"> | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    updatedById?: UuidFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    highlighted?: BoolFilter<"Project"> | boolean
    visible?: BoolFilter<"Project"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    details?: DetailListRelationFilter
    nestedDetails?: NestedDetailListRelationFilter
    repositories?: RepositoryListRelationFilter
  }, "id" | "name" | "shortName" | "slug">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    highlighted?: SortOrder
    visible?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    shortName?: StringNullableWithAggregatesFilter<"Project"> | string | null
    description?: StringWithAggregatesFilter<"Project"> | string
    slug?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Project"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Project"> | string
    startDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    highlighted?: BoolWithAggregatesFilter<"Project"> | boolean
    visible?: BoolWithAggregatesFilter<"Project"> | boolean
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: UuidFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    createdById?: UuidFilter<"Company"> | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    updatedById?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    shortName?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    logoImageUrl?: StringNullableFilter<"Company"> | string | null
    websiteUrl?: StringNullableFilter<"Company"> | string | null
    city?: StringFilter<"Company"> | string
    state?: StringFilter<"Company"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    experiences?: ExperienceListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoImageUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    experiences?: ExperienceOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    shortName?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    createdAt?: DateTimeFilter<"Company"> | Date | string
    createdById?: UuidFilter<"Company"> | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    updatedById?: UuidFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    logoImageUrl?: StringNullableFilter<"Company"> | string | null
    websiteUrl?: StringNullableFilter<"Company"> | string | null
    city?: StringFilter<"Company"> | string
    state?: StringFilter<"Company"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    experiences?: ExperienceListRelationFilter
  }, "id" | "name" | "shortName">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoImageUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Company"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    shortName?: StringNullableWithAggregatesFilter<"Company"> | string | null
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    logoImageUrl?: StringNullableWithAggregatesFilter<"Company"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"Company"> | string | null
    city?: StringWithAggregatesFilter<"Company"> | string
    state?: StringWithAggregatesFilter<"Company"> | string
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: UuidFilter<"School"> | string
    createdAt?: DateTimeFilter<"School"> | Date | string
    createdById?: UuidFilter<"School"> | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    updatedById?: UuidFilter<"School"> | string
    name?: StringFilter<"School"> | string
    shortName?: StringNullableFilter<"School"> | string | null
    description?: StringNullableFilter<"School"> | string | null
    logoImageUrl?: StringNullableFilter<"School"> | string | null
    websiteUrl?: StringNullableFilter<"School"> | string | null
    city?: StringFilter<"School"> | string
    state?: StringFilter<"School"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    educations?: EducationListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoImageUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    educations?: EducationOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    shortName?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    createdAt?: DateTimeFilter<"School"> | Date | string
    createdById?: UuidFilter<"School"> | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    updatedById?: UuidFilter<"School"> | string
    description?: StringNullableFilter<"School"> | string | null
    logoImageUrl?: StringNullableFilter<"School"> | string | null
    websiteUrl?: StringNullableFilter<"School"> | string | null
    city?: StringFilter<"School"> | string
    state?: StringFilter<"School"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    educations?: EducationListRelationFilter
  }, "id" | "name" | "shortName">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    logoImageUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"School"> | string
    createdAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    createdById?: UuidWithAggregatesFilter<"School"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"School"> | string
    name?: StringWithAggregatesFilter<"School"> | string
    shortName?: StringNullableWithAggregatesFilter<"School"> | string | null
    description?: StringNullableWithAggregatesFilter<"School"> | string | null
    logoImageUrl?: StringNullableWithAggregatesFilter<"School"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"School"> | string | null
    city?: StringWithAggregatesFilter<"School"> | string
    state?: StringWithAggregatesFilter<"School"> | string
  }

  export type ExperienceWhereInput = {
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    id?: UuidFilter<"Experience"> | string
    createdAt?: DateTimeFilter<"Experience"> | Date | string
    createdById?: UuidFilter<"Experience"> | string
    updatedAt?: DateTimeFilter<"Experience"> | Date | string
    updatedById?: UuidFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeNullableFilter<"Experience"> | Date | string | null
    companyId?: UuidFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    shortTitle?: StringNullableFilter<"Experience"> | string | null
    description?: StringNullableFilter<"Experience"> | string | null
    isRemote?: BoolFilter<"Experience"> | boolean
    visible?: BoolFilter<"Experience"> | boolean
    highlighted?: BoolFilter<"Experience"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type ExperienceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    companyId?: SortOrder
    title?: SortOrder
    shortTitle?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isRemote?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
  }

  export type ExperienceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title_companyId?: ExperienceTitleCompanyIdCompoundUniqueInput
    AND?: ExperienceWhereInput | ExperienceWhereInput[]
    OR?: ExperienceWhereInput[]
    NOT?: ExperienceWhereInput | ExperienceWhereInput[]
    createdAt?: DateTimeFilter<"Experience"> | Date | string
    createdById?: UuidFilter<"Experience"> | string
    updatedAt?: DateTimeFilter<"Experience"> | Date | string
    updatedById?: UuidFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeNullableFilter<"Experience"> | Date | string | null
    companyId?: UuidFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    shortTitle?: StringNullableFilter<"Experience"> | string | null
    description?: StringNullableFilter<"Experience"> | string | null
    isRemote?: BoolFilter<"Experience"> | boolean
    visible?: BoolFilter<"Experience"> | boolean
    highlighted?: BoolFilter<"Experience"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "title_companyId">

  export type ExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    companyId?: SortOrder
    title?: SortOrder
    shortTitle?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isRemote?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    _count?: ExperienceCountOrderByAggregateInput
    _max?: ExperienceMaxOrderByAggregateInput
    _min?: ExperienceMinOrderByAggregateInput
  }

  export type ExperienceScalarWhereWithAggregatesInput = {
    AND?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    OR?: ExperienceScalarWhereWithAggregatesInput[]
    NOT?: ExperienceScalarWhereWithAggregatesInput | ExperienceScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Experience"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Experience"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Experience"> | string
    startDate?: DateTimeWithAggregatesFilter<"Experience"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Experience"> | Date | string | null
    companyId?: UuidWithAggregatesFilter<"Experience"> | string
    title?: StringWithAggregatesFilter<"Experience"> | string
    shortTitle?: StringNullableWithAggregatesFilter<"Experience"> | string | null
    description?: StringNullableWithAggregatesFilter<"Experience"> | string | null
    isRemote?: BoolWithAggregatesFilter<"Experience"> | boolean
    visible?: BoolWithAggregatesFilter<"Experience"> | boolean
    highlighted?: BoolWithAggregatesFilter<"Experience"> | boolean
  }

  export type EducationWhereInput = {
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    id?: UuidFilter<"Education"> | string
    createdAt?: DateTimeFilter<"Education"> | Date | string
    createdById?: UuidFilter<"Education"> | string
    updatedAt?: DateTimeFilter<"Education"> | Date | string
    updatedById?: UuidFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    note?: StringNullableFilter<"Education"> | string | null
    degree?: EnumDegreeFilter<"Education"> | $Enums.Degree
    description?: StringNullableFilter<"Education"> | string | null
    major?: StringFilter<"Education"> | string
    shortMajor?: StringNullableFilter<"Education"> | string | null
    minor?: StringNullableFilter<"Education"> | string | null
    concentration?: StringNullableFilter<"Education"> | string | null
    schoolId?: UuidFilter<"Education"> | string
    postPoned?: BoolFilter<"Education"> | boolean
    visible?: BoolFilter<"Education"> | boolean
    highlighted?: BoolFilter<"Education"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    courses?: CourseListRelationFilter
  }

  export type EducationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    degree?: SortOrder
    description?: SortOrderInput | SortOrder
    major?: SortOrder
    shortMajor?: SortOrderInput | SortOrder
    minor?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    schoolId?: SortOrder
    postPoned?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    skills?: SkillOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type EducationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    major_schoolId?: EducationMajorSchoolIdCompoundUniqueInput
    shortMajor_schoolId?: EducationShortMajorSchoolIdCompoundUniqueInput
    AND?: EducationWhereInput | EducationWhereInput[]
    OR?: EducationWhereInput[]
    NOT?: EducationWhereInput | EducationWhereInput[]
    createdAt?: DateTimeFilter<"Education"> | Date | string
    createdById?: UuidFilter<"Education"> | string
    updatedAt?: DateTimeFilter<"Education"> | Date | string
    updatedById?: UuidFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    note?: StringNullableFilter<"Education"> | string | null
    degree?: EnumDegreeFilter<"Education"> | $Enums.Degree
    description?: StringNullableFilter<"Education"> | string | null
    major?: StringFilter<"Education"> | string
    shortMajor?: StringNullableFilter<"Education"> | string | null
    minor?: StringNullableFilter<"Education"> | string | null
    concentration?: StringNullableFilter<"Education"> | string | null
    schoolId?: UuidFilter<"Education"> | string
    postPoned?: BoolFilter<"Education"> | boolean
    visible?: BoolFilter<"Education"> | boolean
    highlighted?: BoolFilter<"Education"> | boolean
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    skills?: SkillListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    courses?: CourseListRelationFilter
  }, "id" | "major_schoolId" | "shortMajor_schoolId">

  export type EducationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    degree?: SortOrder
    description?: SortOrderInput | SortOrder
    major?: SortOrder
    shortMajor?: SortOrderInput | SortOrder
    minor?: SortOrderInput | SortOrder
    concentration?: SortOrderInput | SortOrder
    schoolId?: SortOrder
    postPoned?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    _count?: EducationCountOrderByAggregateInput
    _max?: EducationMaxOrderByAggregateInput
    _min?: EducationMinOrderByAggregateInput
  }

  export type EducationScalarWhereWithAggregatesInput = {
    AND?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    OR?: EducationScalarWhereWithAggregatesInput[]
    NOT?: EducationScalarWhereWithAggregatesInput | EducationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Education"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Education"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Education"> | string
    startDate?: DateTimeWithAggregatesFilter<"Education"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Education"> | Date | string | null
    note?: StringNullableWithAggregatesFilter<"Education"> | string | null
    degree?: EnumDegreeWithAggregatesFilter<"Education"> | $Enums.Degree
    description?: StringNullableWithAggregatesFilter<"Education"> | string | null
    major?: StringWithAggregatesFilter<"Education"> | string
    shortMajor?: StringNullableWithAggregatesFilter<"Education"> | string | null
    minor?: StringNullableWithAggregatesFilter<"Education"> | string | null
    concentration?: StringNullableWithAggregatesFilter<"Education"> | string | null
    schoolId?: UuidWithAggregatesFilter<"Education"> | string
    postPoned?: BoolWithAggregatesFilter<"Education"> | boolean
    visible?: BoolWithAggregatesFilter<"Education"> | boolean
    highlighted?: BoolWithAggregatesFilter<"Education"> | boolean
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: UuidFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    createdById?: UuidFilter<"Profile"> | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    updatedById?: UuidFilter<"Profile"> | string
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    displayName?: StringFilter<"Profile"> | string
    middleName?: StringNullableFilter<"Profile"> | string | null
    profileImageUrl?: StringNullableFilter<"Profile"> | string | null
    emailAddress?: StringFilter<"Profile"> | string
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    intro?: StringFilter<"Profile"> | string
    tagline?: StringNullableFilter<"Profile"> | string | null
    githubUrl?: StringNullableFilter<"Profile"> | string | null
    linkedinUrl?: StringNullableFilter<"Profile"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    intro?: SortOrder
    tagline?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    createdById?: UuidFilter<"Profile"> | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    updatedById?: UuidFilter<"Profile"> | string
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    displayName?: StringFilter<"Profile"> | string
    middleName?: StringNullableFilter<"Profile"> | string | null
    profileImageUrl?: StringNullableFilter<"Profile"> | string | null
    emailAddress?: StringFilter<"Profile"> | string
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    intro?: StringFilter<"Profile"> | string
    tagline?: StringNullableFilter<"Profile"> | string | null
    githubUrl?: StringNullableFilter<"Profile"> | string | null
    linkedinUrl?: StringNullableFilter<"Profile"> | string | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    profileImageUrl?: SortOrderInput | SortOrder
    emailAddress?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    intro?: SortOrder
    tagline?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Profile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    createdById?: UuidWithAggregatesFilter<"Profile"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedById?: UuidWithAggregatesFilter<"Profile"> | string
    firstName?: StringWithAggregatesFilter<"Profile"> | string
    lastName?: StringWithAggregatesFilter<"Profile"> | string
    displayName?: StringWithAggregatesFilter<"Profile"> | string
    middleName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    profileImageUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    emailAddress?: StringWithAggregatesFilter<"Profile"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    intro?: StringWithAggregatesFilter<"Profile"> | string
    tagline?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    githubUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    linkedinUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NestedDetailCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedNestedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNestedDetailsInput
    detail: DetailCreateNestedOneWithoutNestedDetailsInput
    project?: ProjectCreateNestedOneWithoutNestedDetailsInput
    skills?: SkillCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput
    detail?: DetailUpdateOneRequiredWithoutNestedDetailsNestedInput
    project?: ProjectUpdateOneWithoutNestedDetailsNestedInput
    skills?: SkillUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
  }

  export type NestedDetailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NestedDetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetailCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedDetailsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutDetailInput
    project?: ProjectCreateNestedOneWithoutDetailsInput
    skills?: SkillCreateNestedManyWithoutDetailsInput
  }

  export type DetailUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutDetailInput
    skills?: SkillUncheckedCreateNestedManyWithoutDetailsInput
  }

  export type DetailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutDetailNestedInput
    project?: ProjectUpdateOneWithoutDetailsNestedInput
    skills?: SkillUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutDetailNestedInput
    skills?: SkillUncheckedUpdateManyWithoutDetailsNestedInput
  }

  export type DetailCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
  }

  export type DetailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResumeCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
    createdBy: UserCreateNestedOneWithoutCreatedResumesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedResumesInput
  }

  export type ResumeUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type ResumeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdBy?: UserUpdateOneRequiredWithoutCreatedResumesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedResumesNestedInput
  }

  export type ResumeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResumeCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type ResumeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResumeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type RepositoryCreateInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedRepositoriesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedRepositoriesInput
    skills?: SkillCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUncheckedCreateInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectUncheckedCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedRepositoriesNestedInput
    skills?: SkillUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryCreateManyInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
  }

  export type RepositoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RepositoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillCreateInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillCreateManyInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
  }

  export type SkillUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseCreateInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedCoursesInput
    education: EducationCreateNestedOneWithoutCoursesInput
    skills?: SkillCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    educationId: string
    visible?: boolean
    description?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCoursesNestedInput
    education?: EducationUpdateOneRequiredWithoutCoursesNestedInput
    skills?: SkillUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    educationId: string
    visible?: boolean
    description?: string | null
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedCompaniesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedCompaniesInput
    experiences?: ExperienceCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    experiences?: ExperienceUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCompaniesNestedInput
    experiences?: ExperienceUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    experiences?: ExperienceUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedSchoolsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSchoolsInput
    educations?: EducationCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    educations?: EducationUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSchoolsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSchoolsNestedInput
    educations?: EducationUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    educations?: EducationUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type SchoolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedExperiencesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedExperiencesInput
    skills?: SkillCreateNestedManyWithoutExperiencesInput
    company: CompanyCreateNestedOneWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutExperiencesInput
  }

  export type ExperienceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedExperiencesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedExperiencesNestedInput
    skills?: SkillUpdateManyWithoutExperiencesNestedInput
    company?: CompanyUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutExperiencesNestedInput
  }

  export type ExperienceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ExperienceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExperienceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EducationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedEducationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEducationsInput
    skills?: SkillCreateNestedManyWithoutEducationsInput
    school: SchoolCreateNestedOneWithoutEducationsInput
    courses?: CourseCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutEducationsInput
    courses?: CourseUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedEducationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput
    skills?: SkillUpdateManyWithoutEducationsNestedInput
    school?: SchoolUpdateOneRequiredWithoutEducationsNestedInput
    courses?: CourseUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutEducationsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type EducationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EducationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedProfilesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProfilesInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProfilesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProfilesNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateManyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type ExperienceListRelationFilter = {
    every?: ExperienceWhereInput
    some?: ExperienceWhereInput
    none?: ExperienceWhereInput
  }

  export type SchoolListRelationFilter = {
    every?: SchoolWhereInput
    some?: SchoolWhereInput
    none?: SchoolWhereInput
  }

  export type EducationListRelationFilter = {
    every?: EducationWhereInput
    some?: EducationWhereInput
    none?: EducationWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type DetailListRelationFilter = {
    every?: DetailWhereInput
    some?: DetailWhereInput
    none?: DetailWhereInput
  }

  export type NestedDetailListRelationFilter = {
    every?: NestedDetailWhereInput
    some?: NestedDetailWhereInput
    none?: NestedDetailWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type RepositoryListRelationFilter = {
    every?: RepositoryWhereInput
    some?: RepositoryWhereInput
    none?: RepositoryWhereInput
  }

  export type ResumeListRelationFilter = {
    every?: ResumeWhereInput
    some?: ResumeWhereInput
    none?: ResumeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EducationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NestedDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepositoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DetailRelationFilter = {
    is?: DetailWhereInput
    isNot?: DetailWhereInput
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type NestedDetailLabelDetailIdCompoundUniqueInput = {
    label: string
    detailId: string
  }

  export type NestedDetailCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    detailId?: SortOrder
    projectId?: SortOrder
  }

  export type NestedDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    detailId?: SortOrder
    projectId?: SortOrder
  }

  export type NestedDetailMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    detailId?: SortOrder
    projectId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumDetailEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DetailEntityType | EnumDetailEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDetailEntityTypeFilter<$PrismaModel> | $Enums.DetailEntityType
  }

  export type DetailLabelEntityIdEntityTypeCompoundUniqueInput = {
    label: string
    entityId: string
    entityType: $Enums.DetailEntityType
  }

  export type DetailCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    projectId?: SortOrder
  }

  export type DetailMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    projectId?: SortOrder
  }

  export type DetailMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    label?: SortOrder
    description?: SortOrder
    shortDescription?: SortOrder
    visible?: SortOrder
    projectId?: SortOrder
  }

  export type EnumDetailEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DetailEntityType | EnumDetailEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDetailEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.DetailEntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDetailEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumDetailEntityTypeFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type ResumeCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    primary?: SortOrder
    downloadUrl?: SortOrder
    url?: SortOrder
    pathname?: SortOrder
    filename?: SortOrder
    size?: SortOrder
  }

  export type ResumeAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type ResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    primary?: SortOrder
    downloadUrl?: SortOrder
    url?: SortOrder
    pathname?: SortOrder
    filename?: SortOrder
    size?: SortOrder
  }

  export type ResumeMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    primary?: SortOrder
    downloadUrl?: SortOrder
    url?: SortOrder
    pathname?: SortOrder
    filename?: SortOrder
    size?: SortOrder
  }

  export type ResumeSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type RepositoryCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    startDate?: SortOrder
    npmPackageName?: SortOrder
  }

  export type RepositoryMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    startDate?: SortOrder
    npmPackageName?: SortOrder
  }

  export type RepositoryMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
    startDate?: SortOrder
    npmPackageName?: SortOrder
  }

  export type EnumSkillCategoryNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillCategory[] | ListEnumSkillCategoryFieldRefInput<$PrismaModel> | null
    has?: $Enums.SkillCategory | EnumSkillCategoryFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.SkillCategory[] | ListEnumSkillCategoryFieldRefInput<$PrismaModel>
    hasSome?: $Enums.SkillCategory[] | ListEnumSkillCategoryFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumProgrammingLanguageNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgrammingLanguage[] | ListEnumProgrammingLanguageFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProgrammingLanguage | EnumProgrammingLanguageFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProgrammingLanguage[] | ListEnumProgrammingLanguageFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProgrammingLanguage[] | ListEnumProgrammingLanguageFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumProgrammingDomainNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.ProgrammingDomain[] | ListEnumProgrammingDomainFieldRefInput<$PrismaModel> | null
    has?: $Enums.ProgrammingDomain | EnumProgrammingDomainFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.ProgrammingDomain[] | ListEnumProgrammingDomainFieldRefInput<$PrismaModel>
    hasSome?: $Enums.ProgrammingDomain[] | ListEnumProgrammingDomainFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    description?: SortOrder
    categories?: SortOrder
    programmingLanguages?: SortOrder
    programmingDomains?: SortOrder
    experience?: SortOrder
    calculatedExperience?: SortOrder
    includeInTopSkills?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    experience?: SortOrder
    calculatedExperience?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    description?: SortOrder
    experience?: SortOrder
    calculatedExperience?: SortOrder
    includeInTopSkills?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    visible?: SortOrder
    description?: SortOrder
    experience?: SortOrder
    calculatedExperience?: SortOrder
    includeInTopSkills?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    experience?: SortOrder
    calculatedExperience?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EducationRelationFilter = {
    is?: EducationWhereInput
    isNot?: EducationWhereInput
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    educationId?: SortOrder
    visible?: SortOrder
    description?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    educationId?: SortOrder
    visible?: SortOrder
    description?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    educationId?: SortOrder
    visible?: SortOrder
    description?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    highlighted?: SortOrder
    visible?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    highlighted?: SortOrder
    visible?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    highlighted?: SortOrder
    visible?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    name?: SortOrder
    shortName?: SortOrder
    description?: SortOrder
    logoImageUrl?: SortOrder
    websiteUrl?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type ExperienceTitleCompanyIdCompoundUniqueInput = {
    title: string
    companyId: string
  }

  export type ExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    shortTitle?: SortOrder
    description?: SortOrder
    isRemote?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type ExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    shortTitle?: SortOrder
    description?: SortOrder
    isRemote?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type ExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    shortTitle?: SortOrder
    description?: SortOrder
    isRemote?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumDegreeFilter<$PrismaModel = never> = {
    equals?: $Enums.Degree | EnumDegreeFieldRefInput<$PrismaModel>
    in?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    not?: NestedEnumDegreeFilter<$PrismaModel> | $Enums.Degree
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type EducationMajorSchoolIdCompoundUniqueInput = {
    major: string
    schoolId: string
  }

  export type EducationShortMajorSchoolIdCompoundUniqueInput = {
    shortMajor: string
    schoolId: string
  }

  export type EducationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    note?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    major?: SortOrder
    shortMajor?: SortOrder
    minor?: SortOrder
    concentration?: SortOrder
    schoolId?: SortOrder
    postPoned?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type EducationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    note?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    major?: SortOrder
    shortMajor?: SortOrder
    minor?: SortOrder
    concentration?: SortOrder
    schoolId?: SortOrder
    postPoned?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type EducationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    note?: SortOrder
    degree?: SortOrder
    description?: SortOrder
    major?: SortOrder
    shortMajor?: SortOrder
    minor?: SortOrder
    concentration?: SortOrder
    schoolId?: SortOrder
    postPoned?: SortOrder
    visible?: SortOrder
    highlighted?: SortOrder
  }

  export type EnumDegreeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Degree | EnumDegreeFieldRefInput<$PrismaModel>
    in?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    not?: NestedEnumDegreeWithAggregatesFilter<$PrismaModel> | $Enums.Degree
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDegreeFilter<$PrismaModel>
    _max?: NestedEnumDegreeFilter<$PrismaModel>
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    middleName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    phoneNumber?: SortOrder
    intro?: SortOrder
    tagline?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    middleName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    phoneNumber?: SortOrder
    intro?: SortOrder
    tagline?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    middleName?: SortOrder
    profileImageUrl?: SortOrder
    emailAddress?: SortOrder
    phoneNumber?: SortOrder
    intro?: SortOrder
    tagline?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
  }

  export type SkillCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput> | SkillCreateWithoutUpdatedByInput[] | SkillUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUpdatedByInput | SkillCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SkillCreateManyUpdatedByInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type SkillCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput> | SkillCreateWithoutCreatedByInput[] | SkillUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCreatedByInput | SkillCreateOrConnectWithoutCreatedByInput[]
    createMany?: SkillCreateManyCreatedByInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput> | CompanyCreateWithoutUpdatedByInput[] | CompanyUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutUpdatedByInput | CompanyCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CompanyCreateManyUpdatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ExperienceCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput> | ExperienceCreateWithoutUpdatedByInput[] | ExperienceUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutUpdatedByInput | ExperienceCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ExperienceCreateManyUpdatedByInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type ExperienceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput> | ExperienceCreateWithoutCreatedByInput[] | ExperienceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCreatedByInput | ExperienceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ExperienceCreateManyCreatedByInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type SchoolCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput> | SchoolCreateWithoutUpdatedByInput[] | SchoolUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUpdatedByInput | SchoolCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SchoolCreateManyUpdatedByInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SchoolCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput> | SchoolCreateWithoutCreatedByInput[] | SchoolUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCreatedByInput | SchoolCreateOrConnectWithoutCreatedByInput[]
    createMany?: SchoolCreateManyCreatedByInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type EducationCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput> | EducationCreateWithoutUpdatedByInput[] | EducationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutUpdatedByInput | EducationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: EducationCreateManyUpdatedByInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type EducationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput> | EducationCreateWithoutCreatedByInput[] | EducationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCreatedByInput | EducationCreateOrConnectWithoutCreatedByInput[]
    createMany?: EducationCreateManyCreatedByInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type DetailCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput> | DetailCreateWithoutUpdatedByInput[] | DetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutUpdatedByInput | DetailCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DetailCreateManyUpdatedByInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type DetailCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput> | DetailCreateWithoutCreatedByInput[] | DetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutCreatedByInput | DetailCreateOrConnectWithoutCreatedByInput[]
    createMany?: DetailCreateManyCreatedByInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput> | NestedDetailCreateWithoutUpdatedByInput[] | NestedDetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutUpdatedByInput | NestedDetailCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NestedDetailCreateManyUpdatedByInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type NestedDetailCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput> | NestedDetailCreateWithoutCreatedByInput[] | NestedDetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutCreatedByInput | NestedDetailCreateOrConnectWithoutCreatedByInput[]
    createMany?: NestedDetailCreateManyCreatedByInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput> | CourseCreateWithoutUpdatedByInput[] | CourseUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByInput | CourseCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CourseCreateManyUpdatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput> | ProjectCreateWithoutUpdatedByInput[] | ProjectUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUpdatedByInput | ProjectCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProjectCreateManyUpdatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RepositoryCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput> | RepositoryCreateWithoutUpdatedByInput[] | RepositoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutUpdatedByInput | RepositoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: RepositoryCreateManyUpdatedByInputEnvelope
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type RepositoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput> | RepositoryCreateWithoutCreatedByInput[] | RepositoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutCreatedByInput | RepositoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: RepositoryCreateManyCreatedByInputEnvelope
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type ResumeCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput> | ResumeCreateWithoutUpdatedByInput[] | ResumeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUpdatedByInput | ResumeCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ResumeCreateManyUpdatedByInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type ResumeCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput> | ResumeCreateWithoutCreatedByInput[] | ResumeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutCreatedByInput | ResumeCreateOrConnectWithoutCreatedByInput[]
    createMany?: ResumeCreateManyCreatedByInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput> | SkillCreateWithoutUpdatedByInput[] | SkillUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUpdatedByInput | SkillCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SkillCreateManyUpdatedByInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput> | SkillCreateWithoutCreatedByInput[] | SkillUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCreatedByInput | SkillCreateOrConnectWithoutCreatedByInput[]
    createMany?: SkillCreateManyCreatedByInputEnvelope
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput> | CompanyCreateWithoutUpdatedByInput[] | CompanyUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutUpdatedByInput | CompanyCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CompanyCreateManyUpdatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput> | ExperienceCreateWithoutUpdatedByInput[] | ExperienceUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutUpdatedByInput | ExperienceCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ExperienceCreateManyUpdatedByInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput> | ExperienceCreateWithoutCreatedByInput[] | ExperienceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCreatedByInput | ExperienceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ExperienceCreateManyCreatedByInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type SchoolUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput> | SchoolCreateWithoutUpdatedByInput[] | SchoolUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUpdatedByInput | SchoolCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SchoolCreateManyUpdatedByInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SchoolUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput> | SchoolCreateWithoutCreatedByInput[] | SchoolUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCreatedByInput | SchoolCreateOrConnectWithoutCreatedByInput[]
    createMany?: SchoolCreateManyCreatedByInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput> | EducationCreateWithoutUpdatedByInput[] | EducationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutUpdatedByInput | EducationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: EducationCreateManyUpdatedByInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput> | EducationCreateWithoutCreatedByInput[] | EducationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCreatedByInput | EducationCreateOrConnectWithoutCreatedByInput[]
    createMany?: EducationCreateManyCreatedByInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type DetailUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput> | DetailCreateWithoutUpdatedByInput[] | DetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutUpdatedByInput | DetailCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DetailCreateManyUpdatedByInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type DetailUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput> | DetailCreateWithoutCreatedByInput[] | DetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutCreatedByInput | DetailCreateOrConnectWithoutCreatedByInput[]
    createMany?: DetailCreateManyCreatedByInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput> | NestedDetailCreateWithoutUpdatedByInput[] | NestedDetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutUpdatedByInput | NestedDetailCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NestedDetailCreateManyUpdatedByInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput> | NestedDetailCreateWithoutCreatedByInput[] | NestedDetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutCreatedByInput | NestedDetailCreateOrConnectWithoutCreatedByInput[]
    createMany?: NestedDetailCreateManyCreatedByInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput> | CourseCreateWithoutUpdatedByInput[] | CourseUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByInput | CourseCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CourseCreateManyUpdatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput> | ProjectCreateWithoutUpdatedByInput[] | ProjectUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUpdatedByInput | ProjectCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProjectCreateManyUpdatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput> | RepositoryCreateWithoutUpdatedByInput[] | RepositoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutUpdatedByInput | RepositoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: RepositoryCreateManyUpdatedByInputEnvelope
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type RepositoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput> | RepositoryCreateWithoutCreatedByInput[] | RepositoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutCreatedByInput | RepositoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: RepositoryCreateManyCreatedByInputEnvelope
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type ResumeUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput> | ResumeCreateWithoutUpdatedByInput[] | ResumeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUpdatedByInput | ResumeCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ResumeCreateManyUpdatedByInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type ResumeUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput> | ResumeCreateWithoutCreatedByInput[] | ResumeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutCreatedByInput | ResumeCreateOrConnectWithoutCreatedByInput[]
    createMany?: ResumeCreateManyCreatedByInputEnvelope
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SkillUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput> | SkillCreateWithoutUpdatedByInput[] | SkillUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUpdatedByInput | SkillCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUpdatedByInput | SkillUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SkillCreateManyUpdatedByInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUpdatedByInput | SkillUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUpdatedByInput | SkillUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type SkillUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput> | SkillCreateWithoutCreatedByInput[] | SkillUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCreatedByInput | SkillCreateOrConnectWithoutCreatedByInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutCreatedByInput | SkillUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SkillCreateManyCreatedByInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutCreatedByInput | SkillUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutCreatedByInput | SkillUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput> | CompanyCreateWithoutUpdatedByInput[] | CompanyUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutUpdatedByInput | CompanyCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutUpdatedByInput | CompanyUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CompanyCreateManyUpdatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutUpdatedByInput | CompanyUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutUpdatedByInput | CompanyUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByInput | CompanyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByInput | CompanyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByInput | CompanyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ExperienceUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput> | ExperienceCreateWithoutUpdatedByInput[] | ExperienceUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutUpdatedByInput | ExperienceCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutUpdatedByInput | ExperienceUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ExperienceCreateManyUpdatedByInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutUpdatedByInput | ExperienceUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutUpdatedByInput | ExperienceUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type ExperienceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput> | ExperienceCreateWithoutCreatedByInput[] | ExperienceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCreatedByInput | ExperienceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCreatedByInput | ExperienceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ExperienceCreateManyCreatedByInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCreatedByInput | ExperienceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCreatedByInput | ExperienceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type SchoolUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput> | SchoolCreateWithoutUpdatedByInput[] | SchoolUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUpdatedByInput | SchoolCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutUpdatedByInput | SchoolUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SchoolCreateManyUpdatedByInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutUpdatedByInput | SchoolUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutUpdatedByInput | SchoolUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SchoolUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput> | SchoolCreateWithoutCreatedByInput[] | SchoolUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCreatedByInput | SchoolCreateOrConnectWithoutCreatedByInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutCreatedByInput | SchoolUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SchoolCreateManyCreatedByInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutCreatedByInput | SchoolUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutCreatedByInput | SchoolUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type EducationUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput> | EducationCreateWithoutUpdatedByInput[] | EducationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutUpdatedByInput | EducationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutUpdatedByInput | EducationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: EducationCreateManyUpdatedByInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutUpdatedByInput | EducationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutUpdatedByInput | EducationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type EducationUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput> | EducationCreateWithoutCreatedByInput[] | EducationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCreatedByInput | EducationCreateOrConnectWithoutCreatedByInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutCreatedByInput | EducationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EducationCreateManyCreatedByInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutCreatedByInput | EducationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutCreatedByInput | EducationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUpdatedByInput | ProfileUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUpdatedByInput | ProfileUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUpdatedByInput | ProfileUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCreatedByInput | ProfileUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCreatedByInput | ProfileUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCreatedByInput | ProfileUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type DetailUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput> | DetailCreateWithoutUpdatedByInput[] | DetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutUpdatedByInput | DetailCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutUpdatedByInput | DetailUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DetailCreateManyUpdatedByInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutUpdatedByInput | DetailUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutUpdatedByInput | DetailUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type DetailUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput> | DetailCreateWithoutCreatedByInput[] | DetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutCreatedByInput | DetailCreateOrConnectWithoutCreatedByInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutCreatedByInput | DetailUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DetailCreateManyCreatedByInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutCreatedByInput | DetailUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutCreatedByInput | DetailUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput> | NestedDetailCreateWithoutUpdatedByInput[] | NestedDetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutUpdatedByInput | NestedDetailCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutUpdatedByInput | NestedDetailUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NestedDetailCreateManyUpdatedByInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutUpdatedByInput | NestedDetailUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutUpdatedByInput | NestedDetailUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type NestedDetailUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput> | NestedDetailCreateWithoutCreatedByInput[] | NestedDetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutCreatedByInput | NestedDetailCreateOrConnectWithoutCreatedByInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutCreatedByInput | NestedDetailUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NestedDetailCreateManyCreatedByInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutCreatedByInput | NestedDetailUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutCreatedByInput | NestedDetailUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput> | CourseCreateWithoutUpdatedByInput[] | CourseUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByInput | CourseCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutUpdatedByInput | CourseUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CourseCreateManyUpdatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutUpdatedByInput | CourseUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutUpdatedByInput | CourseUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByInput | CourseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByInput | CourseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByInput | CourseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput> | ProjectCreateWithoutUpdatedByInput[] | ProjectUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUpdatedByInput | ProjectCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUpdatedByInput | ProjectUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProjectCreateManyUpdatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUpdatedByInput | ProjectUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUpdatedByInput | ProjectUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByInput | ProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByInput | ProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByInput | ProjectUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RepositoryUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput> | RepositoryCreateWithoutUpdatedByInput[] | RepositoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutUpdatedByInput | RepositoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutUpdatedByInput | RepositoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: RepositoryCreateManyUpdatedByInputEnvelope
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutUpdatedByInput | RepositoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutUpdatedByInput | RepositoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type RepositoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput> | RepositoryCreateWithoutCreatedByInput[] | RepositoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutCreatedByInput | RepositoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutCreatedByInput | RepositoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RepositoryCreateManyCreatedByInputEnvelope
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutCreatedByInput | RepositoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutCreatedByInput | RepositoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type ResumeUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput> | ResumeCreateWithoutUpdatedByInput[] | ResumeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUpdatedByInput | ResumeCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutUpdatedByInput | ResumeUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ResumeCreateManyUpdatedByInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutUpdatedByInput | ResumeUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutUpdatedByInput | ResumeUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type ResumeUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput> | ResumeCreateWithoutCreatedByInput[] | ResumeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutCreatedByInput | ResumeCreateOrConnectWithoutCreatedByInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutCreatedByInput | ResumeUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ResumeCreateManyCreatedByInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutCreatedByInput | ResumeUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutCreatedByInput | ResumeUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput> | SkillCreateWithoutUpdatedByInput[] | SkillUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutUpdatedByInput | SkillCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutUpdatedByInput | SkillUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SkillCreateManyUpdatedByInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutUpdatedByInput | SkillUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutUpdatedByInput | SkillUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput> | SkillCreateWithoutCreatedByInput[] | SkillUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCreatedByInput | SkillCreateOrConnectWithoutCreatedByInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutCreatedByInput | SkillUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SkillCreateManyCreatedByInputEnvelope
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutCreatedByInput | SkillUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutCreatedByInput | SkillUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput> | CompanyCreateWithoutUpdatedByInput[] | CompanyUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutUpdatedByInput | CompanyCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutUpdatedByInput | CompanyUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CompanyCreateManyUpdatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutUpdatedByInput | CompanyUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutUpdatedByInput | CompanyUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput> | CompanyCreateWithoutCreatedByInput[] | CompanyUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutCreatedByInput | CompanyCreateOrConnectWithoutCreatedByInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutCreatedByInput | CompanyUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CompanyCreateManyCreatedByInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutCreatedByInput | CompanyUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutCreatedByInput | CompanyUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput> | ExperienceCreateWithoutUpdatedByInput[] | ExperienceUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutUpdatedByInput | ExperienceCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutUpdatedByInput | ExperienceUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ExperienceCreateManyUpdatedByInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutUpdatedByInput | ExperienceUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutUpdatedByInput | ExperienceUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput> | ExperienceCreateWithoutCreatedByInput[] | ExperienceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCreatedByInput | ExperienceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCreatedByInput | ExperienceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ExperienceCreateManyCreatedByInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCreatedByInput | ExperienceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCreatedByInput | ExperienceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput> | SchoolCreateWithoutUpdatedByInput[] | SchoolUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUpdatedByInput | SchoolCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutUpdatedByInput | SchoolUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SchoolCreateManyUpdatedByInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutUpdatedByInput | SchoolUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutUpdatedByInput | SchoolUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SchoolUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput> | SchoolCreateWithoutCreatedByInput[] | SchoolUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutCreatedByInput | SchoolCreateOrConnectWithoutCreatedByInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutCreatedByInput | SchoolUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SchoolCreateManyCreatedByInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutCreatedByInput | SchoolUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutCreatedByInput | SchoolUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput> | EducationCreateWithoutUpdatedByInput[] | EducationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutUpdatedByInput | EducationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutUpdatedByInput | EducationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: EducationCreateManyUpdatedByInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutUpdatedByInput | EducationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutUpdatedByInput | EducationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput> | EducationCreateWithoutCreatedByInput[] | EducationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutCreatedByInput | EducationCreateOrConnectWithoutCreatedByInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutCreatedByInput | EducationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EducationCreateManyCreatedByInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutCreatedByInput | EducationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutCreatedByInput | EducationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUpdatedByInput | ProfileUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUpdatedByInput | ProfileUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUpdatedByInput | ProfileUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCreatedByInput | ProfileUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCreatedByInput | ProfileUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCreatedByInput | ProfileUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type DetailUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput> | DetailCreateWithoutUpdatedByInput[] | DetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutUpdatedByInput | DetailCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutUpdatedByInput | DetailUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DetailCreateManyUpdatedByInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutUpdatedByInput | DetailUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutUpdatedByInput | DetailUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type DetailUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput> | DetailCreateWithoutCreatedByInput[] | DetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutCreatedByInput | DetailCreateOrConnectWithoutCreatedByInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutCreatedByInput | DetailUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DetailCreateManyCreatedByInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutCreatedByInput | DetailUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutCreatedByInput | DetailUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput> | NestedDetailCreateWithoutUpdatedByInput[] | NestedDetailUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutUpdatedByInput | NestedDetailCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutUpdatedByInput | NestedDetailUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NestedDetailCreateManyUpdatedByInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutUpdatedByInput | NestedDetailUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutUpdatedByInput | NestedDetailUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput> | NestedDetailCreateWithoutCreatedByInput[] | NestedDetailUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutCreatedByInput | NestedDetailCreateOrConnectWithoutCreatedByInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutCreatedByInput | NestedDetailUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NestedDetailCreateManyCreatedByInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutCreatedByInput | NestedDetailUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutCreatedByInput | NestedDetailUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput> | CourseCreateWithoutUpdatedByInput[] | CourseUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutUpdatedByInput | CourseCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutUpdatedByInput | CourseUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CourseCreateManyUpdatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutUpdatedByInput | CourseUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutUpdatedByInput | CourseUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByInput | CourseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByInput | CourseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByInput | CourseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput> | ProjectCreateWithoutUpdatedByInput[] | ProjectUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutUpdatedByInput | ProjectCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutUpdatedByInput | ProjectUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProjectCreateManyUpdatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutUpdatedByInput | ProjectUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutUpdatedByInput | ProjectUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByInput | ProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByInput | ProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByInput | ProjectUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput> | RepositoryCreateWithoutUpdatedByInput[] | RepositoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutUpdatedByInput | RepositoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutUpdatedByInput | RepositoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: RepositoryCreateManyUpdatedByInputEnvelope
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutUpdatedByInput | RepositoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutUpdatedByInput | RepositoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput> | RepositoryCreateWithoutCreatedByInput[] | RepositoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutCreatedByInput | RepositoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutCreatedByInput | RepositoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RepositoryCreateManyCreatedByInputEnvelope
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutCreatedByInput | RepositoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutCreatedByInput | RepositoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput> | ResumeCreateWithoutUpdatedByInput[] | ResumeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutUpdatedByInput | ResumeCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutUpdatedByInput | ResumeUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ResumeCreateManyUpdatedByInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutUpdatedByInput | ResumeUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutUpdatedByInput | ResumeUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type ResumeUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput> | ResumeCreateWithoutCreatedByInput[] | ResumeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ResumeCreateOrConnectWithoutCreatedByInput | ResumeCreateOrConnectWithoutCreatedByInput[]
    upsert?: ResumeUpsertWithWhereUniqueWithoutCreatedByInput | ResumeUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ResumeCreateManyCreatedByInputEnvelope
    set?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    disconnect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    delete?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    connect?: ResumeWhereUniqueInput | ResumeWhereUniqueInput[]
    update?: ResumeUpdateWithWhereUniqueWithoutCreatedByInput | ResumeUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ResumeUpdateManyWithWhereWithoutCreatedByInput | ResumeUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedNestedDetailsInput = {
    create?: XOR<UserCreateWithoutCreatedNestedDetailsInput, UserUncheckedCreateWithoutCreatedNestedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNestedDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedNestedDetailsInput = {
    create?: XOR<UserCreateWithoutUpdatedNestedDetailsInput, UserUncheckedCreateWithoutUpdatedNestedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedNestedDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type DetailCreateNestedOneWithoutNestedDetailsInput = {
    create?: XOR<DetailCreateWithoutNestedDetailsInput, DetailUncheckedCreateWithoutNestedDetailsInput>
    connectOrCreate?: DetailCreateOrConnectWithoutNestedDetailsInput
    connect?: DetailWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutNestedDetailsInput = {
    create?: XOR<ProjectCreateWithoutNestedDetailsInput, ProjectUncheckedCreateWithoutNestedDetailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutNestedDetailsInput
    connect?: ProjectWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutNestedDetailsInput = {
    create?: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput> | SkillCreateWithoutNestedDetailsInput[] | SkillUncheckedCreateWithoutNestedDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutNestedDetailsInput | SkillCreateOrConnectWithoutNestedDetailsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutNestedDetailsInput = {
    create?: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput> | SkillCreateWithoutNestedDetailsInput[] | SkillUncheckedCreateWithoutNestedDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutNestedDetailsInput | SkillCreateOrConnectWithoutNestedDetailsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedNestedDetailsInput, UserUncheckedCreateWithoutCreatedNestedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNestedDetailsInput
    upsert?: UserUpsertWithoutCreatedNestedDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedNestedDetailsInput, UserUpdateWithoutCreatedNestedDetailsInput>, UserUncheckedUpdateWithoutCreatedNestedDetailsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedNestedDetailsInput, UserUncheckedCreateWithoutUpdatedNestedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedNestedDetailsInput
    upsert?: UserUpsertWithoutUpdatedNestedDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedNestedDetailsInput, UserUpdateWithoutUpdatedNestedDetailsInput>, UserUncheckedUpdateWithoutUpdatedNestedDetailsInput>
  }

  export type DetailUpdateOneRequiredWithoutNestedDetailsNestedInput = {
    create?: XOR<DetailCreateWithoutNestedDetailsInput, DetailUncheckedCreateWithoutNestedDetailsInput>
    connectOrCreate?: DetailCreateOrConnectWithoutNestedDetailsInput
    upsert?: DetailUpsertWithoutNestedDetailsInput
    connect?: DetailWhereUniqueInput
    update?: XOR<XOR<DetailUpdateToOneWithWhereWithoutNestedDetailsInput, DetailUpdateWithoutNestedDetailsInput>, DetailUncheckedUpdateWithoutNestedDetailsInput>
  }

  export type ProjectUpdateOneWithoutNestedDetailsNestedInput = {
    create?: XOR<ProjectCreateWithoutNestedDetailsInput, ProjectUncheckedCreateWithoutNestedDetailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutNestedDetailsInput
    upsert?: ProjectUpsertWithoutNestedDetailsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutNestedDetailsInput, ProjectUpdateWithoutNestedDetailsInput>, ProjectUncheckedUpdateWithoutNestedDetailsInput>
  }

  export type SkillUpdateManyWithoutNestedDetailsNestedInput = {
    create?: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput> | SkillCreateWithoutNestedDetailsInput[] | SkillUncheckedCreateWithoutNestedDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutNestedDetailsInput | SkillCreateOrConnectWithoutNestedDetailsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutNestedDetailsInput | SkillUpsertWithWhereUniqueWithoutNestedDetailsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutNestedDetailsInput | SkillUpdateWithWhereUniqueWithoutNestedDetailsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutNestedDetailsInput | SkillUpdateManyWithWhereWithoutNestedDetailsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput = {
    create?: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput> | SkillCreateWithoutNestedDetailsInput[] | SkillUncheckedCreateWithoutNestedDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutNestedDetailsInput | SkillCreateOrConnectWithoutNestedDetailsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutNestedDetailsInput | SkillUpsertWithWhereUniqueWithoutNestedDetailsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutNestedDetailsInput | SkillUpdateWithWhereUniqueWithoutNestedDetailsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutNestedDetailsInput | SkillUpdateManyWithWhereWithoutNestedDetailsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedDetailsInput = {
    create?: XOR<UserCreateWithoutCreatedDetailsInput, UserUncheckedCreateWithoutCreatedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedDetailsInput = {
    create?: XOR<UserCreateWithoutUpdatedDetailsInput, UserUncheckedCreateWithoutUpdatedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type NestedDetailCreateNestedManyWithoutDetailInput = {
    create?: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput> | NestedDetailCreateWithoutDetailInput[] | NestedDetailUncheckedCreateWithoutDetailInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutDetailInput | NestedDetailCreateOrConnectWithoutDetailInput[]
    createMany?: NestedDetailCreateManyDetailInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutDetailsInput = {
    create?: XOR<ProjectCreateWithoutDetailsInput, ProjectUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDetailsInput
    connect?: ProjectWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutDetailsInput = {
    create?: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput> | SkillCreateWithoutDetailsInput[] | SkillUncheckedCreateWithoutDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutDetailsInput | SkillCreateOrConnectWithoutDetailsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type NestedDetailUncheckedCreateNestedManyWithoutDetailInput = {
    create?: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput> | NestedDetailCreateWithoutDetailInput[] | NestedDetailUncheckedCreateWithoutDetailInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutDetailInput | NestedDetailCreateOrConnectWithoutDetailInput[]
    createMany?: NestedDetailCreateManyDetailInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutDetailsInput = {
    create?: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput> | SkillCreateWithoutDetailsInput[] | SkillUncheckedCreateWithoutDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutDetailsInput | SkillCreateOrConnectWithoutDetailsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type EnumDetailEntityTypeFieldUpdateOperationsInput = {
    set?: $Enums.DetailEntityType
  }

  export type UserUpdateOneRequiredWithoutCreatedDetailsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedDetailsInput, UserUncheckedCreateWithoutCreatedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedDetailsInput
    upsert?: UserUpsertWithoutCreatedDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedDetailsInput, UserUpdateWithoutCreatedDetailsInput>, UserUncheckedUpdateWithoutCreatedDetailsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedDetailsInput, UserUncheckedCreateWithoutUpdatedDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedDetailsInput
    upsert?: UserUpsertWithoutUpdatedDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedDetailsInput, UserUpdateWithoutUpdatedDetailsInput>, UserUncheckedUpdateWithoutUpdatedDetailsInput>
  }

  export type NestedDetailUpdateManyWithoutDetailNestedInput = {
    create?: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput> | NestedDetailCreateWithoutDetailInput[] | NestedDetailUncheckedCreateWithoutDetailInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutDetailInput | NestedDetailCreateOrConnectWithoutDetailInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutDetailInput | NestedDetailUpsertWithWhereUniqueWithoutDetailInput[]
    createMany?: NestedDetailCreateManyDetailInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutDetailInput | NestedDetailUpdateWithWhereUniqueWithoutDetailInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutDetailInput | NestedDetailUpdateManyWithWhereWithoutDetailInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type ProjectUpdateOneWithoutDetailsNestedInput = {
    create?: XOR<ProjectCreateWithoutDetailsInput, ProjectUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDetailsInput
    upsert?: ProjectUpsertWithoutDetailsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDetailsInput, ProjectUpdateWithoutDetailsInput>, ProjectUncheckedUpdateWithoutDetailsInput>
  }

  export type SkillUpdateManyWithoutDetailsNestedInput = {
    create?: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput> | SkillCreateWithoutDetailsInput[] | SkillUncheckedCreateWithoutDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutDetailsInput | SkillCreateOrConnectWithoutDetailsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutDetailsInput | SkillUpsertWithWhereUniqueWithoutDetailsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutDetailsInput | SkillUpdateWithWhereUniqueWithoutDetailsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutDetailsInput | SkillUpdateManyWithWhereWithoutDetailsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type NestedDetailUncheckedUpdateManyWithoutDetailNestedInput = {
    create?: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput> | NestedDetailCreateWithoutDetailInput[] | NestedDetailUncheckedCreateWithoutDetailInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutDetailInput | NestedDetailCreateOrConnectWithoutDetailInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutDetailInput | NestedDetailUpsertWithWhereUniqueWithoutDetailInput[]
    createMany?: NestedDetailCreateManyDetailInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutDetailInput | NestedDetailUpdateWithWhereUniqueWithoutDetailInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutDetailInput | NestedDetailUpdateManyWithWhereWithoutDetailInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutDetailsNestedInput = {
    create?: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput> | SkillCreateWithoutDetailsInput[] | SkillUncheckedCreateWithoutDetailsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutDetailsInput | SkillCreateOrConnectWithoutDetailsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutDetailsInput | SkillUpsertWithWhereUniqueWithoutDetailsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutDetailsInput | SkillUpdateWithWhereUniqueWithoutDetailsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutDetailsInput | SkillUpdateManyWithWhereWithoutDetailsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedResumesInput = {
    create?: XOR<UserCreateWithoutCreatedResumesInput, UserUncheckedCreateWithoutCreatedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedResumesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedResumesInput = {
    create?: XOR<UserCreateWithoutUpdatedResumesInput, UserUncheckedCreateWithoutUpdatedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedResumesInput
    connect?: UserWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutCreatedResumesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedResumesInput, UserUncheckedCreateWithoutCreatedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedResumesInput
    upsert?: UserUpsertWithoutCreatedResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedResumesInput, UserUpdateWithoutCreatedResumesInput>, UserUncheckedUpdateWithoutCreatedResumesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedResumesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedResumesInput, UserUncheckedCreateWithoutUpdatedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedResumesInput
    upsert?: UserUpsertWithoutUpdatedResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedResumesInput, UserUpdateWithoutUpdatedResumesInput>, UserUncheckedUpdateWithoutUpdatedResumesInput>
  }

  export type UserCreateNestedOneWithoutCreatedRepositoriesInput = {
    create?: XOR<UserCreateWithoutCreatedRepositoriesInput, UserUncheckedCreateWithoutCreatedRepositoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRepositoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedRepositoriesInput = {
    create?: XOR<UserCreateWithoutUpdatedRepositoriesInput, UserUncheckedCreateWithoutUpdatedRepositoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedRepositoriesInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutRepositoriesInput = {
    create?: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput> | SkillCreateWithoutRepositoriesInput[] | SkillUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutRepositoriesInput | SkillCreateOrConnectWithoutRepositoriesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutRepositoriesInput = {
    create?: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput> | ProjectCreateWithoutRepositoriesInput[] | ProjectUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutRepositoriesInput | ProjectCreateOrConnectWithoutRepositoriesInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutRepositoriesInput = {
    create?: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput> | SkillCreateWithoutRepositoriesInput[] | SkillUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutRepositoriesInput | SkillCreateOrConnectWithoutRepositoriesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutRepositoriesInput = {
    create?: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput> | ProjectCreateWithoutRepositoriesInput[] | ProjectUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutRepositoriesInput | ProjectCreateOrConnectWithoutRepositoriesInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedRepositoriesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRepositoriesInput, UserUncheckedCreateWithoutCreatedRepositoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRepositoriesInput
    upsert?: UserUpsertWithoutCreatedRepositoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRepositoriesInput, UserUpdateWithoutCreatedRepositoriesInput>, UserUncheckedUpdateWithoutCreatedRepositoriesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedRepositoriesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedRepositoriesInput, UserUncheckedCreateWithoutUpdatedRepositoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedRepositoriesInput
    upsert?: UserUpsertWithoutUpdatedRepositoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedRepositoriesInput, UserUpdateWithoutUpdatedRepositoriesInput>, UserUncheckedUpdateWithoutUpdatedRepositoriesInput>
  }

  export type SkillUpdateManyWithoutRepositoriesNestedInput = {
    create?: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput> | SkillCreateWithoutRepositoriesInput[] | SkillUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutRepositoriesInput | SkillCreateOrConnectWithoutRepositoriesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutRepositoriesInput | SkillUpsertWithWhereUniqueWithoutRepositoriesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutRepositoriesInput | SkillUpdateWithWhereUniqueWithoutRepositoriesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutRepositoriesInput | SkillUpdateManyWithWhereWithoutRepositoriesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutRepositoriesNestedInput = {
    create?: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput> | ProjectCreateWithoutRepositoriesInput[] | ProjectUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutRepositoriesInput | ProjectCreateOrConnectWithoutRepositoriesInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutRepositoriesInput | ProjectUpsertWithWhereUniqueWithoutRepositoriesInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutRepositoriesInput | ProjectUpdateWithWhereUniqueWithoutRepositoriesInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutRepositoriesInput | ProjectUpdateManyWithWhereWithoutRepositoriesInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutRepositoriesNestedInput = {
    create?: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput> | SkillCreateWithoutRepositoriesInput[] | SkillUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutRepositoriesInput | SkillCreateOrConnectWithoutRepositoriesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutRepositoriesInput | SkillUpsertWithWhereUniqueWithoutRepositoriesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutRepositoriesInput | SkillUpdateWithWhereUniqueWithoutRepositoriesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutRepositoriesInput | SkillUpdateManyWithWhereWithoutRepositoriesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutRepositoriesNestedInput = {
    create?: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput> | ProjectCreateWithoutRepositoriesInput[] | ProjectUncheckedCreateWithoutRepositoriesInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutRepositoriesInput | ProjectCreateOrConnectWithoutRepositoriesInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutRepositoriesInput | ProjectUpsertWithWhereUniqueWithoutRepositoriesInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutRepositoriesInput | ProjectUpdateWithWhereUniqueWithoutRepositoriesInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutRepositoriesInput | ProjectUpdateManyWithWhereWithoutRepositoriesInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type SkillCreatecategoriesInput = {
    set: $Enums.SkillCategory[]
  }

  export type SkillCreateprogrammingLanguagesInput = {
    set: $Enums.ProgrammingLanguage[]
  }

  export type SkillCreateprogrammingDomainsInput = {
    set: $Enums.ProgrammingDomain[]
  }

  export type UserCreateNestedOneWithoutCreatedSkillsInput = {
    create?: XOR<UserCreateWithoutCreatedSkillsInput, UserUncheckedCreateWithoutCreatedSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSkillsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedSkillsInput = {
    create?: XOR<UserCreateWithoutUpdatedSkillsInput, UserUncheckedCreateWithoutUpdatedSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSkillsInput
    connect?: UserWhereUniqueInput
  }

  export type ExperienceCreateNestedManyWithoutSkillsInput = {
    create?: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput> | ExperienceCreateWithoutSkillsInput[] | ExperienceUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutSkillsInput | ExperienceCreateOrConnectWithoutSkillsInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type EducationCreateNestedManyWithoutSkillsInput = {
    create?: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput> | EducationCreateWithoutSkillsInput[] | EducationUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSkillsInput | EducationCreateOrConnectWithoutSkillsInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutSkillsInput = {
    create?: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput> | CourseCreateWithoutSkillsInput[] | CourseUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutSkillsInput | CourseCreateOrConnectWithoutSkillsInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutSkillsInput = {
    create?: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput> | ProjectCreateWithoutSkillsInput[] | ProjectUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSkillsInput | ProjectCreateOrConnectWithoutSkillsInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DetailCreateNestedManyWithoutSkillsInput = {
    create?: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput> | DetailCreateWithoutSkillsInput[] | DetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutSkillsInput | DetailCreateOrConnectWithoutSkillsInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailCreateNestedManyWithoutSkillsInput = {
    create?: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput> | NestedDetailCreateWithoutSkillsInput[] | NestedDetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutSkillsInput | NestedDetailCreateOrConnectWithoutSkillsInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type RepositoryCreateNestedManyWithoutSkillsInput = {
    create?: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput> | RepositoryCreateWithoutSkillsInput[] | RepositoryUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutSkillsInput | RepositoryCreateOrConnectWithoutSkillsInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput> | ExperienceCreateWithoutSkillsInput[] | ExperienceUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutSkillsInput | ExperienceCreateOrConnectWithoutSkillsInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput> | EducationCreateWithoutSkillsInput[] | EducationUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSkillsInput | EducationCreateOrConnectWithoutSkillsInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput> | CourseCreateWithoutSkillsInput[] | CourseUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutSkillsInput | CourseCreateOrConnectWithoutSkillsInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput> | ProjectCreateWithoutSkillsInput[] | ProjectUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSkillsInput | ProjectCreateOrConnectWithoutSkillsInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type DetailUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput> | DetailCreateWithoutSkillsInput[] | DetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutSkillsInput | DetailCreateOrConnectWithoutSkillsInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput> | NestedDetailCreateWithoutSkillsInput[] | NestedDetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutSkillsInput | NestedDetailCreateOrConnectWithoutSkillsInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type RepositoryUncheckedCreateNestedManyWithoutSkillsInput = {
    create?: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput> | RepositoryCreateWithoutSkillsInput[] | RepositoryUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutSkillsInput | RepositoryCreateOrConnectWithoutSkillsInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type SkillUpdatecategoriesInput = {
    set?: $Enums.SkillCategory[]
    push?: $Enums.SkillCategory | $Enums.SkillCategory[]
  }

  export type SkillUpdateprogrammingLanguagesInput = {
    set?: $Enums.ProgrammingLanguage[]
    push?: $Enums.ProgrammingLanguage | $Enums.ProgrammingLanguage[]
  }

  export type SkillUpdateprogrammingDomainsInput = {
    set?: $Enums.ProgrammingDomain[]
    push?: $Enums.ProgrammingDomain | $Enums.ProgrammingDomain[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCreatedSkillsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSkillsInput, UserUncheckedCreateWithoutCreatedSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSkillsInput
    upsert?: UserUpsertWithoutCreatedSkillsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSkillsInput, UserUpdateWithoutCreatedSkillsInput>, UserUncheckedUpdateWithoutCreatedSkillsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedSkillsInput, UserUncheckedCreateWithoutUpdatedSkillsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSkillsInput
    upsert?: UserUpsertWithoutUpdatedSkillsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedSkillsInput, UserUpdateWithoutUpdatedSkillsInput>, UserUncheckedUpdateWithoutUpdatedSkillsInput>
  }

  export type ExperienceUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput> | ExperienceCreateWithoutSkillsInput[] | ExperienceUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutSkillsInput | ExperienceCreateOrConnectWithoutSkillsInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutSkillsInput | ExperienceUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutSkillsInput | ExperienceUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutSkillsInput | ExperienceUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type EducationUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput> | EducationCreateWithoutSkillsInput[] | EducationUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSkillsInput | EducationCreateOrConnectWithoutSkillsInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutSkillsInput | EducationUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutSkillsInput | EducationUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutSkillsInput | EducationUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput> | CourseCreateWithoutSkillsInput[] | CourseUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutSkillsInput | CourseCreateOrConnectWithoutSkillsInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutSkillsInput | CourseUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutSkillsInput | CourseUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutSkillsInput | CourseUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput> | ProjectCreateWithoutSkillsInput[] | ProjectUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSkillsInput | ProjectCreateOrConnectWithoutSkillsInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutSkillsInput | ProjectUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutSkillsInput | ProjectUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutSkillsInput | ProjectUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DetailUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput> | DetailCreateWithoutSkillsInput[] | DetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutSkillsInput | DetailCreateOrConnectWithoutSkillsInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutSkillsInput | DetailUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutSkillsInput | DetailUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutSkillsInput | DetailUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput> | NestedDetailCreateWithoutSkillsInput[] | NestedDetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutSkillsInput | NestedDetailCreateOrConnectWithoutSkillsInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutSkillsInput | NestedDetailUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutSkillsInput | NestedDetailUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutSkillsInput | NestedDetailUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type RepositoryUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput> | RepositoryCreateWithoutSkillsInput[] | RepositoryUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutSkillsInput | RepositoryCreateOrConnectWithoutSkillsInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutSkillsInput | RepositoryUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutSkillsInput | RepositoryUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutSkillsInput | RepositoryUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput> | ExperienceCreateWithoutSkillsInput[] | ExperienceUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutSkillsInput | ExperienceCreateOrConnectWithoutSkillsInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutSkillsInput | ExperienceUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutSkillsInput | ExperienceUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutSkillsInput | ExperienceUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput> | EducationCreateWithoutSkillsInput[] | EducationUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSkillsInput | EducationCreateOrConnectWithoutSkillsInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutSkillsInput | EducationUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutSkillsInput | EducationUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutSkillsInput | EducationUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput> | CourseCreateWithoutSkillsInput[] | CourseUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutSkillsInput | CourseCreateOrConnectWithoutSkillsInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutSkillsInput | CourseUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutSkillsInput | CourseUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutSkillsInput | CourseUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput> | ProjectCreateWithoutSkillsInput[] | ProjectUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutSkillsInput | ProjectCreateOrConnectWithoutSkillsInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutSkillsInput | ProjectUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutSkillsInput | ProjectUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutSkillsInput | ProjectUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type DetailUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput> | DetailCreateWithoutSkillsInput[] | DetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutSkillsInput | DetailCreateOrConnectWithoutSkillsInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutSkillsInput | DetailUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutSkillsInput | DetailUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutSkillsInput | DetailUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput> | NestedDetailCreateWithoutSkillsInput[] | NestedDetailUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutSkillsInput | NestedDetailCreateOrConnectWithoutSkillsInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutSkillsInput | NestedDetailUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutSkillsInput | NestedDetailUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutSkillsInput | NestedDetailUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type RepositoryUncheckedUpdateManyWithoutSkillsNestedInput = {
    create?: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput> | RepositoryCreateWithoutSkillsInput[] | RepositoryUncheckedCreateWithoutSkillsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutSkillsInput | RepositoryCreateOrConnectWithoutSkillsInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutSkillsInput | RepositoryUpsertWithWhereUniqueWithoutSkillsInput[]
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutSkillsInput | RepositoryUpdateWithWhereUniqueWithoutSkillsInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutSkillsInput | RepositoryUpdateManyWithWhereWithoutSkillsInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCoursesInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedCoursesInput = {
    create?: XOR<UserCreateWithoutUpdatedCoursesInput, UserUncheckedCreateWithoutUpdatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type EducationCreateNestedOneWithoutCoursesInput = {
    create?: XOR<EducationCreateWithoutCoursesInput, EducationUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutCoursesInput
    connect?: EducationWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutCoursesInput = {
    create?: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput> | SkillCreateWithoutCoursesInput[] | SkillUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCoursesInput | SkillCreateOrConnectWithoutCoursesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput> | SkillCreateWithoutCoursesInput[] | SkillUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCoursesInput | SkillCreateOrConnectWithoutCoursesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    upsert?: UserUpsertWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCoursesInput, UserUpdateWithoutCreatedCoursesInput>, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedCoursesInput, UserUncheckedCreateWithoutUpdatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCoursesInput
    upsert?: UserUpsertWithoutUpdatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedCoursesInput, UserUpdateWithoutUpdatedCoursesInput>, UserUncheckedUpdateWithoutUpdatedCoursesInput>
  }

  export type EducationUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<EducationCreateWithoutCoursesInput, EducationUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: EducationCreateOrConnectWithoutCoursesInput
    upsert?: EducationUpsertWithoutCoursesInput
    connect?: EducationWhereUniqueInput
    update?: XOR<XOR<EducationUpdateToOneWithWhereWithoutCoursesInput, EducationUpdateWithoutCoursesInput>, EducationUncheckedUpdateWithoutCoursesInput>
  }

  export type SkillUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput> | SkillCreateWithoutCoursesInput[] | SkillUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCoursesInput | SkillCreateOrConnectWithoutCoursesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutCoursesInput | SkillUpsertWithWhereUniqueWithoutCoursesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutCoursesInput | SkillUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutCoursesInput | SkillUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput> | SkillCreateWithoutCoursesInput[] | SkillUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutCoursesInput | SkillCreateOrConnectWithoutCoursesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutCoursesInput | SkillUpsertWithWhereUniqueWithoutCoursesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutCoursesInput | SkillUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutCoursesInput | SkillUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProjectsInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProjectsInput = {
    create?: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutProjectsInput = {
    create?: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput> | SkillCreateWithoutProjectsInput[] | SkillUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutProjectsInput | SkillCreateOrConnectWithoutProjectsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type DetailCreateNestedManyWithoutProjectInput = {
    create?: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput> | DetailCreateWithoutProjectInput[] | DetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutProjectInput | DetailCreateOrConnectWithoutProjectInput[]
    createMany?: DetailCreateManyProjectInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailCreateNestedManyWithoutProjectInput = {
    create?: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput> | NestedDetailCreateWithoutProjectInput[] | NestedDetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutProjectInput | NestedDetailCreateOrConnectWithoutProjectInput[]
    createMany?: NestedDetailCreateManyProjectInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type RepositoryCreateNestedManyWithoutProjectsInput = {
    create?: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput> | RepositoryCreateWithoutProjectsInput[] | RepositoryUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutProjectsInput | RepositoryCreateOrConnectWithoutProjectsInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput> | SkillCreateWithoutProjectsInput[] | SkillUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutProjectsInput | SkillCreateOrConnectWithoutProjectsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type DetailUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput> | DetailCreateWithoutProjectInput[] | DetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutProjectInput | DetailCreateOrConnectWithoutProjectInput[]
    createMany?: DetailCreateManyProjectInputEnvelope
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
  }

  export type NestedDetailUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput> | NestedDetailCreateWithoutProjectInput[] | NestedDetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutProjectInput | NestedDetailCreateOrConnectWithoutProjectInput[]
    createMany?: NestedDetailCreateManyProjectInputEnvelope
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
  }

  export type RepositoryUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput> | RepositoryCreateWithoutProjectsInput[] | RepositoryUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutProjectsInput | RepositoryCreateOrConnectWithoutProjectsInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    upsert?: UserUpsertWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProjectsInput, UserUpdateWithoutCreatedProjectsInput>, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProjectsInput
    upsert?: UserUpsertWithoutUpdatedProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProjectsInput, UserUpdateWithoutUpdatedProjectsInput>, UserUncheckedUpdateWithoutUpdatedProjectsInput>
  }

  export type SkillUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput> | SkillCreateWithoutProjectsInput[] | SkillUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutProjectsInput | SkillCreateOrConnectWithoutProjectsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutProjectsInput | SkillUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutProjectsInput | SkillUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutProjectsInput | SkillUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type DetailUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput> | DetailCreateWithoutProjectInput[] | DetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutProjectInput | DetailCreateOrConnectWithoutProjectInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutProjectInput | DetailUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DetailCreateManyProjectInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutProjectInput | DetailUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutProjectInput | DetailUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUpdateManyWithoutProjectNestedInput = {
    create?: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput> | NestedDetailCreateWithoutProjectInput[] | NestedDetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutProjectInput | NestedDetailCreateOrConnectWithoutProjectInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutProjectInput | NestedDetailUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: NestedDetailCreateManyProjectInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutProjectInput | NestedDetailUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutProjectInput | NestedDetailUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type RepositoryUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput> | RepositoryCreateWithoutProjectsInput[] | RepositoryUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutProjectsInput | RepositoryCreateOrConnectWithoutProjectsInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutProjectsInput | RepositoryUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutProjectsInput | RepositoryUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutProjectsInput | RepositoryUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput> | SkillCreateWithoutProjectsInput[] | SkillUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutProjectsInput | SkillCreateOrConnectWithoutProjectsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutProjectsInput | SkillUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutProjectsInput | SkillUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutProjectsInput | SkillUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type DetailUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput> | DetailCreateWithoutProjectInput[] | DetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: DetailCreateOrConnectWithoutProjectInput | DetailCreateOrConnectWithoutProjectInput[]
    upsert?: DetailUpsertWithWhereUniqueWithoutProjectInput | DetailUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: DetailCreateManyProjectInputEnvelope
    set?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    disconnect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    delete?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    connect?: DetailWhereUniqueInput | DetailWhereUniqueInput[]
    update?: DetailUpdateWithWhereUniqueWithoutProjectInput | DetailUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: DetailUpdateManyWithWhereWithoutProjectInput | DetailUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: DetailScalarWhereInput | DetailScalarWhereInput[]
  }

  export type NestedDetailUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput> | NestedDetailCreateWithoutProjectInput[] | NestedDetailUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NestedDetailCreateOrConnectWithoutProjectInput | NestedDetailCreateOrConnectWithoutProjectInput[]
    upsert?: NestedDetailUpsertWithWhereUniqueWithoutProjectInput | NestedDetailUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: NestedDetailCreateManyProjectInputEnvelope
    set?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    disconnect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    delete?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    connect?: NestedDetailWhereUniqueInput | NestedDetailWhereUniqueInput[]
    update?: NestedDetailUpdateWithWhereUniqueWithoutProjectInput | NestedDetailUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: NestedDetailUpdateManyWithWhereWithoutProjectInput | NestedDetailUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
  }

  export type RepositoryUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput> | RepositoryCreateWithoutProjectsInput[] | RepositoryUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: RepositoryCreateOrConnectWithoutProjectsInput | RepositoryCreateOrConnectWithoutProjectsInput[]
    upsert?: RepositoryUpsertWithWhereUniqueWithoutProjectsInput | RepositoryUpsertWithWhereUniqueWithoutProjectsInput[]
    set?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    disconnect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    delete?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    connect?: RepositoryWhereUniqueInput | RepositoryWhereUniqueInput[]
    update?: RepositoryUpdateWithWhereUniqueWithoutProjectsInput | RepositoryUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: RepositoryUpdateManyWithWhereWithoutProjectsInput | RepositoryUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCompaniesInput = {
    create?: XOR<UserCreateWithoutCreatedCompaniesInput, UserUncheckedCreateWithoutCreatedCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCompaniesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedCompaniesInput = {
    create?: XOR<UserCreateWithoutUpdatedCompaniesInput, UserUncheckedCreateWithoutUpdatedCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCompaniesInput
    connect?: UserWhereUniqueInput
  }

  export type ExperienceCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput> | ExperienceCreateWithoutCompanyInput[] | ExperienceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCompanyInput | ExperienceCreateOrConnectWithoutCompanyInput[]
    createMany?: ExperienceCreateManyCompanyInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type ExperienceUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput> | ExperienceCreateWithoutCompanyInput[] | ExperienceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCompanyInput | ExperienceCreateOrConnectWithoutCompanyInput[]
    createMany?: ExperienceCreateManyCompanyInputEnvelope
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedCompaniesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCompaniesInput, UserUncheckedCreateWithoutCreatedCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCompaniesInput
    upsert?: UserUpsertWithoutCreatedCompaniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCompaniesInput, UserUpdateWithoutCreatedCompaniesInput>, UserUncheckedUpdateWithoutCreatedCompaniesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedCompaniesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedCompaniesInput, UserUncheckedCreateWithoutUpdatedCompaniesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedCompaniesInput
    upsert?: UserUpsertWithoutUpdatedCompaniesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedCompaniesInput, UserUpdateWithoutUpdatedCompaniesInput>, UserUncheckedUpdateWithoutUpdatedCompaniesInput>
  }

  export type ExperienceUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput> | ExperienceCreateWithoutCompanyInput[] | ExperienceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCompanyInput | ExperienceCreateOrConnectWithoutCompanyInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCompanyInput | ExperienceUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ExperienceCreateManyCompanyInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCompanyInput | ExperienceUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCompanyInput | ExperienceUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type ExperienceUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput> | ExperienceCreateWithoutCompanyInput[] | ExperienceUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ExperienceCreateOrConnectWithoutCompanyInput | ExperienceCreateOrConnectWithoutCompanyInput[]
    upsert?: ExperienceUpsertWithWhereUniqueWithoutCompanyInput | ExperienceUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ExperienceCreateManyCompanyInputEnvelope
    set?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    disconnect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    delete?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    connect?: ExperienceWhereUniqueInput | ExperienceWhereUniqueInput[]
    update?: ExperienceUpdateWithWhereUniqueWithoutCompanyInput | ExperienceUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ExperienceUpdateManyWithWhereWithoutCompanyInput | ExperienceUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedSchoolsInput = {
    create?: XOR<UserCreateWithoutCreatedSchoolsInput, UserUncheckedCreateWithoutCreatedSchoolsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchoolsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedSchoolsInput = {
    create?: XOR<UserCreateWithoutUpdatedSchoolsInput, UserUncheckedCreateWithoutUpdatedSchoolsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSchoolsInput
    connect?: UserWhereUniqueInput
  }

  export type EducationCreateNestedManyWithoutSchoolInput = {
    create?: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput> | EducationCreateWithoutSchoolInput[] | EducationUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSchoolInput | EducationCreateOrConnectWithoutSchoolInput[]
    createMany?: EducationCreateManySchoolInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type EducationUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput> | EducationCreateWithoutSchoolInput[] | EducationUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSchoolInput | EducationCreateOrConnectWithoutSchoolInput[]
    createMany?: EducationCreateManySchoolInputEnvelope
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedSchoolsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedSchoolsInput, UserUncheckedCreateWithoutCreatedSchoolsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedSchoolsInput
    upsert?: UserUpsertWithoutCreatedSchoolsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedSchoolsInput, UserUpdateWithoutCreatedSchoolsInput>, UserUncheckedUpdateWithoutCreatedSchoolsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedSchoolsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedSchoolsInput, UserUncheckedCreateWithoutUpdatedSchoolsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSchoolsInput
    upsert?: UserUpsertWithoutUpdatedSchoolsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedSchoolsInput, UserUpdateWithoutUpdatedSchoolsInput>, UserUncheckedUpdateWithoutUpdatedSchoolsInput>
  }

  export type EducationUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput> | EducationCreateWithoutSchoolInput[] | EducationUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSchoolInput | EducationCreateOrConnectWithoutSchoolInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutSchoolInput | EducationUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: EducationCreateManySchoolInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutSchoolInput | EducationUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutSchoolInput | EducationUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type EducationUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput> | EducationCreateWithoutSchoolInput[] | EducationUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: EducationCreateOrConnectWithoutSchoolInput | EducationCreateOrConnectWithoutSchoolInput[]
    upsert?: EducationUpsertWithWhereUniqueWithoutSchoolInput | EducationUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: EducationCreateManySchoolInputEnvelope
    set?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    disconnect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    delete?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    connect?: EducationWhereUniqueInput | EducationWhereUniqueInput[]
    update?: EducationUpdateWithWhereUniqueWithoutSchoolInput | EducationUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: EducationUpdateManyWithWhereWithoutSchoolInput | EducationUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: EducationScalarWhereInput | EducationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedExperiencesInput = {
    create?: XOR<UserCreateWithoutCreatedExperiencesInput, UserUncheckedCreateWithoutCreatedExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedExperiencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedExperiencesInput = {
    create?: XOR<UserCreateWithoutUpdatedExperiencesInput, UserUncheckedCreateWithoutUpdatedExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedExperiencesInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutExperiencesInput = {
    create?: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput> | SkillCreateWithoutExperiencesInput[] | SkillUncheckedCreateWithoutExperiencesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutExperiencesInput | SkillCreateOrConnectWithoutExperiencesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutExperiencesInput = {
    create?: XOR<CompanyCreateWithoutExperiencesInput, CompanyUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutExperiencesInput
    connect?: CompanyWhereUniqueInput
  }

  export type SkillUncheckedCreateNestedManyWithoutExperiencesInput = {
    create?: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput> | SkillCreateWithoutExperiencesInput[] | SkillUncheckedCreateWithoutExperiencesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutExperiencesInput | SkillCreateOrConnectWithoutExperiencesInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutCreatedExperiencesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedExperiencesInput, UserUncheckedCreateWithoutCreatedExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedExperiencesInput
    upsert?: UserUpsertWithoutCreatedExperiencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedExperiencesInput, UserUpdateWithoutCreatedExperiencesInput>, UserUncheckedUpdateWithoutCreatedExperiencesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedExperiencesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedExperiencesInput, UserUncheckedCreateWithoutUpdatedExperiencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedExperiencesInput
    upsert?: UserUpsertWithoutUpdatedExperiencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedExperiencesInput, UserUpdateWithoutUpdatedExperiencesInput>, UserUncheckedUpdateWithoutUpdatedExperiencesInput>
  }

  export type SkillUpdateManyWithoutExperiencesNestedInput = {
    create?: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput> | SkillCreateWithoutExperiencesInput[] | SkillUncheckedCreateWithoutExperiencesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutExperiencesInput | SkillCreateOrConnectWithoutExperiencesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutExperiencesInput | SkillUpsertWithWhereUniqueWithoutExperiencesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutExperiencesInput | SkillUpdateWithWhereUniqueWithoutExperiencesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutExperiencesInput | SkillUpdateManyWithWhereWithoutExperiencesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CompanyUpdateOneRequiredWithoutExperiencesNestedInput = {
    create?: XOR<CompanyCreateWithoutExperiencesInput, CompanyUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutExperiencesInput
    upsert?: CompanyUpsertWithoutExperiencesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutExperiencesInput, CompanyUpdateWithoutExperiencesInput>, CompanyUncheckedUpdateWithoutExperiencesInput>
  }

  export type SkillUncheckedUpdateManyWithoutExperiencesNestedInput = {
    create?: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput> | SkillCreateWithoutExperiencesInput[] | SkillUncheckedCreateWithoutExperiencesInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutExperiencesInput | SkillCreateOrConnectWithoutExperiencesInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutExperiencesInput | SkillUpsertWithWhereUniqueWithoutExperiencesInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutExperiencesInput | SkillUpdateWithWhereUniqueWithoutExperiencesInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutExperiencesInput | SkillUpdateManyWithWhereWithoutExperiencesInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedEducationsInput = {
    create?: XOR<UserCreateWithoutCreatedEducationsInput, UserUncheckedCreateWithoutCreatedEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEducationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedEducationsInput = {
    create?: XOR<UserCreateWithoutUpdatedEducationsInput, UserUncheckedCreateWithoutUpdatedEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEducationsInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedManyWithoutEducationsInput = {
    create?: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput> | SkillCreateWithoutEducationsInput[] | SkillUncheckedCreateWithoutEducationsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutEducationsInput | SkillCreateOrConnectWithoutEducationsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutEducationsInput = {
    create?: XOR<SchoolCreateWithoutEducationsInput, SchoolUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutEducationsInput
    connect?: SchoolWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutEducationInput = {
    create?: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput> | CourseCreateWithoutEducationInput[] | CourseUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutEducationInput | CourseCreateOrConnectWithoutEducationInput[]
    createMany?: CourseCreateManyEducationInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type SkillUncheckedCreateNestedManyWithoutEducationsInput = {
    create?: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput> | SkillCreateWithoutEducationsInput[] | SkillUncheckedCreateWithoutEducationsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutEducationsInput | SkillCreateOrConnectWithoutEducationsInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutEducationInput = {
    create?: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput> | CourseCreateWithoutEducationInput[] | CourseUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutEducationInput | CourseCreateOrConnectWithoutEducationInput[]
    createMany?: CourseCreateManyEducationInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type EnumDegreeFieldUpdateOperationsInput = {
    set?: $Enums.Degree
  }

  export type UserUpdateOneRequiredWithoutCreatedEducationsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEducationsInput, UserUncheckedCreateWithoutCreatedEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEducationsInput
    upsert?: UserUpsertWithoutCreatedEducationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEducationsInput, UserUpdateWithoutCreatedEducationsInput>, UserUncheckedUpdateWithoutCreatedEducationsInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedEducationsInput, UserUncheckedCreateWithoutUpdatedEducationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEducationsInput
    upsert?: UserUpsertWithoutUpdatedEducationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedEducationsInput, UserUpdateWithoutUpdatedEducationsInput>, UserUncheckedUpdateWithoutUpdatedEducationsInput>
  }

  export type SkillUpdateManyWithoutEducationsNestedInput = {
    create?: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput> | SkillCreateWithoutEducationsInput[] | SkillUncheckedCreateWithoutEducationsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutEducationsInput | SkillCreateOrConnectWithoutEducationsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutEducationsInput | SkillUpsertWithWhereUniqueWithoutEducationsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutEducationsInput | SkillUpdateWithWhereUniqueWithoutEducationsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutEducationsInput | SkillUpdateManyWithWhereWithoutEducationsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type SchoolUpdateOneRequiredWithoutEducationsNestedInput = {
    create?: XOR<SchoolCreateWithoutEducationsInput, SchoolUncheckedCreateWithoutEducationsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutEducationsInput
    upsert?: SchoolUpsertWithoutEducationsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutEducationsInput, SchoolUpdateWithoutEducationsInput>, SchoolUncheckedUpdateWithoutEducationsInput>
  }

  export type CourseUpdateManyWithoutEducationNestedInput = {
    create?: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput> | CourseCreateWithoutEducationInput[] | CourseUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutEducationInput | CourseCreateOrConnectWithoutEducationInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutEducationInput | CourseUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: CourseCreateManyEducationInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutEducationInput | CourseUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutEducationInput | CourseUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type SkillUncheckedUpdateManyWithoutEducationsNestedInput = {
    create?: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput> | SkillCreateWithoutEducationsInput[] | SkillUncheckedCreateWithoutEducationsInput[]
    connectOrCreate?: SkillCreateOrConnectWithoutEducationsInput | SkillCreateOrConnectWithoutEducationsInput[]
    upsert?: SkillUpsertWithWhereUniqueWithoutEducationsInput | SkillUpsertWithWhereUniqueWithoutEducationsInput[]
    set?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    disconnect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    delete?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    connect?: SkillWhereUniqueInput | SkillWhereUniqueInput[]
    update?: SkillUpdateWithWhereUniqueWithoutEducationsInput | SkillUpdateWithWhereUniqueWithoutEducationsInput[]
    updateMany?: SkillUpdateManyWithWhereWithoutEducationsInput | SkillUpdateManyWithWhereWithoutEducationsInput[]
    deleteMany?: SkillScalarWhereInput | SkillScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutEducationNestedInput = {
    create?: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput> | CourseCreateWithoutEducationInput[] | CourseUncheckedCreateWithoutEducationInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutEducationInput | CourseCreateOrConnectWithoutEducationInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutEducationInput | CourseUpsertWithWhereUniqueWithoutEducationInput[]
    createMany?: CourseCreateManyEducationInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutEducationInput | CourseUpdateWithWhereUniqueWithoutEducationInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutEducationInput | CourseUpdateManyWithWhereWithoutEducationInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProfilesInput = {
    create?: XOR<UserCreateWithoutCreatedProfilesInput, UserUncheckedCreateWithoutCreatedProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProfilesInput = {
    create?: XOR<UserCreateWithoutUpdatedProfilesInput, UserUncheckedCreateWithoutUpdatedProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCreatedProfilesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProfilesInput, UserUncheckedCreateWithoutCreatedProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProfilesInput
    upsert?: UserUpsertWithoutCreatedProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProfilesInput, UserUpdateWithoutCreatedProfilesInput>, UserUncheckedUpdateWithoutCreatedProfilesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedProfilesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedProfilesInput, UserUncheckedCreateWithoutUpdatedProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProfilesInput
    upsert?: UserUpsertWithoutUpdatedProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedProfilesInput, UserUpdateWithoutUpdatedProfilesInput>, UserUncheckedUpdateWithoutUpdatedProfilesInput>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumDetailEntityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DetailEntityType | EnumDetailEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDetailEntityTypeFilter<$PrismaModel> | $Enums.DetailEntityType
  }

  export type NestedEnumDetailEntityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DetailEntityType | EnumDetailEntityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DetailEntityType[] | ListEnumDetailEntityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDetailEntityTypeWithAggregatesFilter<$PrismaModel> | $Enums.DetailEntityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDetailEntityTypeFilter<$PrismaModel>
    _max?: NestedEnumDetailEntityTypeFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDegreeFilter<$PrismaModel = never> = {
    equals?: $Enums.Degree | EnumDegreeFieldRefInput<$PrismaModel>
    in?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    not?: NestedEnumDegreeFilter<$PrismaModel> | $Enums.Degree
  }

  export type NestedEnumDegreeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Degree | EnumDegreeFieldRefInput<$PrismaModel>
    in?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Degree[] | ListEnumDegreeFieldRefInput<$PrismaModel>
    not?: NestedEnumDegreeWithAggregatesFilter<$PrismaModel> | $Enums.Degree
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDegreeFilter<$PrismaModel>
    _max?: NestedEnumDegreeFilter<$PrismaModel>
  }

  export type SkillCreateWithoutUpdatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutUpdatedByInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput>
  }

  export type SkillCreateManyUpdatedByInputEnvelope = {
    data: SkillCreateManyUpdatedByInput | SkillCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type SkillCreateWithoutCreatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutCreatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutCreatedByInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput>
  }

  export type SkillCreateManyCreatedByInputEnvelope = {
    data: SkillCreateManyCreatedByInput | SkillCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedCompaniesInput
    experiences?: ExperienceCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    experiences?: ExperienceUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUpdatedByInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput>
  }

  export type CompanyCreateManyUpdatedByInputEnvelope = {
    data: CompanyCreateManyUpdatedByInput | CompanyCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    updatedBy: UserCreateNestedOneWithoutUpdatedCompaniesInput
    experiences?: ExperienceCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    experiences?: ExperienceUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput>
  }

  export type CompanyCreateManyCreatedByInputEnvelope = {
    data: CompanyCreateManyCreatedByInput | CompanyCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ExperienceCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedExperiencesInput
    skills?: SkillCreateNestedManyWithoutExperiencesInput
    company: CompanyCreateNestedOneWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutExperiencesInput
  }

  export type ExperienceCreateOrConnectWithoutUpdatedByInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput>
  }

  export type ExperienceCreateManyUpdatedByInputEnvelope = {
    data: ExperienceCreateManyUpdatedByInput | ExperienceCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ExperienceCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedExperiencesInput
    skills?: SkillCreateNestedManyWithoutExperiencesInput
    company: CompanyCreateNestedOneWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutExperiencesInput
  }

  export type ExperienceCreateOrConnectWithoutCreatedByInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput>
  }

  export type ExperienceCreateManyCreatedByInputEnvelope = {
    data: ExperienceCreateManyCreatedByInput | ExperienceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedSchoolsInput
    educations?: EducationCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    educations?: EducationUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutUpdatedByInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput>
  }

  export type SchoolCreateManyUpdatedByInputEnvelope = {
    data: SchoolCreateManyUpdatedByInput | SchoolCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    updatedBy: UserCreateNestedOneWithoutUpdatedSchoolsInput
    educations?: EducationCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    educations?: EducationUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutCreatedByInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput>
  }

  export type SchoolCreateManyCreatedByInputEnvelope = {
    data: SchoolCreateManyCreatedByInput | SchoolCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedEducationsInput
    skills?: SkillCreateNestedManyWithoutEducationsInput
    school: SchoolCreateNestedOneWithoutEducationsInput
    courses?: CourseCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutEducationsInput
    courses?: CourseUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationCreateOrConnectWithoutUpdatedByInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput>
  }

  export type EducationCreateManyUpdatedByInputEnvelope = {
    data: EducationCreateManyUpdatedByInput | EducationCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type EducationCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedEducationsInput
    skills?: SkillCreateNestedManyWithoutEducationsInput
    school: SchoolCreateNestedOneWithoutEducationsInput
    courses?: CourseCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutEducationsInput
    courses?: CourseUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationCreateOrConnectWithoutCreatedByInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput>
  }

  export type EducationCreateManyCreatedByInputEnvelope = {
    data: EducationCreateManyCreatedByInput | EducationCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedProfilesInput
  }

  export type ProfileUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type ProfileCreateOrConnectWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProfileCreateManyUpdatedByInputEnvelope = {
    data: ProfileCreateManyUpdatedByInput | ProfileCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    updatedBy: UserCreateNestedOneWithoutUpdatedProfilesInput
  }

  export type ProfileUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type ProfileCreateOrConnectWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput>
  }

  export type ProfileCreateManyCreatedByInputEnvelope = {
    data: ProfileCreateManyCreatedByInput | ProfileCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DetailCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedDetailsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutDetailInput
    project?: ProjectCreateNestedOneWithoutDetailsInput
    skills?: SkillCreateNestedManyWithoutDetailsInput
  }

  export type DetailUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutDetailInput
    skills?: SkillUncheckedCreateNestedManyWithoutDetailsInput
  }

  export type DetailCreateOrConnectWithoutUpdatedByInput = {
    where: DetailWhereUniqueInput
    create: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput>
  }

  export type DetailCreateManyUpdatedByInputEnvelope = {
    data: DetailCreateManyUpdatedByInput | DetailCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type DetailCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedDetailsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutDetailInput
    project?: ProjectCreateNestedOneWithoutDetailsInput
    skills?: SkillCreateNestedManyWithoutDetailsInput
  }

  export type DetailUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutDetailInput
    skills?: SkillUncheckedCreateNestedManyWithoutDetailsInput
  }

  export type DetailCreateOrConnectWithoutCreatedByInput = {
    where: DetailWhereUniqueInput
    create: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput>
  }

  export type DetailCreateManyCreatedByInputEnvelope = {
    data: DetailCreateManyCreatedByInput | DetailCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NestedDetailCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedNestedDetailsInput
    detail: DetailCreateNestedOneWithoutNestedDetailsInput
    project?: ProjectCreateNestedOneWithoutNestedDetailsInput
    skills?: SkillCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailCreateOrConnectWithoutUpdatedByInput = {
    where: NestedDetailWhereUniqueInput
    create: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput>
  }

  export type NestedDetailCreateManyUpdatedByInputEnvelope = {
    data: NestedDetailCreateManyUpdatedByInput | NestedDetailCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type NestedDetailCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedNestedDetailsInput
    detail: DetailCreateNestedOneWithoutNestedDetailsInput
    project?: ProjectCreateNestedOneWithoutNestedDetailsInput
    skills?: SkillCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailCreateOrConnectWithoutCreatedByInput = {
    where: NestedDetailWhereUniqueInput
    create: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput>
  }

  export type NestedDetailCreateManyCreatedByInputEnvelope = {
    data: NestedDetailCreateManyCreatedByInput | NestedDetailCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    education: EducationCreateNestedOneWithoutCoursesInput
    skills?: SkillCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    educationId: string
    visible?: boolean
    description?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutUpdatedByInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput>
  }

  export type CourseCreateManyUpdatedByInputEnvelope = {
    data: CourseCreateManyUpdatedByInput | CourseCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    updatedBy: UserCreateNestedOneWithoutUpdatedCoursesInput
    education: EducationCreateNestedOneWithoutCoursesInput
    skills?: SkillCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    educationId: string
    visible?: boolean
    description?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput>
  }

  export type CourseCreateManyCreatedByInputEnvelope = {
    data: CourseCreateManyCreatedByInput | CourseCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutUpdatedByInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProjectCreateManyUpdatedByInputEnvelope = {
    data: ProjectCreateManyUpdatedByInput | ProjectCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput>
  }

  export type ProjectCreateManyCreatedByInputEnvelope = {
    data: ProjectCreateManyCreatedByInput | ProjectCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type RepositoryCreateWithoutUpdatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedRepositoriesInput
    skills?: SkillCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectUncheckedCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryCreateOrConnectWithoutUpdatedByInput = {
    where: RepositoryWhereUniqueInput
    create: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type RepositoryCreateManyUpdatedByInputEnvelope = {
    data: RepositoryCreateManyUpdatedByInput | RepositoryCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type RepositoryCreateWithoutCreatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    updatedBy: UserCreateNestedOneWithoutUpdatedRepositoriesInput
    skills?: SkillCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutRepositoriesInput
    projects?: ProjectUncheckedCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryCreateOrConnectWithoutCreatedByInput = {
    where: RepositoryWhereUniqueInput
    create: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput>
  }

  export type RepositoryCreateManyCreatedByInputEnvelope = {
    data: RepositoryCreateManyCreatedByInput | RepositoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ResumeCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
    createdBy: UserCreateNestedOneWithoutCreatedResumesInput
  }

  export type ResumeUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type ResumeCreateOrConnectWithoutUpdatedByInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput>
  }

  export type ResumeCreateManyUpdatedByInputEnvelope = {
    data: ResumeCreateManyUpdatedByInput | ResumeCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ResumeCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
    updatedBy: UserCreateNestedOneWithoutUpdatedResumesInput
  }

  export type ResumeUncheckedCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type ResumeCreateOrConnectWithoutCreatedByInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput>
  }

  export type ResumeCreateManyCreatedByInputEnvelope = {
    data: ResumeCreateManyCreatedByInput | ResumeCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SkillUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutUpdatedByInput, SkillUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SkillCreateWithoutUpdatedByInput, SkillUncheckedCreateWithoutUpdatedByInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutUpdatedByInput, SkillUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SkillUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SkillScalarWhereInput = {
    AND?: SkillScalarWhereInput | SkillScalarWhereInput[]
    OR?: SkillScalarWhereInput[]
    NOT?: SkillScalarWhereInput | SkillScalarWhereInput[]
    id?: UuidFilter<"Skill"> | string
    label?: StringFilter<"Skill"> | string
    slug?: StringFilter<"Skill"> | string
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    createdById?: UuidFilter<"Skill"> | string
    updatedAt?: DateTimeFilter<"Skill"> | Date | string
    updatedById?: UuidFilter<"Skill"> | string
    visible?: BoolFilter<"Skill"> | boolean
    description?: StringNullableFilter<"Skill"> | string | null
    categories?: EnumSkillCategoryNullableListFilter<"Skill">
    programmingLanguages?: EnumProgrammingLanguageNullableListFilter<"Skill">
    programmingDomains?: EnumProgrammingDomainNullableListFilter<"Skill">
    experience?: IntNullableFilter<"Skill"> | number | null
    calculatedExperience?: IntFilter<"Skill"> | number
    includeInTopSkills?: BoolFilter<"Skill"> | boolean
  }

  export type SkillUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutCreatedByInput, SkillUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SkillCreateWithoutCreatedByInput, SkillUncheckedCreateWithoutCreatedByInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutCreatedByInput, SkillUncheckedUpdateWithoutCreatedByInput>
  }

  export type SkillUpdateManyWithWhereWithoutCreatedByInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CompanyUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutUpdatedByInput, CompanyUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<CompanyCreateWithoutUpdatedByInput, CompanyUncheckedCreateWithoutUpdatedByInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutUpdatedByInput, CompanyUncheckedUpdateWithoutUpdatedByInput>
  }

  export type CompanyUpdateManyWithWhereWithoutUpdatedByInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: UuidFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    createdById?: UuidFilter<"Company"> | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    updatedById?: UuidFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    shortName?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    logoImageUrl?: StringNullableFilter<"Company"> | string | null
    websiteUrl?: StringNullableFilter<"Company"> | string | null
    city?: StringFilter<"Company"> | string
    state?: StringFilter<"Company"> | string
  }

  export type CompanyUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutCreatedByInput, CompanyUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CompanyCreateWithoutCreatedByInput, CompanyUncheckedCreateWithoutCreatedByInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutCreatedByInput, CompanyUncheckedUpdateWithoutCreatedByInput>
  }

  export type CompanyUpdateManyWithWhereWithoutCreatedByInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ExperienceUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutUpdatedByInput, ExperienceUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ExperienceCreateWithoutUpdatedByInput, ExperienceUncheckedCreateWithoutUpdatedByInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutUpdatedByInput, ExperienceUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ExperienceScalarWhereInput = {
    AND?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    OR?: ExperienceScalarWhereInput[]
    NOT?: ExperienceScalarWhereInput | ExperienceScalarWhereInput[]
    id?: UuidFilter<"Experience"> | string
    createdAt?: DateTimeFilter<"Experience"> | Date | string
    createdById?: UuidFilter<"Experience"> | string
    updatedAt?: DateTimeFilter<"Experience"> | Date | string
    updatedById?: UuidFilter<"Experience"> | string
    startDate?: DateTimeFilter<"Experience"> | Date | string
    endDate?: DateTimeNullableFilter<"Experience"> | Date | string | null
    companyId?: UuidFilter<"Experience"> | string
    title?: StringFilter<"Experience"> | string
    shortTitle?: StringNullableFilter<"Experience"> | string | null
    description?: StringNullableFilter<"Experience"> | string | null
    isRemote?: BoolFilter<"Experience"> | boolean
    visible?: BoolFilter<"Experience"> | boolean
    highlighted?: BoolFilter<"Experience"> | boolean
  }

  export type ExperienceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutCreatedByInput, ExperienceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ExperienceCreateWithoutCreatedByInput, ExperienceUncheckedCreateWithoutCreatedByInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutCreatedByInput, ExperienceUncheckedUpdateWithoutCreatedByInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutCreatedByInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SchoolUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutUpdatedByInput, SchoolUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SchoolCreateWithoutUpdatedByInput, SchoolUncheckedCreateWithoutUpdatedByInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutUpdatedByInput, SchoolUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SchoolUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SchoolScalarWhereInput = {
    AND?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    OR?: SchoolScalarWhereInput[]
    NOT?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    id?: UuidFilter<"School"> | string
    createdAt?: DateTimeFilter<"School"> | Date | string
    createdById?: UuidFilter<"School"> | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    updatedById?: UuidFilter<"School"> | string
    name?: StringFilter<"School"> | string
    shortName?: StringNullableFilter<"School"> | string | null
    description?: StringNullableFilter<"School"> | string | null
    logoImageUrl?: StringNullableFilter<"School"> | string | null
    websiteUrl?: StringNullableFilter<"School"> | string | null
    city?: StringFilter<"School"> | string
    state?: StringFilter<"School"> | string
  }

  export type SchoolUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutCreatedByInput, SchoolUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SchoolCreateWithoutCreatedByInput, SchoolUncheckedCreateWithoutCreatedByInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutCreatedByInput, SchoolUncheckedUpdateWithoutCreatedByInput>
  }

  export type SchoolUpdateManyWithWhereWithoutCreatedByInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EducationUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutUpdatedByInput, EducationUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<EducationCreateWithoutUpdatedByInput, EducationUncheckedCreateWithoutUpdatedByInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutUpdatedByInput, EducationUncheckedUpdateWithoutUpdatedByInput>
  }

  export type EducationUpdateManyWithWhereWithoutUpdatedByInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type EducationScalarWhereInput = {
    AND?: EducationScalarWhereInput | EducationScalarWhereInput[]
    OR?: EducationScalarWhereInput[]
    NOT?: EducationScalarWhereInput | EducationScalarWhereInput[]
    id?: UuidFilter<"Education"> | string
    createdAt?: DateTimeFilter<"Education"> | Date | string
    createdById?: UuidFilter<"Education"> | string
    updatedAt?: DateTimeFilter<"Education"> | Date | string
    updatedById?: UuidFilter<"Education"> | string
    startDate?: DateTimeFilter<"Education"> | Date | string
    endDate?: DateTimeNullableFilter<"Education"> | Date | string | null
    note?: StringNullableFilter<"Education"> | string | null
    degree?: EnumDegreeFilter<"Education"> | $Enums.Degree
    description?: StringNullableFilter<"Education"> | string | null
    major?: StringFilter<"Education"> | string
    shortMajor?: StringNullableFilter<"Education"> | string | null
    minor?: StringNullableFilter<"Education"> | string | null
    concentration?: StringNullableFilter<"Education"> | string | null
    schoolId?: UuidFilter<"Education"> | string
    postPoned?: BoolFilter<"Education"> | boolean
    visible?: BoolFilter<"Education"> | boolean
    highlighted?: BoolFilter<"Education"> | boolean
  }

  export type EducationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutCreatedByInput, EducationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<EducationCreateWithoutCreatedByInput, EducationUncheckedCreateWithoutCreatedByInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutCreatedByInput, EducationUncheckedUpdateWithoutCreatedByInput>
  }

  export type EducationUpdateManyWithWhereWithoutCreatedByInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProfileUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUpdatedByInput, ProfileUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUpdatedByInput, ProfileUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: UuidFilter<"Profile"> | string
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    createdById?: UuidFilter<"Profile"> | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    updatedById?: UuidFilter<"Profile"> | string
    firstName?: StringFilter<"Profile"> | string
    lastName?: StringFilter<"Profile"> | string
    displayName?: StringFilter<"Profile"> | string
    middleName?: StringNullableFilter<"Profile"> | string | null
    profileImageUrl?: StringNullableFilter<"Profile"> | string | null
    emailAddress?: StringFilter<"Profile"> | string
    phoneNumber?: StringNullableFilter<"Profile"> | string | null
    intro?: StringFilter<"Profile"> | string
    tagline?: StringNullableFilter<"Profile"> | string | null
    githubUrl?: StringNullableFilter<"Profile"> | string | null
    linkedinUrl?: StringNullableFilter<"Profile"> | string | null
  }

  export type ProfileUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutCreatedByInput, ProfileUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutCreatedByInput, ProfileUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProfileUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DetailUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: DetailWhereUniqueInput
    update: XOR<DetailUpdateWithoutUpdatedByInput, DetailUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<DetailCreateWithoutUpdatedByInput, DetailUncheckedCreateWithoutUpdatedByInput>
  }

  export type DetailUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: DetailWhereUniqueInput
    data: XOR<DetailUpdateWithoutUpdatedByInput, DetailUncheckedUpdateWithoutUpdatedByInput>
  }

  export type DetailUpdateManyWithWhereWithoutUpdatedByInput = {
    where: DetailScalarWhereInput
    data: XOR<DetailUpdateManyMutationInput, DetailUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type DetailScalarWhereInput = {
    AND?: DetailScalarWhereInput | DetailScalarWhereInput[]
    OR?: DetailScalarWhereInput[]
    NOT?: DetailScalarWhereInput | DetailScalarWhereInput[]
    id?: UuidFilter<"Detail"> | string
    createdAt?: DateTimeFilter<"Detail"> | Date | string
    createdById?: UuidFilter<"Detail"> | string
    updatedAt?: DateTimeFilter<"Detail"> | Date | string
    updatedById?: UuidFilter<"Detail"> | string
    entityId?: UuidFilter<"Detail"> | string
    entityType?: EnumDetailEntityTypeFilter<"Detail"> | $Enums.DetailEntityType
    label?: StringFilter<"Detail"> | string
    description?: StringNullableFilter<"Detail"> | string | null
    shortDescription?: StringNullableFilter<"Detail"> | string | null
    visible?: BoolFilter<"Detail"> | boolean
    projectId?: UuidNullableFilter<"Detail"> | string | null
  }

  export type DetailUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DetailWhereUniqueInput
    update: XOR<DetailUpdateWithoutCreatedByInput, DetailUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DetailCreateWithoutCreatedByInput, DetailUncheckedCreateWithoutCreatedByInput>
  }

  export type DetailUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DetailWhereUniqueInput
    data: XOR<DetailUpdateWithoutCreatedByInput, DetailUncheckedUpdateWithoutCreatedByInput>
  }

  export type DetailUpdateManyWithWhereWithoutCreatedByInput = {
    where: DetailScalarWhereInput
    data: XOR<DetailUpdateManyMutationInput, DetailUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type NestedDetailUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: NestedDetailWhereUniqueInput
    update: XOR<NestedDetailUpdateWithoutUpdatedByInput, NestedDetailUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<NestedDetailCreateWithoutUpdatedByInput, NestedDetailUncheckedCreateWithoutUpdatedByInput>
  }

  export type NestedDetailUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: NestedDetailWhereUniqueInput
    data: XOR<NestedDetailUpdateWithoutUpdatedByInput, NestedDetailUncheckedUpdateWithoutUpdatedByInput>
  }

  export type NestedDetailUpdateManyWithWhereWithoutUpdatedByInput = {
    where: NestedDetailScalarWhereInput
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type NestedDetailScalarWhereInput = {
    AND?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
    OR?: NestedDetailScalarWhereInput[]
    NOT?: NestedDetailScalarWhereInput | NestedDetailScalarWhereInput[]
    id?: UuidFilter<"NestedDetail"> | string
    createdAt?: DateTimeFilter<"NestedDetail"> | Date | string
    createdById?: UuidFilter<"NestedDetail"> | string
    updatedAt?: DateTimeFilter<"NestedDetail"> | Date | string
    updatedById?: UuidFilter<"NestedDetail"> | string
    label?: StringFilter<"NestedDetail"> | string
    description?: StringNullableFilter<"NestedDetail"> | string | null
    shortDescription?: StringNullableFilter<"NestedDetail"> | string | null
    visible?: BoolFilter<"NestedDetail"> | boolean
    detailId?: UuidFilter<"NestedDetail"> | string
    projectId?: UuidNullableFilter<"NestedDetail"> | string | null
  }

  export type NestedDetailUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: NestedDetailWhereUniqueInput
    update: XOR<NestedDetailUpdateWithoutCreatedByInput, NestedDetailUncheckedUpdateWithoutCreatedByInput>
    create: XOR<NestedDetailCreateWithoutCreatedByInput, NestedDetailUncheckedCreateWithoutCreatedByInput>
  }

  export type NestedDetailUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: NestedDetailWhereUniqueInput
    data: XOR<NestedDetailUpdateWithoutCreatedByInput, NestedDetailUncheckedUpdateWithoutCreatedByInput>
  }

  export type NestedDetailUpdateManyWithWhereWithoutCreatedByInput = {
    where: NestedDetailScalarWhereInput
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutUpdatedByInput, CourseUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<CourseCreateWithoutUpdatedByInput, CourseUncheckedCreateWithoutUpdatedByInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutUpdatedByInput, CourseUncheckedUpdateWithoutUpdatedByInput>
  }

  export type CourseUpdateManyWithWhereWithoutUpdatedByInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: UuidFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    shortName?: StringNullableFilter<"Course"> | string | null
    slug?: StringFilter<"Course"> | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    createdById?: UuidFilter<"Course"> | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    updatedById?: UuidFilter<"Course"> | string
    educationId?: UuidFilter<"Course"> | string
    visible?: BoolFilter<"Course"> | boolean
    description?: StringNullableFilter<"Course"> | string | null
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatedByInput, CourseUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatedByInput, CourseUncheckedUpdateWithoutCreatedByInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatedByInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUpdatedByInput, ProjectUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProjectCreateWithoutUpdatedByInput, ProjectUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUpdatedByInput, ProjectUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: UuidFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    shortName?: StringNullableFilter<"Project"> | string | null
    description?: StringFilter<"Project"> | string
    slug?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    createdById?: UuidFilter<"Project"> | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    updatedById?: UuidFilter<"Project"> | string
    startDate?: DateTimeFilter<"Project"> | Date | string
    highlighted?: BoolFilter<"Project"> | boolean
    visible?: BoolFilter<"Project"> | boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutCreatedByInput, ProjectUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutCreatedByInput, ProjectUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProjectUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RepositoryUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: RepositoryWhereUniqueInput
    update: XOR<RepositoryUpdateWithoutUpdatedByInput, RepositoryUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<RepositoryCreateWithoutUpdatedByInput, RepositoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type RepositoryUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: RepositoryWhereUniqueInput
    data: XOR<RepositoryUpdateWithoutUpdatedByInput, RepositoryUncheckedUpdateWithoutUpdatedByInput>
  }

  export type RepositoryUpdateManyWithWhereWithoutUpdatedByInput = {
    where: RepositoryScalarWhereInput
    data: XOR<RepositoryUpdateManyMutationInput, RepositoryUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type RepositoryScalarWhereInput = {
    AND?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
    OR?: RepositoryScalarWhereInput[]
    NOT?: RepositoryScalarWhereInput | RepositoryScalarWhereInput[]
    id?: UuidFilter<"Repository"> | string
    slug?: StringFilter<"Repository"> | string
    description?: StringNullableFilter<"Repository"> | string | null
    createdAt?: DateTimeFilter<"Repository"> | Date | string
    createdById?: UuidFilter<"Repository"> | string
    updatedAt?: DateTimeFilter<"Repository"> | Date | string
    updatedById?: UuidFilter<"Repository"> | string
    visible?: BoolFilter<"Repository"> | boolean
    highlighted?: BoolFilter<"Repository"> | boolean
    startDate?: DateTimeFilter<"Repository"> | Date | string
    npmPackageName?: StringNullableFilter<"Repository"> | string | null
  }

  export type RepositoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RepositoryWhereUniqueInput
    update: XOR<RepositoryUpdateWithoutCreatedByInput, RepositoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RepositoryCreateWithoutCreatedByInput, RepositoryUncheckedCreateWithoutCreatedByInput>
  }

  export type RepositoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RepositoryWhereUniqueInput
    data: XOR<RepositoryUpdateWithoutCreatedByInput, RepositoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type RepositoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: RepositoryScalarWhereInput
    data: XOR<RepositoryUpdateManyMutationInput, RepositoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ResumeUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ResumeWhereUniqueInput
    update: XOR<ResumeUpdateWithoutUpdatedByInput, ResumeUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ResumeCreateWithoutUpdatedByInput, ResumeUncheckedCreateWithoutUpdatedByInput>
  }

  export type ResumeUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ResumeWhereUniqueInput
    data: XOR<ResumeUpdateWithoutUpdatedByInput, ResumeUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ResumeUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ResumeScalarWhereInput
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ResumeScalarWhereInput = {
    AND?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
    OR?: ResumeScalarWhereInput[]
    NOT?: ResumeScalarWhereInput | ResumeScalarWhereInput[]
    id?: UuidFilter<"Resume"> | string
    createdAt?: DateTimeFilter<"Resume"> | Date | string
    createdById?: UuidFilter<"Resume"> | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    updatedById?: UuidFilter<"Resume"> | string
    primary?: BoolFilter<"Resume"> | boolean
    downloadUrl?: StringFilter<"Resume"> | string
    url?: StringFilter<"Resume"> | string
    pathname?: StringFilter<"Resume"> | string
    filename?: StringFilter<"Resume"> | string
    size?: BigIntFilter<"Resume"> | bigint | number
  }

  export type ResumeUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ResumeWhereUniqueInput
    update: XOR<ResumeUpdateWithoutCreatedByInput, ResumeUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ResumeCreateWithoutCreatedByInput, ResumeUncheckedCreateWithoutCreatedByInput>
  }

  export type ResumeUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ResumeWhereUniqueInput
    data: XOR<ResumeUpdateWithoutCreatedByInput, ResumeUncheckedUpdateWithoutCreatedByInput>
  }

  export type ResumeUpdateManyWithWhereWithoutCreatedByInput = {
    where: ResumeScalarWhereInput
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserCreateWithoutCreatedNestedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedNestedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedNestedDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedNestedDetailsInput, UserUncheckedCreateWithoutCreatedNestedDetailsInput>
  }

  export type UserCreateWithoutUpdatedNestedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedNestedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedNestedDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedNestedDetailsInput, UserUncheckedCreateWithoutUpdatedNestedDetailsInput>
  }

  export type DetailCreateWithoutNestedDetailsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedDetailsInput
    project?: ProjectCreateNestedOneWithoutDetailsInput
    skills?: SkillCreateNestedManyWithoutDetailsInput
  }

  export type DetailUncheckedCreateWithoutNestedDetailsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutDetailsInput
  }

  export type DetailCreateOrConnectWithoutNestedDetailsInput = {
    where: DetailWhereUniqueInput
    create: XOR<DetailCreateWithoutNestedDetailsInput, DetailUncheckedCreateWithoutNestedDetailsInput>
  }

  export type ProjectCreateWithoutNestedDetailsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutNestedDetailsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutNestedDetailsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutNestedDetailsInput, ProjectUncheckedCreateWithoutNestedDetailsInput>
  }

  export type SkillCreateWithoutNestedDetailsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutNestedDetailsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutNestedDetailsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput>
  }

  export type UserUpsertWithoutCreatedNestedDetailsInput = {
    update: XOR<UserUpdateWithoutCreatedNestedDetailsInput, UserUncheckedUpdateWithoutCreatedNestedDetailsInput>
    create: XOR<UserCreateWithoutCreatedNestedDetailsInput, UserUncheckedCreateWithoutCreatedNestedDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedNestedDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedNestedDetailsInput, UserUncheckedUpdateWithoutCreatedNestedDetailsInput>
  }

  export type UserUpdateWithoutCreatedNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedNestedDetailsInput = {
    update: XOR<UserUpdateWithoutUpdatedNestedDetailsInput, UserUncheckedUpdateWithoutUpdatedNestedDetailsInput>
    create: XOR<UserCreateWithoutUpdatedNestedDetailsInput, UserUncheckedCreateWithoutUpdatedNestedDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedNestedDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedNestedDetailsInput, UserUncheckedUpdateWithoutUpdatedNestedDetailsInput>
  }

  export type UserUpdateWithoutUpdatedNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type DetailUpsertWithoutNestedDetailsInput = {
    update: XOR<DetailUpdateWithoutNestedDetailsInput, DetailUncheckedUpdateWithoutNestedDetailsInput>
    create: XOR<DetailCreateWithoutNestedDetailsInput, DetailUncheckedCreateWithoutNestedDetailsInput>
    where?: DetailWhereInput
  }

  export type DetailUpdateToOneWithWhereWithoutNestedDetailsInput = {
    where?: DetailWhereInput
    data: XOR<DetailUpdateWithoutNestedDetailsInput, DetailUncheckedUpdateWithoutNestedDetailsInput>
  }

  export type DetailUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput
    project?: ProjectUpdateOneWithoutDetailsNestedInput
    skills?: SkillUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutDetailsNestedInput
  }

  export type ProjectUpsertWithoutNestedDetailsInput = {
    update: XOR<ProjectUpdateWithoutNestedDetailsInput, ProjectUncheckedUpdateWithoutNestedDetailsInput>
    create: XOR<ProjectCreateWithoutNestedDetailsInput, ProjectUncheckedCreateWithoutNestedDetailsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutNestedDetailsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutNestedDetailsInput, ProjectUncheckedUpdateWithoutNestedDetailsInput>
  }

  export type ProjectUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutNestedDetailsInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutNestedDetailsInput, SkillUncheckedUpdateWithoutNestedDetailsInput>
    create: XOR<SkillCreateWithoutNestedDetailsInput, SkillUncheckedCreateWithoutNestedDetailsInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutNestedDetailsInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutNestedDetailsInput, SkillUncheckedUpdateWithoutNestedDetailsInput>
  }

  export type SkillUpdateManyWithWhereWithoutNestedDetailsInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutNestedDetailsInput>
  }

  export type UserCreateWithoutCreatedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedDetailsInput, UserUncheckedCreateWithoutCreatedDetailsInput>
  }

  export type UserCreateWithoutUpdatedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedDetailsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedDetailsInput, UserUncheckedCreateWithoutUpdatedDetailsInput>
  }

  export type NestedDetailCreateWithoutDetailInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedNestedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNestedDetailsInput
    project?: ProjectCreateNestedOneWithoutNestedDetailsInput
    skills?: SkillCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateWithoutDetailInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailCreateOrConnectWithoutDetailInput = {
    where: NestedDetailWhereUniqueInput
    create: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput>
  }

  export type NestedDetailCreateManyDetailInputEnvelope = {
    data: NestedDetailCreateManyDetailInput | NestedDetailCreateManyDetailInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutDetailsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutDetailsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutDetailsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDetailsInput, ProjectUncheckedCreateWithoutDetailsInput>
  }

  export type SkillCreateWithoutDetailsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutDetailsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutDetailsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput>
  }

  export type UserUpsertWithoutCreatedDetailsInput = {
    update: XOR<UserUpdateWithoutCreatedDetailsInput, UserUncheckedUpdateWithoutCreatedDetailsInput>
    create: XOR<UserCreateWithoutCreatedDetailsInput, UserUncheckedCreateWithoutCreatedDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedDetailsInput, UserUncheckedUpdateWithoutCreatedDetailsInput>
  }

  export type UserUpdateWithoutCreatedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedDetailsInput = {
    update: XOR<UserUpdateWithoutUpdatedDetailsInput, UserUncheckedUpdateWithoutUpdatedDetailsInput>
    create: XOR<UserCreateWithoutUpdatedDetailsInput, UserUncheckedCreateWithoutUpdatedDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedDetailsInput, UserUncheckedUpdateWithoutUpdatedDetailsInput>
  }

  export type UserUpdateWithoutUpdatedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type NestedDetailUpsertWithWhereUniqueWithoutDetailInput = {
    where: NestedDetailWhereUniqueInput
    update: XOR<NestedDetailUpdateWithoutDetailInput, NestedDetailUncheckedUpdateWithoutDetailInput>
    create: XOR<NestedDetailCreateWithoutDetailInput, NestedDetailUncheckedCreateWithoutDetailInput>
  }

  export type NestedDetailUpdateWithWhereUniqueWithoutDetailInput = {
    where: NestedDetailWhereUniqueInput
    data: XOR<NestedDetailUpdateWithoutDetailInput, NestedDetailUncheckedUpdateWithoutDetailInput>
  }

  export type NestedDetailUpdateManyWithWhereWithoutDetailInput = {
    where: NestedDetailScalarWhereInput
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyWithoutDetailInput>
  }

  export type ProjectUpsertWithoutDetailsInput = {
    update: XOR<ProjectUpdateWithoutDetailsInput, ProjectUncheckedUpdateWithoutDetailsInput>
    create: XOR<ProjectCreateWithoutDetailsInput, ProjectUncheckedCreateWithoutDetailsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDetailsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDetailsInput, ProjectUncheckedUpdateWithoutDetailsInput>
  }

  export type ProjectUpdateWithoutDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutDetailsInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutDetailsInput, SkillUncheckedUpdateWithoutDetailsInput>
    create: XOR<SkillCreateWithoutDetailsInput, SkillUncheckedCreateWithoutDetailsInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutDetailsInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutDetailsInput, SkillUncheckedUpdateWithoutDetailsInput>
  }

  export type SkillUpdateManyWithWhereWithoutDetailsInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutDetailsInput>
  }

  export type UserCreateWithoutCreatedResumesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedResumesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedResumesInput, UserUncheckedCreateWithoutCreatedResumesInput>
  }

  export type UserCreateWithoutUpdatedResumesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedResumesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedResumesInput, UserUncheckedCreateWithoutUpdatedResumesInput>
  }

  export type UserUpsertWithoutCreatedResumesInput = {
    update: XOR<UserUpdateWithoutCreatedResumesInput, UserUncheckedUpdateWithoutCreatedResumesInput>
    create: XOR<UserCreateWithoutCreatedResumesInput, UserUncheckedCreateWithoutCreatedResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedResumesInput, UserUncheckedUpdateWithoutCreatedResumesInput>
  }

  export type UserUpdateWithoutCreatedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedResumesInput = {
    update: XOR<UserUpdateWithoutUpdatedResumesInput, UserUncheckedUpdateWithoutUpdatedResumesInput>
    create: XOR<UserCreateWithoutUpdatedResumesInput, UserUncheckedCreateWithoutUpdatedResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedResumesInput, UserUncheckedUpdateWithoutUpdatedResumesInput>
  }

  export type UserUpdateWithoutUpdatedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateWithoutCreatedRepositoriesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedRepositoriesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedRepositoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRepositoriesInput, UserUncheckedCreateWithoutCreatedRepositoriesInput>
  }

  export type UserCreateWithoutUpdatedRepositoriesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedRepositoriesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedRepositoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedRepositoriesInput, UserUncheckedCreateWithoutUpdatedRepositoriesInput>
  }

  export type SkillCreateWithoutRepositoriesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutRepositoriesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutRepositoriesInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput>
  }

  export type ProjectCreateWithoutRepositoriesInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    skills?: SkillCreateNestedManyWithoutProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutRepositoriesInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutProjectsInput
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutRepositoriesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput>
  }

  export type UserUpsertWithoutCreatedRepositoriesInput = {
    update: XOR<UserUpdateWithoutCreatedRepositoriesInput, UserUncheckedUpdateWithoutCreatedRepositoriesInput>
    create: XOR<UserCreateWithoutCreatedRepositoriesInput, UserUncheckedCreateWithoutCreatedRepositoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRepositoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRepositoriesInput, UserUncheckedUpdateWithoutCreatedRepositoriesInput>
  }

  export type UserUpdateWithoutCreatedRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedRepositoriesInput = {
    update: XOR<UserUpdateWithoutUpdatedRepositoriesInput, UserUncheckedUpdateWithoutUpdatedRepositoriesInput>
    create: XOR<UserCreateWithoutUpdatedRepositoriesInput, UserUncheckedCreateWithoutUpdatedRepositoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedRepositoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedRepositoriesInput, UserUncheckedUpdateWithoutUpdatedRepositoriesInput>
  }

  export type UserUpdateWithoutUpdatedRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutRepositoriesInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutRepositoriesInput, SkillUncheckedUpdateWithoutRepositoriesInput>
    create: XOR<SkillCreateWithoutRepositoriesInput, SkillUncheckedCreateWithoutRepositoriesInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutRepositoriesInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutRepositoriesInput, SkillUncheckedUpdateWithoutRepositoriesInput>
  }

  export type SkillUpdateManyWithWhereWithoutRepositoriesInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutRepositoriesInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutRepositoriesInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutRepositoriesInput, ProjectUncheckedUpdateWithoutRepositoriesInput>
    create: XOR<ProjectCreateWithoutRepositoriesInput, ProjectUncheckedCreateWithoutRepositoriesInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutRepositoriesInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutRepositoriesInput, ProjectUncheckedUpdateWithoutRepositoriesInput>
  }

  export type ProjectUpdateManyWithWhereWithoutRepositoriesInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutRepositoriesInput>
  }

  export type UserCreateWithoutCreatedSkillsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedSkillsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedSkillsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSkillsInput, UserUncheckedCreateWithoutCreatedSkillsInput>
  }

  export type UserCreateWithoutUpdatedSkillsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedSkillsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedSkillsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedSkillsInput, UserUncheckedCreateWithoutUpdatedSkillsInput>
  }

  export type ExperienceCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedExperiencesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedExperiencesInput
    company: CompanyCreateNestedOneWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ExperienceCreateOrConnectWithoutSkillsInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput>
  }

  export type EducationCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedEducationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEducationsInput
    school: SchoolCreateNestedOneWithoutEducationsInput
    courses?: CourseCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    courses?: CourseUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationCreateOrConnectWithoutSkillsInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput>
  }

  export type CourseCreateWithoutSkillsInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedCoursesInput
    education: EducationCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutSkillsInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    educationId: string
    visible?: boolean
    description?: string | null
  }

  export type CourseCreateOrConnectWithoutSkillsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput>
  }

  export type ProjectCreateWithoutSkillsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedProjectsInput
    details?: DetailCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutProjectInput
    repositories?: RepositoryCreateNestedManyWithoutProjectsInput
  }

  export type ProjectUncheckedCreateWithoutSkillsInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
    details?: DetailUncheckedCreateNestedManyWithoutProjectInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutProjectInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type ProjectCreateOrConnectWithoutSkillsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput>
  }

  export type DetailCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedDetailsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutDetailInput
    project?: ProjectCreateNestedOneWithoutDetailsInput
  }

  export type DetailUncheckedCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutDetailInput
  }

  export type DetailCreateOrConnectWithoutSkillsInput = {
    where: DetailWhereUniqueInput
    create: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput>
  }

  export type NestedDetailCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedNestedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNestedDetailsInput
    detail: DetailCreateNestedOneWithoutNestedDetailsInput
    project?: ProjectCreateNestedOneWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateWithoutSkillsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
  }

  export type NestedDetailCreateOrConnectWithoutSkillsInput = {
    where: NestedDetailWhereUniqueInput
    create: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput>
  }

  export type RepositoryCreateWithoutSkillsInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedRepositoriesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedRepositoriesInput
    projects?: ProjectCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUncheckedCreateWithoutSkillsInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    projects?: ProjectUncheckedCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryCreateOrConnectWithoutSkillsInput = {
    where: RepositoryWhereUniqueInput
    create: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput>
  }

  export type UserUpsertWithoutCreatedSkillsInput = {
    update: XOR<UserUpdateWithoutCreatedSkillsInput, UserUncheckedUpdateWithoutCreatedSkillsInput>
    create: XOR<UserCreateWithoutCreatedSkillsInput, UserUncheckedCreateWithoutCreatedSkillsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSkillsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSkillsInput, UserUncheckedUpdateWithoutCreatedSkillsInput>
  }

  export type UserUpdateWithoutCreatedSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedSkillsInput = {
    update: XOR<UserUpdateWithoutUpdatedSkillsInput, UserUncheckedUpdateWithoutUpdatedSkillsInput>
    create: XOR<UserCreateWithoutUpdatedSkillsInput, UserUncheckedCreateWithoutUpdatedSkillsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedSkillsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedSkillsInput, UserUncheckedUpdateWithoutUpdatedSkillsInput>
  }

  export type UserUpdateWithoutUpdatedSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ExperienceUpsertWithWhereUniqueWithoutSkillsInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutSkillsInput, ExperienceUncheckedUpdateWithoutSkillsInput>
    create: XOR<ExperienceCreateWithoutSkillsInput, ExperienceUncheckedCreateWithoutSkillsInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutSkillsInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutSkillsInput, ExperienceUncheckedUpdateWithoutSkillsInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutSkillsInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutSkillsInput>
  }

  export type EducationUpsertWithWhereUniqueWithoutSkillsInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutSkillsInput, EducationUncheckedUpdateWithoutSkillsInput>
    create: XOR<EducationCreateWithoutSkillsInput, EducationUncheckedCreateWithoutSkillsInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutSkillsInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutSkillsInput, EducationUncheckedUpdateWithoutSkillsInput>
  }

  export type EducationUpdateManyWithWhereWithoutSkillsInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutSkillsInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutSkillsInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutSkillsInput, CourseUncheckedUpdateWithoutSkillsInput>
    create: XOR<CourseCreateWithoutSkillsInput, CourseUncheckedCreateWithoutSkillsInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutSkillsInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutSkillsInput, CourseUncheckedUpdateWithoutSkillsInput>
  }

  export type CourseUpdateManyWithWhereWithoutSkillsInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutSkillsInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutSkillsInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutSkillsInput, ProjectUncheckedUpdateWithoutSkillsInput>
    create: XOR<ProjectCreateWithoutSkillsInput, ProjectUncheckedCreateWithoutSkillsInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutSkillsInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutSkillsInput, ProjectUncheckedUpdateWithoutSkillsInput>
  }

  export type ProjectUpdateManyWithWhereWithoutSkillsInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutSkillsInput>
  }

  export type DetailUpsertWithWhereUniqueWithoutSkillsInput = {
    where: DetailWhereUniqueInput
    update: XOR<DetailUpdateWithoutSkillsInput, DetailUncheckedUpdateWithoutSkillsInput>
    create: XOR<DetailCreateWithoutSkillsInput, DetailUncheckedCreateWithoutSkillsInput>
  }

  export type DetailUpdateWithWhereUniqueWithoutSkillsInput = {
    where: DetailWhereUniqueInput
    data: XOR<DetailUpdateWithoutSkillsInput, DetailUncheckedUpdateWithoutSkillsInput>
  }

  export type DetailUpdateManyWithWhereWithoutSkillsInput = {
    where: DetailScalarWhereInput
    data: XOR<DetailUpdateManyMutationInput, DetailUncheckedUpdateManyWithoutSkillsInput>
  }

  export type NestedDetailUpsertWithWhereUniqueWithoutSkillsInput = {
    where: NestedDetailWhereUniqueInput
    update: XOR<NestedDetailUpdateWithoutSkillsInput, NestedDetailUncheckedUpdateWithoutSkillsInput>
    create: XOR<NestedDetailCreateWithoutSkillsInput, NestedDetailUncheckedCreateWithoutSkillsInput>
  }

  export type NestedDetailUpdateWithWhereUniqueWithoutSkillsInput = {
    where: NestedDetailWhereUniqueInput
    data: XOR<NestedDetailUpdateWithoutSkillsInput, NestedDetailUncheckedUpdateWithoutSkillsInput>
  }

  export type NestedDetailUpdateManyWithWhereWithoutSkillsInput = {
    where: NestedDetailScalarWhereInput
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyWithoutSkillsInput>
  }

  export type RepositoryUpsertWithWhereUniqueWithoutSkillsInput = {
    where: RepositoryWhereUniqueInput
    update: XOR<RepositoryUpdateWithoutSkillsInput, RepositoryUncheckedUpdateWithoutSkillsInput>
    create: XOR<RepositoryCreateWithoutSkillsInput, RepositoryUncheckedCreateWithoutSkillsInput>
  }

  export type RepositoryUpdateWithWhereUniqueWithoutSkillsInput = {
    where: RepositoryWhereUniqueInput
    data: XOR<RepositoryUpdateWithoutSkillsInput, RepositoryUncheckedUpdateWithoutSkillsInput>
  }

  export type RepositoryUpdateManyWithWhereWithoutSkillsInput = {
    where: RepositoryScalarWhereInput
    data: XOR<RepositoryUpdateManyMutationInput, RepositoryUncheckedUpdateManyWithoutSkillsInput>
  }

  export type UserCreateWithoutCreatedCoursesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedCoursesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
  }

  export type UserCreateWithoutUpdatedCoursesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedCoursesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedCoursesInput, UserUncheckedCreateWithoutUpdatedCoursesInput>
  }

  export type EducationCreateWithoutCoursesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedEducationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEducationsInput
    skills?: SkillCreateNestedManyWithoutEducationsInput
    school: SchoolCreateNestedOneWithoutEducationsInput
  }

  export type EducationUncheckedCreateWithoutCoursesInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutEducationsInput
  }

  export type EducationCreateOrConnectWithoutCoursesInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutCoursesInput, EducationUncheckedCreateWithoutCoursesInput>
  }

  export type SkillCreateWithoutCoursesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutCoursesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutCoursesInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput>
  }

  export type UserUpsertWithoutCreatedCoursesInput = {
    update: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedCoursesInput = {
    update: XOR<UserUpdateWithoutUpdatedCoursesInput, UserUncheckedUpdateWithoutUpdatedCoursesInput>
    create: XOR<UserCreateWithoutUpdatedCoursesInput, UserUncheckedCreateWithoutUpdatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedCoursesInput, UserUncheckedUpdateWithoutUpdatedCoursesInput>
  }

  export type UserUpdateWithoutUpdatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type EducationUpsertWithoutCoursesInput = {
    update: XOR<EducationUpdateWithoutCoursesInput, EducationUncheckedUpdateWithoutCoursesInput>
    create: XOR<EducationCreateWithoutCoursesInput, EducationUncheckedCreateWithoutCoursesInput>
    where?: EducationWhereInput
  }

  export type EducationUpdateToOneWithWhereWithoutCoursesInput = {
    where?: EducationWhereInput
    data: XOR<EducationUpdateWithoutCoursesInput, EducationUncheckedUpdateWithoutCoursesInput>
  }

  export type EducationUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedEducationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput
    skills?: SkillUpdateManyWithoutEducationsNestedInput
    school?: SchoolUpdateOneRequiredWithoutEducationsNestedInput
  }

  export type EducationUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutEducationsNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutCoursesInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutCoursesInput, SkillUncheckedUpdateWithoutCoursesInput>
    create: XOR<SkillCreateWithoutCoursesInput, SkillUncheckedCreateWithoutCoursesInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutCoursesInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutCoursesInput, SkillUncheckedUpdateWithoutCoursesInput>
  }

  export type SkillUpdateManyWithWhereWithoutCoursesInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutCoursesInput>
  }

  export type UserCreateWithoutCreatedProjectsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedProjectsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
  }

  export type UserCreateWithoutUpdatedProjectsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedProjectsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
  }

  export type SkillCreateWithoutProjectsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutProjectsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutProjectsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput>
  }

  export type DetailCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedDetailsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutDetailInput
    skills?: SkillCreateNestedManyWithoutDetailsInput
  }

  export type DetailUncheckedCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutDetailInput
    skills?: SkillUncheckedCreateNestedManyWithoutDetailsInput
  }

  export type DetailCreateOrConnectWithoutProjectInput = {
    where: DetailWhereUniqueInput
    create: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput>
  }

  export type DetailCreateManyProjectInputEnvelope = {
    data: DetailCreateManyProjectInput | DetailCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type NestedDetailCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedNestedDetailsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedNestedDetailsInput
    detail: DetailCreateNestedOneWithoutNestedDetailsInput
    skills?: SkillCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailUncheckedCreateWithoutProjectInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    skills?: SkillUncheckedCreateNestedManyWithoutNestedDetailsInput
  }

  export type NestedDetailCreateOrConnectWithoutProjectInput = {
    where: NestedDetailWhereUniqueInput
    create: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput>
  }

  export type NestedDetailCreateManyProjectInputEnvelope = {
    data: NestedDetailCreateManyProjectInput | NestedDetailCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type RepositoryCreateWithoutProjectsInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedRepositoriesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedRepositoriesInput
    skills?: SkillCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryUncheckedCreateWithoutProjectsInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutRepositoriesInput
  }

  export type RepositoryCreateOrConnectWithoutProjectsInput = {
    where: RepositoryWhereUniqueInput
    create: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpsertWithoutCreatedProjectsInput = {
    update: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedProjectsInput = {
    update: XOR<UserUpdateWithoutUpdatedProjectsInput, UserUncheckedUpdateWithoutUpdatedProjectsInput>
    create: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProjectsInput, UserUncheckedUpdateWithoutUpdatedProjectsInput>
  }

  export type UserUpdateWithoutUpdatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutProjectsInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutProjectsInput, SkillUncheckedUpdateWithoutProjectsInput>
    create: XOR<SkillCreateWithoutProjectsInput, SkillUncheckedCreateWithoutProjectsInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutProjectsInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutProjectsInput, SkillUncheckedUpdateWithoutProjectsInput>
  }

  export type SkillUpdateManyWithWhereWithoutProjectsInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutProjectsInput>
  }

  export type DetailUpsertWithWhereUniqueWithoutProjectInput = {
    where: DetailWhereUniqueInput
    update: XOR<DetailUpdateWithoutProjectInput, DetailUncheckedUpdateWithoutProjectInput>
    create: XOR<DetailCreateWithoutProjectInput, DetailUncheckedCreateWithoutProjectInput>
  }

  export type DetailUpdateWithWhereUniqueWithoutProjectInput = {
    where: DetailWhereUniqueInput
    data: XOR<DetailUpdateWithoutProjectInput, DetailUncheckedUpdateWithoutProjectInput>
  }

  export type DetailUpdateManyWithWhereWithoutProjectInput = {
    where: DetailScalarWhereInput
    data: XOR<DetailUpdateManyMutationInput, DetailUncheckedUpdateManyWithoutProjectInput>
  }

  export type NestedDetailUpsertWithWhereUniqueWithoutProjectInput = {
    where: NestedDetailWhereUniqueInput
    update: XOR<NestedDetailUpdateWithoutProjectInput, NestedDetailUncheckedUpdateWithoutProjectInput>
    create: XOR<NestedDetailCreateWithoutProjectInput, NestedDetailUncheckedCreateWithoutProjectInput>
  }

  export type NestedDetailUpdateWithWhereUniqueWithoutProjectInput = {
    where: NestedDetailWhereUniqueInput
    data: XOR<NestedDetailUpdateWithoutProjectInput, NestedDetailUncheckedUpdateWithoutProjectInput>
  }

  export type NestedDetailUpdateManyWithWhereWithoutProjectInput = {
    where: NestedDetailScalarWhereInput
    data: XOR<NestedDetailUpdateManyMutationInput, NestedDetailUncheckedUpdateManyWithoutProjectInput>
  }

  export type RepositoryUpsertWithWhereUniqueWithoutProjectsInput = {
    where: RepositoryWhereUniqueInput
    update: XOR<RepositoryUpdateWithoutProjectsInput, RepositoryUncheckedUpdateWithoutProjectsInput>
    create: XOR<RepositoryCreateWithoutProjectsInput, RepositoryUncheckedCreateWithoutProjectsInput>
  }

  export type RepositoryUpdateWithWhereUniqueWithoutProjectsInput = {
    where: RepositoryWhereUniqueInput
    data: XOR<RepositoryUpdateWithoutProjectsInput, RepositoryUncheckedUpdateWithoutProjectsInput>
  }

  export type RepositoryUpdateManyWithWhereWithoutProjectsInput = {
    where: RepositoryScalarWhereInput
    data: XOR<RepositoryUpdateManyMutationInput, RepositoryUncheckedUpdateManyWithoutProjectsInput>
  }

  export type UserCreateWithoutCreatedCompaniesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedCompaniesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedCompaniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCompaniesInput, UserUncheckedCreateWithoutCreatedCompaniesInput>
  }

  export type UserCreateWithoutUpdatedCompaniesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedCompaniesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedCompaniesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedCompaniesInput, UserUncheckedCreateWithoutUpdatedCompaniesInput>
  }

  export type ExperienceCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedExperiencesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedExperiencesInput
    skills?: SkillCreateNestedManyWithoutExperiencesInput
  }

  export type ExperienceUncheckedCreateWithoutCompanyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutExperiencesInput
  }

  export type ExperienceCreateOrConnectWithoutCompanyInput = {
    where: ExperienceWhereUniqueInput
    create: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput>
  }

  export type ExperienceCreateManyCompanyInputEnvelope = {
    data: ExperienceCreateManyCompanyInput | ExperienceCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedCompaniesInput = {
    update: XOR<UserUpdateWithoutCreatedCompaniesInput, UserUncheckedUpdateWithoutCreatedCompaniesInput>
    create: XOR<UserCreateWithoutCreatedCompaniesInput, UserUncheckedCreateWithoutCreatedCompaniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCompaniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCompaniesInput, UserUncheckedUpdateWithoutCreatedCompaniesInput>
  }

  export type UserUpdateWithoutCreatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedCompaniesInput = {
    update: XOR<UserUpdateWithoutUpdatedCompaniesInput, UserUncheckedUpdateWithoutUpdatedCompaniesInput>
    create: XOR<UserCreateWithoutUpdatedCompaniesInput, UserUncheckedCreateWithoutUpdatedCompaniesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedCompaniesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedCompaniesInput, UserUncheckedUpdateWithoutUpdatedCompaniesInput>
  }

  export type UserUpdateWithoutUpdatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ExperienceUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ExperienceWhereUniqueInput
    update: XOR<ExperienceUpdateWithoutCompanyInput, ExperienceUncheckedUpdateWithoutCompanyInput>
    create: XOR<ExperienceCreateWithoutCompanyInput, ExperienceUncheckedCreateWithoutCompanyInput>
  }

  export type ExperienceUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ExperienceWhereUniqueInput
    data: XOR<ExperienceUpdateWithoutCompanyInput, ExperienceUncheckedUpdateWithoutCompanyInput>
  }

  export type ExperienceUpdateManyWithWhereWithoutCompanyInput = {
    where: ExperienceScalarWhereInput
    data: XOR<ExperienceUpdateManyMutationInput, ExperienceUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserCreateWithoutCreatedSchoolsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedSchoolsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedSchoolsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedSchoolsInput, UserUncheckedCreateWithoutCreatedSchoolsInput>
  }

  export type UserCreateWithoutUpdatedSchoolsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedSchoolsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedSchoolsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedSchoolsInput, UserUncheckedCreateWithoutUpdatedSchoolsInput>
  }

  export type EducationCreateWithoutSchoolInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedEducationsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEducationsInput
    skills?: SkillCreateNestedManyWithoutEducationsInput
    courses?: CourseCreateNestedManyWithoutEducationInput
  }

  export type EducationUncheckedCreateWithoutSchoolInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
    skills?: SkillUncheckedCreateNestedManyWithoutEducationsInput
    courses?: CourseUncheckedCreateNestedManyWithoutEducationInput
  }

  export type EducationCreateOrConnectWithoutSchoolInput = {
    where: EducationWhereUniqueInput
    create: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput>
  }

  export type EducationCreateManySchoolInputEnvelope = {
    data: EducationCreateManySchoolInput | EducationCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedSchoolsInput = {
    update: XOR<UserUpdateWithoutCreatedSchoolsInput, UserUncheckedUpdateWithoutCreatedSchoolsInput>
    create: XOR<UserCreateWithoutCreatedSchoolsInput, UserUncheckedCreateWithoutCreatedSchoolsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedSchoolsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedSchoolsInput, UserUncheckedUpdateWithoutCreatedSchoolsInput>
  }

  export type UserUpdateWithoutCreatedSchoolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedSchoolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedSchoolsInput = {
    update: XOR<UserUpdateWithoutUpdatedSchoolsInput, UserUncheckedUpdateWithoutUpdatedSchoolsInput>
    create: XOR<UserCreateWithoutUpdatedSchoolsInput, UserUncheckedCreateWithoutUpdatedSchoolsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedSchoolsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedSchoolsInput, UserUncheckedUpdateWithoutUpdatedSchoolsInput>
  }

  export type UserUpdateWithoutUpdatedSchoolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedSchoolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type EducationUpsertWithWhereUniqueWithoutSchoolInput = {
    where: EducationWhereUniqueInput
    update: XOR<EducationUpdateWithoutSchoolInput, EducationUncheckedUpdateWithoutSchoolInput>
    create: XOR<EducationCreateWithoutSchoolInput, EducationUncheckedCreateWithoutSchoolInput>
  }

  export type EducationUpdateWithWhereUniqueWithoutSchoolInput = {
    where: EducationWhereUniqueInput
    data: XOR<EducationUpdateWithoutSchoolInput, EducationUncheckedUpdateWithoutSchoolInput>
  }

  export type EducationUpdateManyWithWhereWithoutSchoolInput = {
    where: EducationScalarWhereInput
    data: XOR<EducationUpdateManyMutationInput, EducationUncheckedUpdateManyWithoutSchoolInput>
  }

  export type UserCreateWithoutCreatedExperiencesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedExperiencesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedExperiencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedExperiencesInput, UserUncheckedCreateWithoutCreatedExperiencesInput>
  }

  export type UserCreateWithoutUpdatedExperiencesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedExperiencesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedExperiencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedExperiencesInput, UserUncheckedCreateWithoutUpdatedExperiencesInput>
  }

  export type SkillCreateWithoutExperiencesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    educations?: EducationCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutExperiencesInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    educations?: EducationUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutExperiencesInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput>
  }

  export type CompanyCreateWithoutExperiencesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedCompaniesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedCompaniesInput
  }

  export type CompanyUncheckedCreateWithoutExperiencesInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type CompanyCreateOrConnectWithoutExperiencesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutExperiencesInput, CompanyUncheckedCreateWithoutExperiencesInput>
  }

  export type UserUpsertWithoutCreatedExperiencesInput = {
    update: XOR<UserUpdateWithoutCreatedExperiencesInput, UserUncheckedUpdateWithoutCreatedExperiencesInput>
    create: XOR<UserCreateWithoutCreatedExperiencesInput, UserUncheckedCreateWithoutCreatedExperiencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedExperiencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedExperiencesInput, UserUncheckedUpdateWithoutCreatedExperiencesInput>
  }

  export type UserUpdateWithoutCreatedExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedExperiencesInput = {
    update: XOR<UserUpdateWithoutUpdatedExperiencesInput, UserUncheckedUpdateWithoutUpdatedExperiencesInput>
    create: XOR<UserCreateWithoutUpdatedExperiencesInput, UserUncheckedCreateWithoutUpdatedExperiencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedExperiencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedExperiencesInput, UserUncheckedUpdateWithoutUpdatedExperiencesInput>
  }

  export type UserUpdateWithoutUpdatedExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutExperiencesInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutExperiencesInput, SkillUncheckedUpdateWithoutExperiencesInput>
    create: XOR<SkillCreateWithoutExperiencesInput, SkillUncheckedCreateWithoutExperiencesInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutExperiencesInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutExperiencesInput, SkillUncheckedUpdateWithoutExperiencesInput>
  }

  export type SkillUpdateManyWithWhereWithoutExperiencesInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutExperiencesInput>
  }

  export type CompanyUpsertWithoutExperiencesInput = {
    update: XOR<CompanyUpdateWithoutExperiencesInput, CompanyUncheckedUpdateWithoutExperiencesInput>
    create: XOR<CompanyCreateWithoutExperiencesInput, CompanyUncheckedCreateWithoutExperiencesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutExperiencesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutExperiencesInput, CompanyUncheckedUpdateWithoutExperiencesInput>
  }

  export type CompanyUpdateWithoutExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCompaniesNestedInput
  }

  export type CompanyUncheckedUpdateWithoutExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutCreatedEducationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedEducationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedEducationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEducationsInput, UserUncheckedCreateWithoutCreatedEducationsInput>
  }

  export type UserCreateWithoutUpdatedEducationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedEducationsInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedEducationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedEducationsInput, UserUncheckedCreateWithoutUpdatedEducationsInput>
  }

  export type SkillCreateWithoutEducationsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    createdBy: UserCreateNestedOneWithoutCreatedSkillsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSkillsInput
    experiences?: ExperienceCreateNestedManyWithoutSkillsInput
    courses?: CourseCreateNestedManyWithoutSkillsInput
    projects?: ProjectCreateNestedManyWithoutSkillsInput
    details?: DetailCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryCreateNestedManyWithoutSkillsInput
  }

  export type SkillUncheckedCreateWithoutEducationsInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
    experiences?: ExperienceUncheckedCreateNestedManyWithoutSkillsInput
    courses?: CourseUncheckedCreateNestedManyWithoutSkillsInput
    projects?: ProjectUncheckedCreateNestedManyWithoutSkillsInput
    details?: DetailUncheckedCreateNestedManyWithoutSkillsInput
    nestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutSkillsInput
    repositories?: RepositoryUncheckedCreateNestedManyWithoutSkillsInput
  }

  export type SkillCreateOrConnectWithoutEducationsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput>
  }

  export type SchoolCreateWithoutEducationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
    createdBy: UserCreateNestedOneWithoutCreatedSchoolsInput
    updatedBy: UserCreateNestedOneWithoutUpdatedSchoolsInput
  }

  export type SchoolUncheckedCreateWithoutEducationsInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type SchoolCreateOrConnectWithoutEducationsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutEducationsInput, SchoolUncheckedCreateWithoutEducationsInput>
  }

  export type CourseCreateWithoutEducationInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedCoursesInput
    skills?: SkillCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutEducationInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    skills?: SkillUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutEducationInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput>
  }

  export type CourseCreateManyEducationInputEnvelope = {
    data: CourseCreateManyEducationInput | CourseCreateManyEducationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedEducationsInput = {
    update: XOR<UserUpdateWithoutCreatedEducationsInput, UserUncheckedUpdateWithoutCreatedEducationsInput>
    create: XOR<UserCreateWithoutCreatedEducationsInput, UserUncheckedCreateWithoutCreatedEducationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEducationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEducationsInput, UserUncheckedUpdateWithoutCreatedEducationsInput>
  }

  export type UserUpdateWithoutCreatedEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedEducationsInput = {
    update: XOR<UserUpdateWithoutUpdatedEducationsInput, UserUncheckedUpdateWithoutUpdatedEducationsInput>
    create: XOR<UserCreateWithoutUpdatedEducationsInput, UserUncheckedCreateWithoutUpdatedEducationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedEducationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedEducationsInput, UserUncheckedUpdateWithoutUpdatedEducationsInput>
  }

  export type UserUpdateWithoutUpdatedEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SkillUpsertWithWhereUniqueWithoutEducationsInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutEducationsInput, SkillUncheckedUpdateWithoutEducationsInput>
    create: XOR<SkillCreateWithoutEducationsInput, SkillUncheckedCreateWithoutEducationsInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutEducationsInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutEducationsInput, SkillUncheckedUpdateWithoutEducationsInput>
  }

  export type SkillUpdateManyWithWhereWithoutEducationsInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutEducationsInput>
  }

  export type SchoolUpsertWithoutEducationsInput = {
    update: XOR<SchoolUpdateWithoutEducationsInput, SchoolUncheckedUpdateWithoutEducationsInput>
    create: XOR<SchoolCreateWithoutEducationsInput, SchoolUncheckedCreateWithoutEducationsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutEducationsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutEducationsInput, SchoolUncheckedUpdateWithoutEducationsInput>
  }

  export type SchoolUpdateWithoutEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSchoolsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSchoolsNestedInput
  }

  export type SchoolUncheckedUpdateWithoutEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpsertWithWhereUniqueWithoutEducationInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutEducationInput, CourseUncheckedUpdateWithoutEducationInput>
    create: XOR<CourseCreateWithoutEducationInput, CourseUncheckedCreateWithoutEducationInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutEducationInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutEducationInput, CourseUncheckedUpdateWithoutEducationInput>
  }

  export type CourseUpdateManyWithWhereWithoutEducationInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutEducationInput>
  }

  export type UserCreateWithoutCreatedProfilesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileCreateNestedManyWithoutUpdatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedProfilesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProfiles?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProfilesInput, UserUncheckedCreateWithoutCreatedProfilesInput>
  }

  export type UserCreateWithoutUpdatedProfilesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationCreateNestedManyWithoutCreatedByInput
    createdProfiles?: ProfileCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedProfilesInput = {
    id?: string
    clerkId: string
    firstName: string
    lastName: string
    profileImageUrl?: string | null
    emailAddress: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedSkills?: SkillUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSkills?: SkillUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCompanies?: CompanyUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCompanies?: CompanyUncheckedCreateNestedManyWithoutCreatedByInput
    updatedExperiences?: ExperienceUncheckedCreateNestedManyWithoutUpdatedByInput
    createdExperiences?: ExperienceUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchools?: SchoolUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchools?: SchoolUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEducations?: EducationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdEducations?: EducationUncheckedCreateNestedManyWithoutCreatedByInput
    createdProfiles?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDetails?: DetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdDetails?: DetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNestedDetails?: NestedDetailUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCourses?: CourseUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRepositories?: RepositoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRepositories?: RepositoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedResumes?: ResumeUncheckedCreateNestedManyWithoutUpdatedByInput
    createdResumes?: ResumeUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProfilesInput, UserUncheckedCreateWithoutUpdatedProfilesInput>
  }

  export type UserUpsertWithoutCreatedProfilesInput = {
    update: XOR<UserUpdateWithoutCreatedProfilesInput, UserUncheckedUpdateWithoutCreatedProfilesInput>
    create: XOR<UserCreateWithoutCreatedProfilesInput, UserUncheckedCreateWithoutCreatedProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProfilesInput, UserUncheckedUpdateWithoutCreatedProfilesInput>
  }

  export type UserUpdateWithoutCreatedProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUpdateManyWithoutUpdatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProfiles?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedProfilesInput = {
    update: XOR<UserUpdateWithoutUpdatedProfilesInput, UserUncheckedUpdateWithoutUpdatedProfilesInput>
    create: XOR<UserCreateWithoutUpdatedProfilesInput, UserUncheckedCreateWithoutUpdatedProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedProfilesInput, UserUncheckedUpdateWithoutUpdatedProfilesInput>
  }

  export type UserUpdateWithoutUpdatedProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUpdateManyWithoutCreatedByNestedInput
    createdProfiles?: ProfileUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedSkills?: SkillUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSkills?: SkillUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCompanies?: CompanyUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCompanies?: CompanyUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedExperiences?: ExperienceUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdExperiences?: ExperienceUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchools?: SchoolUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchools?: SchoolUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEducations?: EducationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdEducations?: EducationUncheckedUpdateManyWithoutCreatedByNestedInput
    createdProfiles?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDetails?: DetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdDetails?: DetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNestedDetails?: NestedDetailUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNestedDetails?: NestedDetailUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCourses?: CourseUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRepositories?: RepositoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRepositories?: RepositoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedResumes?: ResumeUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdResumes?: ResumeUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type SkillCreateManyUpdatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
  }

  export type SkillCreateManyCreatedByInput = {
    id?: string
    label: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
    categories?: SkillCreatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillCreateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillCreateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: number | null
    calculatedExperience: number
    includeInTopSkills?: boolean
  }

  export type CompanyCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type CompanyCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type ExperienceCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ExperienceCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    companyId: string
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type SchoolCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type SchoolCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    name: string
    shortName?: string | null
    description?: string | null
    logoImageUrl?: string | null
    websiteUrl?: string | null
    city: string
    state: string
  }

  export type EducationCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type EducationCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    schoolId: string
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ProfileCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type ProfileCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    firstName: string
    lastName: string
    displayName: string
    middleName?: string | null
    profileImageUrl?: string | null
    emailAddress: string
    phoneNumber?: string | null
    intro: string
    tagline?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
  }

  export type DetailCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
  }

  export type DetailCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
  }

  export type NestedDetailCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
  }

  export type NestedDetailCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
    projectId?: string | null
  }

  export type CourseCreateManyUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    educationId: string
    visible?: boolean
    description?: string | null
  }

  export type CourseCreateManyCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    educationId: string
    visible?: boolean
    description?: string | null
  }

  export type ProjectCreateManyUpdatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
  }

  export type ProjectCreateManyCreatedByInput = {
    id?: string
    name: string
    shortName?: string | null
    description: string
    slug: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    highlighted?: boolean
    visible?: boolean
  }

  export type RepositoryCreateManyUpdatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
  }

  export type RepositoryCreateManyCreatedByInput = {
    id?: string
    slug: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    highlighted?: boolean
    startDate: Date | string
    npmPackageName?: string | null
  }

  export type ResumeCreateManyUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type ResumeCreateManyCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    primary?: boolean
    downloadUrl: string
    url: string
    pathname: string
    filename: string
    size: bigint | number
  }

  export type SkillUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCompaniesNestedInput
    experiences?: ExperienceUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    experiences?: ExperienceUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCompaniesNestedInput
    experiences?: ExperienceUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    experiences?: ExperienceUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ExperienceUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedExperiencesNestedInput
    skills?: SkillUpdateManyWithoutExperiencesNestedInput
    company?: CompanyUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExperienceUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedExperiencesNestedInput
    skills?: SkillUpdateManyWithoutExperiencesNestedInput
    company?: CompanyUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SchoolUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedSchoolsNestedInput
    educations?: EducationUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    educations?: EducationUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSchoolsNestedInput
    educations?: EducationUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    educations?: EducationUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    logoImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type EducationUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedEducationsNestedInput
    skills?: SkillUpdateManyWithoutEducationsNestedInput
    school?: SchoolUpdateOneRequiredWithoutEducationsNestedInput
    courses?: CourseUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutEducationsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EducationUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput
    skills?: SkillUpdateManyWithoutEducationsNestedInput
    school?: SchoolUpdateOneRequiredWithoutEducationsNestedInput
    courses?: CourseUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutEducationsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfileUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProfilesNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    profileImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    emailAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    intro?: StringFieldUpdateOperationsInput | string
    tagline?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetailUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedDetailsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutDetailNestedInput
    project?: ProjectUpdateOneWithoutDetailsNestedInput
    skills?: SkillUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutDetailNestedInput
    skills?: SkillUncheckedUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetailUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutDetailNestedInput
    project?: ProjectUpdateOneWithoutDetailsNestedInput
    skills?: SkillUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutDetailNestedInput
    skills?: SkillUncheckedUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NestedDetailUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput
    detail?: DetailUpdateOneRequiredWithoutNestedDetailsNestedInput
    project?: ProjectUpdateOneWithoutNestedDetailsNestedInput
    skills?: SkillUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NestedDetailUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput
    detail?: DetailUpdateOneRequiredWithoutNestedDetailsNestedInput
    project?: ProjectUpdateOneWithoutNestedDetailsNestedInput
    skills?: SkillUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    education?: EducationUpdateOneRequiredWithoutCoursesNestedInput
    skills?: SkillUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCoursesNestedInput
    education?: EducationUpdateOneRequiredWithoutCoursesNestedInput
    skills?: SkillUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RepositoryUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesNestedInput
    skills?: SkillUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RepositoryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedRepositoriesNestedInput
    skills?: SkillUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutRepositoriesNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResumeUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    createdBy?: UserUpdateOneRequiredWithoutCreatedResumesNestedInput
  }

  export type ResumeUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResumeUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResumeUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedResumesNestedInput
  }

  export type ResumeUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResumeUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    downloadUrl?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    pathname?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    size?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type SkillUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutNestedDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NestedDetailCreateManyDetailInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    projectId?: string | null
  }

  export type NestedDetailUpdateWithoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput
    project?: ProjectUpdateOneWithoutNestedDetailsNestedInput
    skills?: SkillUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateWithoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateManyWithoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillUpdateWithoutDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillUpdateWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUpdateWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    skills?: SkillUpdateManyWithoutProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutProjectsNestedInput
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutRepositoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExperienceUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedExperiencesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedExperiencesNestedInput
    company?: CompanyUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExperienceUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EducationUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedEducationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput
    school?: SchoolUpdateOneRequiredWithoutEducationsNestedInput
    courses?: CourseUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    courses?: CourseUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    schoolId?: StringFieldUpdateOperationsInput | string
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCoursesNestedInput
    education?: EducationUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    educationId?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedProjectsNestedInput
    details?: DetailUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    details?: DetailUncheckedUpdateManyWithoutProjectNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutProjectNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DetailUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutDetailNestedInput
    project?: ProjectUpdateOneWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutDetailNestedInput
  }

  export type DetailUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NestedDetailUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput
    detail?: DetailUpdateOneRequiredWithoutNestedDetailsNestedInput
    project?: ProjectUpdateOneWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NestedDetailUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RepositoryUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedRepositoriesNestedInput
    projects?: ProjectUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    projects?: ProjectUncheckedUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SkillUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DetailCreateManyProjectInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    entityId: string
    entityType: $Enums.DetailEntityType
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
  }

  export type NestedDetailCreateManyProjectInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    label: string
    description?: string | null
    shortDescription?: string | null
    visible?: boolean
    detailId: string
  }

  export type SkillUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DetailUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedDetailsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutDetailNestedInput
    skills?: SkillUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutDetailNestedInput
    skills?: SkillUncheckedUpdateManyWithoutDetailsNestedInput
  }

  export type DetailUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    entityType?: EnumDetailEntityTypeFieldUpdateOperationsInput | $Enums.DetailEntityType
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NestedDetailUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedNestedDetailsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedNestedDetailsNestedInput
    detail?: DetailUpdateOneRequiredWithoutNestedDetailsNestedInput
    skills?: SkillUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
    skills?: SkillUncheckedUpdateManyWithoutNestedDetailsNestedInput
  }

  export type NestedDetailUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    shortDescription?: NullableStringFieldUpdateOperationsInput | string | null
    visible?: BoolFieldUpdateOperationsInput | boolean
    detailId?: StringFieldUpdateOperationsInput | string
  }

  export type RepositoryUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedRepositoriesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedRepositoriesNestedInput
    skills?: SkillUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutRepositoriesNestedInput
  }

  export type RepositoryUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    npmPackageName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExperienceCreateManyCompanyInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    title: string
    shortTitle?: string | null
    description?: string | null
    isRemote?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type ExperienceUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedExperiencesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedExperiencesNestedInput
    skills?: SkillUpdateManyWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutExperiencesNestedInput
  }

  export type ExperienceUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    shortTitle?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRemote?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EducationCreateManySchoolInput = {
    id?: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    startDate: Date | string
    endDate?: Date | string | null
    note?: string | null
    degree: $Enums.Degree
    description?: string | null
    major: string
    shortMajor?: string | null
    minor?: string | null
    concentration?: string | null
    postPoned?: boolean
    visible?: boolean
    highlighted?: boolean
  }

  export type EducationUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedEducationsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEducationsNestedInput
    skills?: SkillUpdateManyWithoutEducationsNestedInput
    courses?: CourseUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
    skills?: SkillUncheckedUpdateManyWithoutEducationsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutEducationNestedInput
  }

  export type EducationUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    degree?: EnumDegreeFieldUpdateOperationsInput | $Enums.Degree
    description?: NullableStringFieldUpdateOperationsInput | string | null
    major?: StringFieldUpdateOperationsInput | string
    shortMajor?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    concentration?: NullableStringFieldUpdateOperationsInput | string | null
    postPoned?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    highlighted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SkillUpdateWithoutExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    educations?: EducationUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    educations?: EducationUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutExperiencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseCreateManyEducationInput = {
    id?: string
    name: string
    shortName?: string | null
    slug: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string
    updatedById: string
    visible?: boolean
    description?: string | null
  }

  export type SkillUpdateWithoutEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutCreatedSkillsNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSkillsNestedInput
    experiences?: ExperienceUpdateManyWithoutSkillsNestedInput
    courses?: CourseUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUpdateManyWithoutSkillsNestedInput
    details?: DetailUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateWithoutEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
    experiences?: ExperienceUncheckedUpdateManyWithoutSkillsNestedInput
    courses?: CourseUncheckedUpdateManyWithoutSkillsNestedInput
    projects?: ProjectUncheckedUpdateManyWithoutSkillsNestedInput
    details?: DetailUncheckedUpdateManyWithoutSkillsNestedInput
    nestedDetails?: NestedDetailUncheckedUpdateManyWithoutSkillsNestedInput
    repositories?: RepositoryUncheckedUpdateManyWithoutSkillsNestedInput
  }

  export type SkillUncheckedUpdateManyWithoutEducationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: SkillUpdatecategoriesInput | $Enums.SkillCategory[]
    programmingLanguages?: SkillUpdateprogrammingLanguagesInput | $Enums.ProgrammingLanguage[]
    programmingDomains?: SkillUpdateprogrammingDomainsInput | $Enums.ProgrammingDomain[]
    experience?: NullableIntFieldUpdateOperationsInput | number | null
    calculatedExperience?: IntFieldUpdateOperationsInput | number
    includeInTopSkills?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedCoursesNestedInput
    skills?: SkillUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: SkillUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutEducationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    shortName?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    visible?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NestedDetailCountOutputTypeDefaultArgs instead
     */
    export type NestedDetailCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NestedDetailCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetailCountOutputTypeDefaultArgs instead
     */
    export type DetailCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetailCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepositoryCountOutputTypeDefaultArgs instead
     */
    export type RepositoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepositoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillCountOutputTypeDefaultArgs instead
     */
    export type SkillCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExperienceCountOutputTypeDefaultArgs instead
     */
    export type ExperienceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExperienceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EducationCountOutputTypeDefaultArgs instead
     */
    export type EducationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EducationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NestedDetailDefaultArgs instead
     */
    export type NestedDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NestedDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetailDefaultArgs instead
     */
    export type DetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResumeDefaultArgs instead
     */
    export type ResumeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResumeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepositoryDefaultArgs instead
     */
    export type RepositoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepositoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillDefaultArgs instead
     */
    export type SkillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExperienceDefaultArgs instead
     */
    export type ExperienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExperienceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EducationDefaultArgs instead
     */
    export type EducationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EducationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfileDefaultArgs instead
     */
    export type ProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfileDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}