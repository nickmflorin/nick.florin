generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("MIGRATE_DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid()) @db.Uuid
  clerkId            String       @unique
  firstName          String
  lastName           String
  profileImageUrl    String?
  emailAddress       String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  updatedSkills      Skill[]      @relation("updatedSkils")
  createdSkills      Skill[]      @relation("createdSkills")
  updatedCompanies   Company[]    @relation("updatedCompanies")
  createdCompanies   Company[]    @relation("createdCompanies")
  updatedExperiences Experience[] @relation("updatedExperiences")
  createdExperiences Experience[] @relation("createdExperiences")
  updatedSchools     School[]     @relation("updatedSchools")
  createdSchools     School[]     @relation("createdSchools")
  updatedEducations  Education[]  @relation("updatedEducations")
  createdEducations  Education[]  @relation("createdEducations")
  updatedProfiles    Profile[]    @relation("updatedProfiles")
  createdProfiles    Profile[]    @relation("createdProfiles")
}

model Skill {
  id          String               @id @default(uuid()) @db.Uuid
  label       String               @unique
  createdAt   DateTime             @default(now())
  createdBy   User                 @relation("createdSkills", fields: [createdById], references: [id])
  createdById String               @db.Uuid
  updatedAt   DateTime             @updatedAt
  updatedBy   User                 @relation("updatedSkils", fields: [updatedById], references: [id])
  updatedById String               @db.Uuid
  experiences ExperienceOnSkills[] @relation("experiences")
  educations  EducationOnSkills[]  @relation("educations")
}

model Company {
  id           String       @id @default(uuid()) @db.Uuid
  createdAt    DateTime     @default(now())
  createdBy    User         @relation("createdCompanies", fields: [createdById], references: [id])
  createdById  String       @db.Uuid
  updatedAt    DateTime     @updatedAt
  updatedBy    User         @relation("updatedCompanies", fields: [updatedById], references: [id])
  updatedById  String       @db.Uuid
  name         String       @unique
  description  String?
  logoImageUrl String?
  websiteUrl   String?
  experiences  Experience[] @relation("experiences")
  city         String
  state        String
}

model School {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  createdBy    User        @relation("createdSchools", fields: [createdById], references: [id])
  createdById  String      @db.Uuid
  updatedAt    DateTime    @updatedAt
  updatedBy    User        @relation("updatedSchools", fields: [updatedById], references: [id])
  updatedById  String      @db.Uuid
  name         String      @unique
  description  String?
  logoImageUrl String?
  websiteUrl   String?
  educations   Education[] @relation("educations")
  city         String
  state        String
}

model ExperienceOnSkills {
  experience   Experience @relation("skills", fields: [experienceId], references: [id])
  experienceId String     @db.Uuid
  skill        Skill      @relation("experiences", fields: [skillId], references: [id])
  skillId      String     @db.Uuid
  assignedAt   DateTime   @default(now())
  assignedById String     @db.Uuid

  @@id([skillId, experienceId])
}

model Experience {
  id          String               @id @default(uuid()) @db.Uuid
  createdAt   DateTime             @default(now())
  createdBy   User                 @relation("createdExperiences", fields: [createdById], references: [id])
  createdById String               @db.Uuid
  updatedAt   DateTime             @updatedAt
  updatedBy   User                 @relation("updatedExperiences", fields: [updatedById], references: [id])
  updatedById String               @db.Uuid
  skills      ExperienceOnSkills[] @relation("skills")
  startDate   DateTime
  endDate     DateTime?
  company     Company              @relation("experiences", fields: [companyId], references: [id])
  companyId   String               @db.Uuid
  title       String
  shortTitle  String?
  description String?
  isRemote    Boolean              @default(false)

  @@unique([title, companyId])
}

model EducationOnSkills {
  education    Education @relation("skills", fields: [educationId], references: [id])
  educationId  String    @db.Uuid
  skill        Skill     @relation("educations", fields: [skillId], references: [id])
  skillId      String    @db.Uuid
  assignedAt   DateTime  @default(now())
  assignedById String    @db.Uuid

  @@id([skillId, educationId])
}

enum Degree {
  BACHELORS_OF_SCIENCE
  MASTERS_OF_SCIENCE_IN_ENGINEERING
  MASTERS_OF_SCIENCE
}

model Education {
  id            String              @id @default(uuid()) @db.Uuid
  createdAt     DateTime            @default(now())
  createdBy     User                @relation("createdEducations", fields: [createdById], references: [id])
  createdById   String              @db.Uuid
  updatedAt     DateTime            @updatedAt
  updatedBy     User                @relation("updatedEducations", fields: [updatedById], references: [id])
  updatedById   String              @db.Uuid
  skills        EducationOnSkills[] @relation("skills")
  startDate     DateTime
  endDate       DateTime?
  note          String?
  degree        Degree
  description   String?
  major         String
  minor         String?
  concentration String?
  school        School              @relation("educations", fields: [schoolId], references: [id])
  schoolId      String              @db.Uuid
  postPoned     Boolean             @default(false)

  @@unique([major, schoolId])
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  createdBy       User     @relation("createdProfiles", fields: [createdById], references: [id])
  createdById     String   @db.Uuid
  updatedAt       DateTime @updatedAt
  updatedBy       User     @relation("updatedProfiles", fields: [updatedById], references: [id])
  updatedById     String   @db.Uuid
  firstName       String
  lastName        String
  middleName      String?
  profileImageUrl String?
  emailAddress    String
  phoneNumber     String?
  intro           String
  tagline         String?
  githubUrl       String?
  linkedinUrl     String?
}
