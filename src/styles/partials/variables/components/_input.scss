@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../../functions" as fn;
@use "../../mixins" as mixins;

@use "../colors" as colors;
@use "../typography" as typography;
@use "./icons" as icons;

$input-sizes: ("xs", "sm", "md", "lg");
$input-default-size: "md";

// ---------------------------------- Agnostic Properties (The same for all input forms) ---------------------------- //
$input-color: theme("colors.gray.700");
$input-font-family: typography.$font-family-inter;
$input-default-font-size: typography.get-font-size("body", $size: "sm");
$input-font-weight: typography.get-font-weight(
  $weight: "regular",
);
$input-bg-color: theme("colors.white");
$input-border-color: theme("colors.border");
$input-focused-border-color: theme("colors.blue.400");
$input-border-radius: theme("borderRadius.sm");
$input-disabled-bg-color: #efefef;
$input-icon-color: icons.$default-icon-color;
$input-border-width: 1px;
$input-border: $input-border-width solid $input-border-color;
$input-placeholder-color: colors.$placeholder-color;
$input-caret-color: theme("colors.gray.600");

@mixin input-placeholder-properties {
  color: $input-placeholder-color;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
}

@mixin with-placeholder {
  &::placeholder {
    @include input-placeholder-properties;
  }

  ::placeholder {
    @include input-placeholder-properties;
  }

  // Mantine Placeholder
  #placeholder {
    @include input-placeholder-properties;
  }
}

@mixin input-properties {
  @include mixins.border($input-border-color);
  @include with-placeholder;

  font-weight: $input-font-weight;
  color: $input-color;
  font-family: $input-font-family;

  // We need to explicitly set the background color to white (instead of not specifying a background color) such that
  // auto fill styling applied by Google Chrome (and likely others) does not change the background.
  background-color: $input-bg-color;
  border-radius: $input-border-radius;

  .icon {
    color: $input-icon-color;
  }

  @include mixins.disabled {
    border-color: $input-disabled-bg-color;
  }

  @include mixins.focused {
    border-color: $input-focused-border-color;
  }

  @include mixins.focused-within {
    border-color: $input-focused-border-color;
  }
}

// ------------------------------------------------------------------------------------------------------------------ //

// ----------------------------------------------------- Text Input ------------------------------------------------- //
$text-input-heights: (
  "xs": 24px,
  "sm": 28px,
  "md": 32px,
  "lg": 36px,
);

@function get-text-input-height($size: $input-default-size) {
  @return fn.mapget($text-input-heights, $size);
}

$text-input-font-sizes: (
  "xs": typography.get-font-size("body", $size: "xs"),
  "sm": typography.get-font-size("body", $size: "sm"),
  "md": typography.get-font-size("body", $size: "sm"),
  "lg": typography.get-font-size("body", $size: "md"),
);

@function get-text-input-font-size($size: $input-default-size) {
  @return fn.mapget($text-input-font-sizes, $size);
}

$text-input-line-heights: (
  "xs": get-text-input-font-size("xs") + 4px,
  "sm": get-text-input-font-size("sm") + 4px,
  "md": get-text-input-font-size("md") + 4px,
  "lg": get-text-input-font-size("lg") + 4px,
);

@function get-text-input-line-height($size: $input-default-size) {
  @return fn.mapget($text-input-line-heights, $size);
}

@function get-text-input-padding($size: $input-default-size) {
  $vertical-padding: 0.5 * (get-text-input-height($size) - get-text-input-line-height($size));
  @return $vertical-padding 12px;
}

@mixin text-input-size-properties($size: $input-default-size) {
  height: get-text-input-height($size);
  min-height: get-text-input-height($size);

  > .mantine-Input-wrapper.mantine-TextInput-wrapper {
    height: 100%;
    flex-grow: 100;

    > .mantine-TextInput-input {
      min-height: get-text-input-height($size);
      padding: get-text-input-padding($size);
      line-height: get-text-input-line-height($size);
      font-size: get-text-input-font-size($size);
      height: 100%;
    }
  }
}

@mixin text-input-size-classes() {
  @each $size in $input-sizes {
    &.text-input--#{$size} {
      @include text-input-size-properties($size);
    }
  }
  @include mixins.without-selectors($input-sizes, $prefix: ".text-input--") {
    @include text-input-size-properties();
  }
}

@mixin text-input {
  @include text-input-size-classes();

  > .mantine-Input-wrapper.mantine-TextInput-wrapper {
    height: 100%;
    flex-grow: 100;

    > .mantine-TextInput-input {
      @include input-properties();
    }
  }
}

// ----------------------------------------------------- Text Area -------------------------------------------------- //
$text-area-default-size: "md";

$text-area-font-sizes: (
  "xs": typography.get-font-size("body", $size: "xs"),
  "sm": typography.get-font-size("body", $size: "sm"),
  "md": typography.get-font-size("body", $size: "sm"),
  "lg": typography.get-font-size("body", $size: "md"),
);

@function get-text-area-font-size($size: $text-area-default-size) {
  @return fn.mapget($text-area-font-sizes, $size);
}

$text-area-line-heights: (
  "xs": get-text-input-font-size("xs") + 4px,
  "sm": get-text-input-font-size("sm") + 4px,
  "md": get-text-input-font-size("md") + 4px,
  "lg": get-text-input-font-size("lg") + 4px,
);

@function get-text-area-line-height($size: $text-area-default-size) {
  @return fn.mapget($text-area-line-heights, $size);
}

$text-area-padding: (
  "xs": 6px 8px,
  "sm": 8px 10px,
  "md": 8px 10px,
  "lg": 10px 12px,
);

@function get-text-area-padding($size: $text-area-default-size) {
  @return fn.mapget($text-area-padding, $size);
}

@mixin text-area-size-properties($size: $input-default-size) {
  $padding: get-text-area-padding($size);
  $line-height: get-text-area-line-height($size);
  $min-height: $line-height + 2 * list.nth($padding, 1);

  line-height: $line-height;
  font-size: get-text-area-font-size($size);
  min-height: $min-height;

  > .mantine-Input-wrapper.mantine-Textarea-wrapper {
    height: 100%;
    flex-grow: 100;

    > .mantine-Textarea-input {
      min-height: $min-height;
      padding: $padding;
      line-height: inherit;
      height: 100%;
      font-size: inherit;
    }
  }
}

@mixin text-area-size-classes() {
  @each $size in $input-sizes {
    &.text-area--#{$size} {
      @include text-area-size-properties($size);
    }
  }
  @include mixins.without-selectors($input-sizes, $prefix: ".text-area--") {
    @include text-area-size-properties();
  }
}

@mixin text-area {
  @include text-area-size-classes();

  > .mantine-Input-wrapper.mantine-Textarea-wrapper {
    > .mantine-Textarea-input {
      @include input-properties();
    }
  }
}

// ----------------------------------------------------- Text Area -------------------------------------------------- //

// ---------------------------------------------------- Select Input ------------------------------------------------ //
$select-default-size: "md";

$select-heights: (
  "xs": 24px,
  "sm": 28px,
  "md": 32px,
  "lg": 36px,
);

@function get-select-height($size: $select-default-size) {
  @return fn.mapget($select-heights, $size);
}

$select-font-sizes: (
  "xs": typography.get-font-size("body", $size: "xs"),
  "sm": typography.get-font-size("body", $size: "sm"),
  "md": typography.get-font-size("body", $size: "sm"),
  "lg": typography.get-font-size("body", $size: "md"),
);

@function get-select-font-size($size: $select-default-size) {
  @return fn.mapget($select-font-sizes, $size);
}

$select-line-heights: (
  "xs": get-select-font-size("xs") + 4px,
  "sm": get-select-font-size("sm") + 4px,
  "md": get-select-font-size("md") + 4px,
  "lg": get-select-font-size("lg") + 4px,
);

@function get-select-line-height($size: $select-default-size) {
  @return fn.mapget($select-line-heights, $size);
}

@function get-select-padding($size: $input-default-size) {
  $vertical-padding: 0.5 * (get-select-height($size) - get-select-line-height($size));
  @return $vertical-padding 12px;
}

@function get-select-size-properties($size: $select-default-size) {
  @return (
    padding: get-select-padding($size),
    line-height: get-select-line-height($size),
    font-size: get-select-font-size($size),
    height: get-select-height($size),
    min-height: get-select-height($size)
  );
}

@mixin select-size-properties($size: $select-default-size) {
  height: get-select-height($size);
  min-height: get-select-height($size);

  > div[role="combobox"] {
    height: 100%;
    width: 100%;

    > .mantine-Input-wrapper.mantine-Select-wrapper {
      height: 100%;
      flex-grow: 100;

      > .mantine-Select-input {
        min-height: get-select-height($size);
        padding: get-select-padding($size);
        line-height: get-select-line-height($size);
        font-size: get-select-font-size($size);
        height: 100%;
      }
    }
  }
}

@mixin select-size-classes() {
  @each $size in $input-sizes {
    &.select--#{$size} {
      @include select-size-properties($size);
    }
  }
  @include mixins.without-selectors($input-sizes, $prefix: ".select--") {
    @include select-size-properties();
  }
}

@mixin select {
  @include select-size-classes();

  > div[role="combobox"] {
    > .mantine-Input-wrapper.mantine-Select-wrapper {
      > .mantine-Select-input {
        @include input-properties();
      }
    }
  }
}

// ---------------------------------------------------- Select Input ------------------------------------------------ //

$menu-item-padding: 4px 8px;
$menu-item-min-height: 28px;
$menu-item-max-height: 34px;
$menu-item-line-height: $menu-item-min-height - 2 * list.nth($menu-item-padding, 1);
$menu-item-font-weight: typography.get-font-weight(
  $weight: "regular",
);

@mixin menu-item-properties {
  padding: $menu-item-padding;
  line-height: $menu-item-line-height;
  font-weight: $menu-item-font-weight;
  min-height: $menu-item-min-height;
  max-height: $menu-item-max-height;

  > .icon {
    color: $input-icon-color;
  }

  @include colors.with-state-bg-color(("hovered", "focused")) {
    color: theme("colors.gray.600");
  }

  &.selected {
    background-color: theme("colors.white");
    color: theme("colors.gray.600");

    @include colors.with-state-bg-color(("hovered", "focused")) {
      color: theme("colors.gray.700");
    }
  }
}
