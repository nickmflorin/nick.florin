@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../../../functions" as fn;
@use "../../../mixins" as mixins;

@use "../../colors" as colors;
@use "../../radius" as radius;
@use "../../typography" as typography;
@use "../icons" as icons;

/* ----------------------------------------- Variants ------------------------------------------ */
$button-types: ("solid", "alternate", "action");
$button-default-type: "solid";
$button-variants: ("primary", "secondary", "danger", "bare", "outline");

/* ---------------------------------------------------- Properties -------------------------------------------------- */

/*
When an Icon and/or Spinner are in the Button, the size of the Icon or Spinner needs to be just a hair smaller than the
line-height of the accompanying text. To do this, the height of the element inside of the Button that wraps the Icon or
Spinner needs to still consume 100% of the available height (i.e. size = "fill"), but needs to have inner padding to
shrink the size of the Icon or Spinner it contains.
*/
$button-icon-padding: 2px;

/* ------------------------------------------------------- Sizing --------------------------------------------------- */
$button-size-names: ("xs", "sm", "md", "lg");
$button-default-size: "sm";

/*
Note: The mapped values are not applicable for the Alternate Variant - just the buttons/anchors that have borders and/or
backgrounds with text (Primary, Secondary and Bare Variants).
*/
$button-solid-padding: (
  "normal": (
    "xs": 6px 14px,
    "sm": 8px 16px,
    "md": 10px 20px,
    "lg": 14px 30px,
  ),
  "condensed": (
    "xs": 6px 10px,
    "sm": 6px 10px,
    "md": 8px 14px,
    "lg": 10px 18px,
  ),
);

/*
The Action Button sizes are designed such that the sizes of the actual Icons, which are already defined for icons, stay
consistent between the Bare variant (where there is no background or border) and the Primary/Secondary variants (where
there is a background and border) - for a given size string.  For instance, a medium sized Primary Action Button should
have a medium sized Icon and a medium sized Bare Action Button shyould have a medium sized icon, even if the outer sizes
of the buttons themselves differ.
*/
$button-action-bare-padding: 2px;
$button-action-primary-padding: 6px;
$button-action-secondary-padding: 6px;
$button-action-danger-padding: 6px;
$button-action-outline-padding: 6px;

$button-action-padding: (
  "bare": $button-action-bare-padding,
  "primary": $button-action-primary-padding,
  "secondary": $button-action-secondary-padding,
  "danger": $button-action-danger-padding,
  "outline": $button-action-outline-padding,
);

$button-padding: (
  "action": $button-action-padding,
  "solid": $button-solid-padding,
  "alternate": 0px,
);

@function get-button-padding($type, $size: null, $variant: null, $condensed: "normal") {
  @if $size and $variant {
    @return throw.error(
      "Both the size and variant cannot be provided together when obtaining the button padding for button type #{$type}.",
      $type,
      $size,
      $variant,
      $source: "get-button-padding("
    );
  }
  $type: fn.validate-value($type, $button-types);
  $p: fn.mapget($button-padding, $type);
  @if meta.type-of($p) == map {
    @if $size {
      @if $type == "solid" {
        @return fn.mapget($p, $condensed, $size);
      }
      @return fn.mapget($p, $size);
    } @else if $variant {
      @return fn.mapget($p, $variant);
    }
    @return throw.error(
      "The size or variant must be provided to obtain the button padding for button type #{$type}.",
      $type,
      $source: "get-button-padding("
    );
  }
  @return $p;
}

/*
Usually, the height of the button would just be determined by the combination of the vertical padding and line-height
(i.e. height = 2 * vertical-padding + line-height).  However, we need to constrain the height (and not allow it to be
"auto") such that the SVG icons or spinners can properly fill up the available height and size responsively.  If we did
not define the height explicitly, it would not be constrained and this would not work.

So instead of calculating the height based on the padding and line-height, we define the heights and the padding and
then calculate the line-height based on the padding and height - and all 3 consistent with each other while still
allowing the height to be constrained.
*/
$button-solid-sizes: (
  "xs": 28px,
  "sm": 32px,
  "md": 40px,
  "lg": 48px,
);

$button-alternate-sizes: (
  "xs": 12px,
  "sm": 13px,
  "md": 14px,
  "lg": 16px,
);

$button-action-sizes: ();

// For each button size and each action variant, calculate the size of the action button based on the size of the icon
// plus two times the padding.
@each $variant in $button-variants {
  @each $size in $button-size-names {
    $button-action-sizes: map.set(
      $button-action-sizes,
      $variant,
      $size,
      fn.mapget(icons.$icon-sizes, $size) + 2 * fn.mapget($button-action-padding, $variant)
    );
  }
}

$button-sizes: (
  "solid": $button-solid-sizes,
  "alternate": $button-alternate-sizes,
  "action": $button-action-sizes,
);

@function get-button-size($type, $variant: null, $size: null) {
  $type: fn.validate-value($type, $button-types);
  $size: fn.validate-value(if($size, $size, $button-default-size), $button-size-names);
  // Sizes for that type of button.
  $type-sizes: fn.mapget($button-sizes, $type);
  @if $variant {
    // For the alternate case, the size of the button depends on the variant.
    @if not map.has-key($type-sizes, $variant) {
      @return throw.error(
        "The variant is not applicable or is invalid for button type #{$type}.",
        $type,
        $source: "get-button-size()"
      );
    }
    $type-sizes: fn.mapget($type-sizes, $variant);
  }
  @return fn.mapget($type-sizes, $size);
}

$button-solid-font-sizes: (
  "xs": 12px,
  "sm": 13px,
  "md": 14px,
  "lg": 16px,
);

// The alternate button has no padding, and its line height is equal to the font-size.
$button-alternate-font-sizes: $button-alternate-sizes;

$button-font-sizes: (
  "alternate": $button-alternate-font-sizes,
  "solid": $button-solid-font-sizes,
  "action": null,
);

@function get-button-font-size($type, $size: null) {
  $type: fn.validate-value($type, $button-types);
  $size: if($size, $size, $button-default-size);
  $size: fn.validate-value($size, $button-size-names);
  @return fn.mapget($button-font-sizes, $type, $size);
}

// Allow the padding to be overridden for various button one-off cases.
@mixin button-solid-size($size) {
  $height: get-button-size("solid", $size: $size);
  font-size: get-button-font-size("solid", $size: $size);

  /*
  Usually, the height of the button would just be determined by the combination of the vertical padding and line-height
  (i.e. height = 2 * vertical-padding + line-height).  However, we need to constrain the height (and not allow it to be
  "auto") such that the SVG icons or spinners can properly fill up the available height and size responsively.  If we
  did not define the height explicitly, this would not work.

  So instead of calculating the height based on the padding and line-height, we calculate the line-height based on the
  padding and height - and all 3 consistent with each other while still allowing the height to be constrained.
  */
  height: $height;

  $padding: get-button-padding("solid", $size: $size);
  $vertical-padding: list.nth($padding, 1);
  $line-height: $height - 2 * $vertical-padding;

  line-height: $line-height;
  padding: $padding;

  // Currently only applicable for solid outline button.
  &.button--condensed {
    $padding: get-button-padding("solid", $size: $size, $condensed: "condensed");
    $vertical-padding: list.nth($padding, 1);
    $line-height: $height - 2 * $vertical-padding;

    line-height: $line-height;
    padding: $padding;
  }
}

@mixin button-action-size($size, $variant) {
  aspect-ratio: 1;
  padding: get-button-padding("action", $variant: $variant);
  height: get-button-size("action", $variant: $variant, $size: $size);
  width: get-button-size("action", $variant: $variant, $size: $size);
}

@mixin button-alternate-size($size) {
  @layer {
    font-size: get-button-font-size("alternate", $size: $size);
    height: get-button-size("alternate", $size: $size);
    line-height: get-button-size("alternate", $size: $size);
  }

  // Allow the font-size to be overridden for each size.
  @include typography.with-font-sizes("body") using ($size, $data) {
    &.font-size-#{$size} {
      @layer {
        font-size: fn.mapget($data, font-size);
      }
    }
  }
}
