@use "sass:list";

@use "../../functions" as fn;
@use "./properties" as properties;

/* ------------------------------------ Font Face Specifications -------------------------------- */
$font-file-types: (svg, eot, ttf, woff, woff2);
$font-family-folder-names: (
  "avenir": "AvenirNext",
  "roboto": "Roboto",
);
$font-family-style-folder-names: (
  "avenir": (
    "Bold",
    "Light",
    "Medium",
    "Regular",
    "SemiBold",
  ),
  "roboto": (
    "Bold",
    "Light",
    "Medium",
    "Regular",
  ),
);
$font-family-font-styles: (normal, italic);
$font-family-extensions: ("eot", "eot?#iefix", "svg", "ttf", "woff", "woff2");
$font-family-formats: (
  "eot": null,
  "eot?#iefix": "embedded-opentype",
  "ttf": "truetype",
  "woff2": "woff2",
  "woff": "woff",
  "svg": "svg",
);

@function font-file-path($family, $style, $extension, $font-style: normal) {
  $family: fn.validate-value($family, properties.$font-families);
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $style-folder-name: fn.validate-value($style, fn.mapget($font-family-style-folder-names, $family));
  $family-folder-name: fn.mapget($font-family-folder-names, $family);
  $extension: fn.validate-value($extension, $font-family-extensions);
  @if $font-style == italic {
    @return "/fonts/#{$family-folder-name}/#{$style-folder-name}/Italic/#{$family-folder-name}-#{$style-folder-name}Italic.#{$extension}";
  }
  @return "/fonts/#{$family-folder-name}/#{$style-folder-name}/#{$family-folder-name}-#{$style-folder-name}.#{$extension}";
}

@function font-url($family, $style, $extension, $font-style: normal) {
  $family: fn.validate-value($family, properties.$font-families);
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $style: fn.validate-value($style, fn.mapget($font-family-style-folder-names, $family));
  $extension: fn.validate-value($extension, $font-family-extensions);
  $format: fn.mapget($font-family-formats, $extension);
  @if $format {
    @return url("#{font-file-path($family, $style, $extension, $font-style)}") format($format);
  }
  @return url("#{font-file-path($family, $style, $extension, $font-style)}");
}

@function font-src($family, $style, $font-style: normal) {
  $src: ();
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $family: fn.validate-value($family, properties.$font-families);
  $style: fn.validate-value($style, fn.mapget($font-family-style-folder-names, $family));
  @each $ext in $font-family-extensions {
    $src: list.append($src, font-url($family, $style, $ext, $font-style), comma);
  }
  @return $src;
}

@mixin font-face($family, $style, $weight, $font-style: normal) {
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  @font-face {
    font-display: swap;
    font-family: $family;
    font-style: $font-style;
    font-weight: $weight;
    src: font-src($family, $style, $font-style);
  }
}

@mixin font-faces() {
  @include font-face("avenir", "Light", 300 399);
  @include font-face("avenir", "Regular", 400 499);
  @include font-face("avenir", "Regular", 400 499, italic);
  @include font-face("avenir", "Medium", 500 599);
  @include font-face("avenir", "SemiBold", 600 699);
  @include font-face("avenir", "SemiBold", 600 699, italic);
  @include font-face("avenir", "Bold", 700);
  @include font-face("avenir", "Bold", 700, italic);
  @include font-face("roboto", "Light", 300 399);
  @include font-face("roboto", "Light", 300 399, italic);
  @include font-face("roboto", "Regular", 400 499);
  @include font-face("roboto", "Medium", 500 699);
  @include font-face("roboto", "Medium", 500 699, italic);
  @include font-face("roboto", "Bold", 700);
  @include font-face("roboto", "Bold", 700, italic);
}
