@use "sass:map";
@use "throw";
@use "../functions" as fn;

$spacing-sizes: ("xxxs", "xxs", "xs", "sm", "md", "lg", "xl", "xxl", "xxxl");

$spacing-xxxs: 1px;
$spacing-xxs: 2px;
$spacing-xs: 4px;
$spacing-sm: 8px;
$spacing-md: 12px;
$spacing-lg: 16px;
$spacing-xl: 20px;
$spacing-xxl: 24px;
$spacing-xxxl: 32px;

$spacing: (
  xxxs: $spacing-xxxs,
  xxs: $spacing-xxs,
  xs: $spacing-xs,
  sm: $spacing-sm,
  md: $spacing-md,
  lg: $spacing-lg,
  xl: $spacing-xl,
  xxl: $spacing-xxl,
  xxxl: $spacing-xxxl,
);

@function get-spacing($size) {
  @if not map.has-key($spacing, $size) {
    @return throw.error("The provided size #{$size} is invalid.", $size: $size, $source: "get-spacing()");
  }
  @return fn.mapget($spacing, $size);
}

@mixin with-spacing() {
  @each $size in $spacing-sizes {
    @content ($size, get-spacing($size));
  }
}

$spacing-sides: ("top", "right", "bottom", "left");
$spacing-side-abbreviations: (
  "top": "t",
  "right": "r",
  "bottom": "b",
  "left": "l",
);

@mixin with-margins() {
  @include with-spacing using ($size, $value) {
    .m-#{$size} {
      margin: $value;
    }
    @each $side in $spacing-sides {
      $side-abbr: fn.mapget($spacing-side-abbreviations, $side);
      .m#{$side-abbr}-#{$size} {
        margin-#{$side}: $value;
      }
    }
  }
}

@mixin with-paddings() {
  @include with-spacing using ($size, $value) {
    .p-#{$size} {
      padding: $value;
    }
    @each $side in $spacing-sides {
      $side-abbr: fn.mapget($spacing-side-abbreviations, $side);
      .p#{$side-abbr}-#{$size} {
        padding-#{$side}: $value;
      }
    }
  }
}
