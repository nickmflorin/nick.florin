@use "partials";
@use "./constants" as constants;

$input-sizes: ("small", "medium", "large");
$input-default-size: "medium";

$input-size-properties: (
  "small": (
    "height": 28px,
    "font-size": 13px,
    "line-height": 20px,
    "padding": 4px 10px,
  ),
  "medium": (
    "height": 32px,
    "font-size": 14px,
    "line-height": 24px,
    "padding": 4px 12px,
  ),
  "large": (
    "height": 36px,
    "font-size": 14px,
    "line-height": 28px,
    "padding": 4px 12px,
  ),
);

@function get-input-size-properties($size) {
  $size: partials.validate-value($size, $input-sizes);
  @return partials.mapget($input-size-properties, $size);
}

@function get-input-font-size($size) {
  $size: partials.validate-value($size, $input-sizes);
  @return partials.mapget($input-size-properties, $size, font-size);
}

@mixin input-size($size, $type) {
  $type: partials.validate-value($type, constants.$input-types);

  $properties: get-input-size-properties($size);
  // Note: The font size may be overridden for a given Input component with props.  The logic that
  // handles that overridding is in the index.scss file.
  font-size: partials.mapget($properties, "font-size");
  line-height: partials.mapget($properties, "line-height");
  padding: partials.mapget($properties, "padding");

  @if $type != "text-area" {
    min-height: partials.mapget($properties, "height");
    @if $type == "text-input" {
      height: partials.mapget($properties, "height");
      max-height: partials.mapget($properties, "height");
    }
  }
}
