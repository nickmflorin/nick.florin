@use "sass:color";
@use "sass:map";
@use "sass:meta";

@use "partials";

@use "./constants" as constants;
@use "./mixins" as mixins;

$input-variants: ("primary");
$input-default-variant: "primary";

$input-variant-properties: (
  "primary": (
    background-color: theme("colors.white"),
    outline-color: theme("colors.border"),
    color: (
      "text-area": theme("colors.description"),
      "text-input": theme("colors.body"),
      "select": theme("colors.body"),
    ),
    caret-color: theme("colors.body"),
    placeholder-color: theme("colors.placeholder"),
    outline-thickness: 1px,
    icon-color: theme("colors.body"),
    hovered: (
      outline-color: theme("colors.primary"),
    ),
    disabled: (
      color: theme("colors.disabled"),
      placeholder-color: theme("colors.disabled"),
      outline-color: theme("colors.disabled-border"),
    ),
    focused: (
      outline-color: theme("colors.primary"),
      outline-thickness: 2px,
      icon-color: theme("colors.primary"),
    ),
    active: (
      outline-color: theme("colors.primary"),
      icon-color: theme("colors.primary"),
      outline-thickness: 2px,
    ),
  ),
  "bare": (
    background-color: theme("colors.gray.100"),
    outline-color: theme("colors.transparent"),
    color: (
      "text-area": theme("colors.description"),
      "text-input": theme("colors.body"),
      "select": theme("colors.body"),
    ),
    caret-color: theme("colors.body"),
    placeholder-color: theme("colors.placeholder"),
    outline-thickness: 1px,
    icon-color: theme("colors.body"),
    disabled: (
      color: theme("colors.disabled"),
      placeholder-color: theme("colors.disabled"),
      outline-color: theme("colors.disabled-border"),
    ),
    focused: (
      background-color: theme("colors.gray.200"),
    ),
    active: (
      outline-color: theme("colors.blue.800"),
    ),
  ),
);

@function get-input-property($variant, $type, $property, $state: null, $fallback: null) {
  $properties: map.get($input-variant-properties, $variant);

  @if $property ==
    "disabled" or
    $property ==
    "focused" or
    $property ==
    "active" or
    $property ==
    "hovered"
  {
    @error "The property cannot be a state.";
  }

  $value: map.get($properties, $property);
  @if not $state {
    @if meta.type-of($value) == map {
      @if map.has-key($value, $type) {
        $value: map.get($value, $type);
      } @else {
        @error "The type #{$type} does not exist in the map for property #{$property}!";
      }
    }
    @return if($value, $value, $fallback);
  }
  $value: if(
    map.has-key($properties, $state) and map.has-key(map.get($properties, $state), $property),
    map.get($properties, $state, $property),
    $value
  );
  @if meta.type-of($value) == map {
    @if map.has-key($value, $type) {
      $value: map.get($value, $type);
    } @else {
      @error "The type #{$type} does not exist in the map for property #{$property}!";
    }
  }
  @return if($value, $value, $fallback);
}

@mixin input-variant-state($variant, $type, $state: null) {
  $color: get-input-property($variant, $type, color, $state: $state);
  @if not $color {
    @error "The 'color' field must be defined in the variant map.";
  }

  background-color: get-input-property(
    $variant,
    $type,
    background-color,
    $state: $state,
    $fallback: theme("colors.white")
  );
  color: $color;
  caret-color: get-input-property($variant, $type, caret-color, $state: $state, $fallback: $color);

  $outline-thickness: get-input-property(
    $variant,
    $type,
    outline-thickness,
    $state: $state,
    $fallback: 1px
  );
  outline-offset: -$outline-thickness;

  $outline-color: get-input-property($variant, $type, outline-color, $state: $state);
  @if $outline-color {
    outline: $outline-thickness solid $outline-color;
  }

  &::placeholder {
    color: get-input-property(
      $variant,
      $type,
      placeholder-color,
      $state: $state,
      $fallback: $color
    );
  }

  .placeholder {
    color: get-input-property($variant, $type, placeholder-color, $state: $state);
  }

  $icon-color: get-input-property($variant, $type, icon-color, $state: $state, $fallback: $color);
  @if $icon-color {
    > .icon {
      color: $icon-color;
    }
  }
}

@mixin input-variant($variant, $type) {
  @include input-variant-state($variant, $type);

  @include partials.disabled {
    @include input-variant-state($variant, $type, $state: "disabled");
  }

  @include mixins.input-hovered {
    @include input-variant-state($variant, $type, $state: "hovered");
  }

  @include mixins.input-focused {
    @include input-variant-state($variant, $type, $state: "focused");
  }

  @include mixins.input-focused-within {
    @include input-variant-state($variant, $type, $state: "focused");
  }

  @include mixins.input-active {
    @include input-variant-state($variant, $type, $state: "active");
  }
}

@mixin input-variants($type) {
  @include input-variant($input-default-variant, $type);

  @each $variant in $input-variants {
    &--variant-#{$variant} {
      @include input-variant($variant, $type);
    }
  }
}
