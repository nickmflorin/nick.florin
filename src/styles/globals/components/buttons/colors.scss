@use "sass:map";
@use "sass:meta";

@use "partials";
@use "./mixins" as mixins;
@use "./constants" as *;

@function map-has-state-key($data) {
  @each $state-name in $button-state-names {
    @if map.has-key($data, $state-name) {
      @return true;
    }
  }
  @return false;
}

$themes: (
  "danger": (
    base: partials.get-color("red", $shade: 7),
    hovered: partials.get-color("red", $shade: 8),
    focused: partials.get-color("red", $shade: 8),
  ),
  "primary": (
    base: partials.get-color("blue", $shade: 9),
    hovered: partials.get-color("blue", $shade: 11),
    focused: partials.get-color("blue", $shade: 11),
  ),
  "secondary": (
    base: partials.get-color("gray", $shade: 2),
    hovered: partials.get-color("gray", $shade: 3),
    focused: partials.get-color("gray", $shade: 3),
  ),
  "outline": (
    base: partials.get-color("gray", $shade: 4),
    hovered: partials.get-color("gray", $shade: 5),
    focused: partials.get-color("gray", $shade: 5),
  ),
  "bare": (),
);

$button-color-properties: (
  "button": (
    "primary": (
      background-color: partials.mapget($themes, "primary", "base"),
      color: partials.$white,
      outline-color: partials.mapget($themes, "primary", "base"),
      hovered: (
        background-color: partials.mapget($themes, "primary", "hovered"),
        outline-color: partials.mapget($themes, "primary", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "primary", "focused"),
        outline-color: partials.mapget($themes, "primary", "focused"),
      ),
      disabled: (
        background-color: partials.$disabled-background-color,
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "secondary": (
      background-color: partials.mapget($themes, "secondary", "base"),
      color: partials.get-color("gray", $shade: 8),
      outline-color: partials.mapget($themes, "secondary", "base"),
      hovered: (
        background-color: partials.mapget($themes, "secondary", "hovered"),
        outline-color: partials.mapget($themes, "secondary", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "secondary", "focused"),
        outline-color: partials.mapget($themes, "secondary", "focused"),
      ),
      disabled: (
        background-color: partials.$disabled-background-color,
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "danger": (
      background-color: partials.mapget($themes, "danger", "base"),
      color: partials.$white,
      outline-color: partials.mapget($themes, "danger", "base"),
      hovered: (
        background-color: partials.mapget($themes, "danger", "hovered"),
        outline-color: partials.mapget($themes, "danger", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "danger", "focused"),
        outline-color: partials.mapget($themes, "danger", "focused"),
      ),
      disabled: (
        background-color: partials.get-color("red", $shade: 4),
        outline-color: partials.get-color("red", $shade: 4),
      ),
    ),
    "outline": (
      outline-color: partials.mapget($themes, "outline", "base"),
      background-color: partials.get-color("white"),
      color: partials.get-color("gray", $shade: 8),
      hovered: (
        outline-color: partials.mapget($themes, "outline", "hovered"),
      ),
      focused: (
        outline-color: partials.mapget($themes, "outline", "hovered"),
      ),
      disabled: (
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "bare": (),
  ),
  "icon-button": (
    "primary": (
      background-color: partials.mapget($themes, "primary", "base"),
      color: partials.$white,
      outline-color: partials.mapget($themes, "primary", "base"),
      hovered: (
        background-color: partials.mapget($themes, "primary", "hovered"),
        outline-color: partials.mapget($themes, "primary", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "primary", "focused"),
        outline-color: partials.mapget($themes, "primary", "focused"),
      ),
      disabled: (
        background-color: partials.$disabled-background-color,
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "secondary": (
      background-color: partials.mapget($themes, "secondary", "base"),
      color: partials.get-color("gray", $shade: 8),
      outline-color: partials.mapget($themes, "secondary", "base"),
      hovered: (
        background-color: partials.mapget($themes, "secondary", "hovered"),
        outline-color: partials.mapget($themes, "secondary", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "secondary", "focused"),
        outline-color: partials.mapget($themes, "secondary", "focused"),
      ),
      disabled: (
        background-color: partials.$disabled-background-color,
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "danger": (
      background-color: partials.mapget($themes, "danger", "base"),
      color: partials.$white,
      outline-color: partials.mapget($themes, "danger", "base"),
      hovered: (
        background-color: partials.mapget($themes, "danger", "hovered"),
        outline-color: partials.mapget($themes, "danger", "hovered"),
      ),
      focused: (
        background-color: partials.mapget($themes, "danger", "focused"),
        outline-color: partials.mapget($themes, "danger", "focused"),
      ),
      disabled: (
        background-color: partials.get-color("red", $shade: 4),
        outline-color: partials.get-color("red", $shade: 4),
      ),
    ),
    "outline": (
      outline-color: partials.mapget($themes, "outline", "base"),
      background-color: partials.get-color("white"),
      color: partials.mapget($themes, "outline", "base"),
      hovered: (
        outline-color: partials.mapget($themes, "outline", "hovered"),
      ),
      focused: (
        outline-color: partials.mapget($themes, "outline", "hovered"),
      ),
      disabled: (
        outline-color: partials.$disabled-border-color,
      ),
    ),
    "bare": (),
  ),
  "link": (
    "primary": (
      background-color: partials.$transparent,
      color: partials.mapget($themes, "primary", "base"),
      outline-color: partials.$transparent,
      hovered: (
        color: partials.mapget($themes, "primary", "hovered"),
      ),
      focused: (
        color: partials.mapget($themes, "primary", "focused"),
      ),
      disabled: (
        color: partials.$disabled-color,
      ),
    ),
    "secondary": (
      background-color: partials.$transparent,
      color: partials.get-color("gray", $shade: 8),
      outline-color: partials.$transparent,
      hovered: (
        color: partials.get-color("gray", $shade: 9),
      ),
      focused: (
        color: partials.get-color("gray", $shade: 9),
      ),
      disabled: (
        color: partials.$disabled-color,
      ),
    ),
    // The outline variant for an alternate button is not applicable.
    "outline": (),
    "danger": (
      background-color: partials.$transparent,
      color: partials.mapget($themes, "danger", "base"),
      outline-color: partials.$transparent,
      hovered: (
        color: partials.mapget($themes, "danger", "hovered"),
      ),
      focused: (
        color: partials.mapget($themes, "danger", "focused"),
      ),
      disabled: (
        color: partials.get-color("red", $shade: 4),
      ),
    ),
    "bare": (),
  ),
);

@function parse-state-colors($attributes, $state-name, $args...) {
  $state-name: partials.validate-value($state-name, $button-state-names);
  $arguments: meta.keywords($args);
  @if map.has-key($arguments, $state-name) {
    $state: partials.mapget($arguments, $state-name);
    @if map-has-state-key($state) {
      @return throw.error(
        "Detected nested state key(s) in state attribute #{$state-name}.  This will cause an infinite recursion.",
        $source: "button-colors()"
      );
    }
    // If the state defines an override for the outline-color, we need to also override the outline
    // because it will have been defaulted in the original base set of attributes based on the
    // outline color of the base state.
    @if map.has-key($state, outline-color) and not map.has-key($state, outline) {
      $state: map.set(
        $state,
        outline,
        $button-outline-width solid partials.mapget($state, outline-color)
      );
    }

    @return map.merge($attributes, $state);
  }
  @return null;
}

@mixin button-colors($args...) {
  $arguments: meta.keywords($args);

  $type: map.get($arguments, "type");
  $variant: map.get($arguments, "variant");

  @if $variant or $type {
    @if not $variant or not $type {
      @include throw.error-mixin(
        "If the 'type' argument is provided, the 'variant' must also be provided, and vice versa.",
        $source: "button-colors()",
        $type: $type,
        $variant: $variant
      );
    } @else {
      $colors: partials.mapget($button-color-properties, $type, $variant);
      @include button-colors($colors...);
    }
  } @else {
    $background-color: partials.get-optional-kwarg(
      background-color,
      $default: partials.$transparent,
      $args...
    );
    $outline-color: partials.get-optional-kwarg(
      outline-color,
      $default: $background-color,
      $args...
    );
    $outline: partials.get-optional-kwarg(
      outline,
      $default: $button-outline-width solid $outline-color,
      $args...
    );

    $attributes: (
      background-color: $background-color,
      outline-color: $outline-color,
      outline: $outline,
      color: partials.get-optional-kwarg(color, $default: null, $args...),
    );

    @each $attr in map.keys($attributes) {
      // Do not set null keys.
      @if partials.mapget($attributes, $attr) {
        #{$attr}: partials.mapget($attributes, $attr);
      }
    }

    @include mixins.button-placeholder {
      color: partials.$placeholder-color;
    }

    // If a 'hovered' argument is provided, include this mixin recursively to define the colors of the button when it
    // is hovered.
    $hovered: parse-state-colors($attributes, "hovered", $args...);
    @if $hovered {
      @include mixins.button-hovered {
        // Use the original, non-hovered and non-focused attributes as defaults such that only the hovered attributes
        // that are provided are overridden when the button is hovered.
        $hovered: map.merge($attributes, $hovered);
        @include button-colors($hovered...);
      }
    }
    // If a 'focused' argument is provided, include this mixin recursively to define the colors of the button when it is
    // focused.
    $focused: parse-state-colors($attributes, "focused", $args...);
    @if $focused {
      @include mixins.button-focused {
        // Use the original, non-hovered and non-focused attributes as defaults such that only the hovered attributes
        // that are provided are overridden when the button is hovered.
        $focused: map.merge($attributes, $focused);
        @include button-colors($focused...);
      }
    }
    // If a 'disabled' argument is provided, include this mixin recursively to define the colors of the button when it
    // is disabled.
    $disabled: parse-state-colors($attributes, "disabled", $args...);
    @if $disabled {
      @include partials.disabled {
        // Use the original, non-hovered and non-focused attributes as defaults such that only
        // the hovered attributes that are provided are overridden when the button is hovered.
        $disabled: map.merge($attributes, $disabled);
        @include button-colors($disabled...);
      }
    }
  }
}
