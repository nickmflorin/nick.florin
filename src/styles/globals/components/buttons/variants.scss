@use "sass:map";
@use "sass:meta";
@use "sass:list";

@use "partials";
@use "throw";

@use "./mixins" as mixins;
@use "./constants" as *;

@function map-has-state-key($data) {
  @each $state-name in $button-state-names {
    @if map.has-key($data, $state-name) {
      @return true;
    }
  }
  @return false;
}

$button-color-properties: (
  "button": (
    "primary": (
      background-color: theme("colors.blue.900"),
      color: theme("colors.white"),
      border-color: theme("colors.blue.900"),
      hovered: (
        background-color: theme("colors.blue.800"),
        border-color: theme("colors.blue.800"),
      ),
      focused: (
        background-color: theme("colors.blue.800"),
        border-color: theme("colors.blue.800"),
      ),
      disabled: (
        background-color: theme("colors.disabledBackground"),
        border-color: theme("colors.disabledBorder"),
      ),
    ),
    "secondary": (
      background-color: theme("colors.gray.200"),
      color: theme("colors.gray.700"),
      border-color: theme("colors.gray.200"),
      hovered: (
        background-color: theme("colors.gray.300"),
        border-color: theme("colors.gray.300"),
        active: (
          border-color: theme("colors.gray.500"),
        ),
      ),
      focused: (
        background-color: theme("colors.gray.300"),
        border-color: theme("colors.gray.300"),
        active: (
          border-color: theme("colors.gray.500"),
        ),
      ),
      active: (
        border-color: theme("colors.gray.500"),
      ),
      disabled: (
        background-color: theme("colors.disabledBackground"),
        border-color: theme("colors.disabledBorder"),
      ),
    ),
    "danger": (
      background-color: theme("colors.danger.500"),
      color: theme("colors.white"),
      border-color: theme("colors.danger.500"),
      hovered: (
        background-color: theme("colors.danger.600"),
        border-color: theme("colors.danger.600"),
      ),
      focused: (
        background-color: theme("colors.danger.600"),
        border-color: theme("colors.danger.600"),
      ),
      disabled: (
        background-color: theme("colors.red.200"),
        border-color: theme("colors.red.200"),
      ),
    ),
    "bare": (),
  ),
  "icon-button": (
    "primary": (
      background-color: theme("colors.blue.900"),
      color: theme("colors.white"),
      border-color: theme("colors.blue.900"),
      hovered: (
        background-color: theme("colors.blue.800"),
        border-color: theme("colors.blue.800"),
      ),
      focused: (
        background-color: theme("colors.blue.800"),
        border-color: theme("colors.blue.800"),
      ),
      disabled: (
        background-color: theme("colors.disabledBackground"),
        border-color: theme("colors.disabledBorder"),
      ),
    ),
    "secondary": (
      background-color: theme("colors.gray.200"),
      color: theme("colors.gray.700"),
      border-color: theme("colors.gray.200"),
      hovered: (
        background-color: theme("colors.gray.300"),
        border-color: theme("colors.gray.300"),
      ),
      focused: (
        background-color: theme("colors.gray.300"),
        border-color: theme("colors.gray.300"),
      ),
      disabled: (
        background-color: theme("colors.disabledBackground"),
        border-color: theme("colors.disabledBorder"),
      ),
    ),
    "light": (
      background-color: theme("colors.transparent"),
      color: theme("colors.gray.400"),
      border-color: theme("colors.transparent"),
      hovered: (
        color: theme("colors.gray.600"),
      ),
      focused: (
        color: theme("colors.gray.500"),
      ),
      disabled: (
        color: theme("colors.disabled"),
      ),
    ),
    "transparent": (
      background-color: theme("colors.transparent"),
      color: theme("colors.gray.500"),
      border-color: theme("colors.transparent"),
      hovered: (
        background-color: theme("colors.gray.100"),
        color: theme("colors.gray.600"),
      ),
      focused: (
        background-color: theme("colors.gray.100"),
        color: theme("colors.gray.600"),
      ),
      disabled: (
        color: theme("colors.disabled"),
      ),
    ),
    "danger": (
      background-color: theme("colors.danger.500"),
      color: theme("colors.white"),
      border-color: theme("colors.danger.500"),
      hovered: (
        background-color: theme("colors.danger.600"),
        border-color: theme("colors.danger.600"),
      ),
      focused: (
        background-color: theme("colors.danger.600"),
        border-color: theme("colors.danger.600"),
      ),
      disabled: (
        background-color: theme("colors.red.200"),
        border-color: theme("colors.red.200"),
      ),
    ),
    "bare": (),
  ),
  "link": (
    "primary": (
      background-color: theme("colors.transparent"),
      color: theme("colors.blue.900"),
      hovered: (
        color: theme("colors.blue.800"),
      ),
      focused: (
        color: theme("colors.blue.800"),
      ),
      disabled: (
        color: theme("colors.disabled"),
      ),
    ),
    "secondary": (
      background-color: theme("colors.transparent"),
      color: theme("colors.gray.600"),
      hovered: (
        color: theme("colors.gray.700"),
      ),
      focused: (
        color: theme("colors.gray.800"),
      ),
      disabled: (
        color: theme("colors.disabled"),
      ),
    ),
    "danger": (
      background-color: theme("colors.transparent"),
      color: theme("colors.danger.700"),
      hovered: (
        color: theme("colors.danger.800"),
      ),
      focused: (
        color: theme("colors.danger.800"),
      ),
      disabled: (
        color: theme("colors.red.200"),
      ),
    ),
  ),
);

@function parse-state-colors($attributes, $state-name, $args...) {
  $state-name: partials.validate-value($state-name, $button-state-names);
  $arguments: meta.keywords($args);
  @if map.has-key($arguments, $state-name) {
    $state: partials.mapget($arguments, $state-name);
    // If the state defines an override for the border-color, we need to also override the border
    // because it will have been defaulted in the original base set of attributes based on the
    // border color of the base state.
    @if map.has-key($state, border-color) and not map.has-key($state, border) {
      $state: map.set(
        $state,
        border,
        $button-border-width solid partials.mapget($state, border-color)
      );
    }
    @return map.merge($attributes, $state);
  }
  @return null;
}

$fallbacks: (
  "hovered": (
    "focused",
  ),
  "focused": (
    "hovered",
  ),
  "active": (
    "focused",
    "hovered",
  ),
);

@function get-state-properties($attributes, $state-name) {
  $state-name: partials.validate-value($state-name, $button-state-names);
  @if map.has-key($attributes, $state-name) {
    @return map.get($attributes, $state-name);
  }
  $fallback-states: map.get($fallbacks, $state-name);
  @if $fallback-states {
    @each $fallback-state in $fallback-states {
      @if map.has-key($attributes, $fallback-state) {
        @return map.get($attributes, $fallback-state);
      }
    }
  }
  @return null;
}

@function parse-core-attributes($attrs) {
  $attributes: (background-color, border-color, color);
  $parsed: ();
  @each $a in $attributes {
    $v: map.get($attrs, $a);
    @if $v {
      $parsed: map.set($parsed, $a, $v);
    }
  }
  @return $parsed;
}

@function get-button-attributes($args...) {
  $arguments: meta.keywords($args);
  $type: map.get($arguments, "type");
  $variant: map.get($arguments, "variant");

  @if $variant or $type {
    @if not $variant or not $type {
      @return throw.error(
        "If the 'type' argument is provided, the 'variant' must also be provided, and vice versa.",
        $source: "get-button-attributes()",
        $type: $type,
        $variant: $variant
      );
    }
    /* Standardize the optional "state" argument to an array of valid state names.  The state
       can be provided as array if there are multiple nested states for which the properties should
       be applied.  For instance, ("focused", "active") would refer to the case where the button is
       focused but also active. */
    $states: ();
    $states-arg: map.get($arguments, "state");
    @if $states-arg {
      @if meta.type-of($states-arg) == list {
        @each $state in $states-arg {
          $validated: partials.validate-value($state, $button-state-names);
          $states: list.append($states, $validated);
        }
      } @else {
        $states: (partials.validate-value($states-arg, $button-state-names));
      }
    }
    $variant: partials.validate-value($variant, partials.mapget($button-variants, $type));
    /* The base attributes for the button type and variant include state keys, which are used to
       index nested mappings of properties that should take precedence when the button is in the
       corresponding state. */
    $base-attributes: partials.mapget($button-color-properties, $type, $variant);
    /* Establish a new mapping that consists of the properties defined in the base attributes map
       without the nested state keys.  These properties will be used to directly define the CSS
       properties, so they must only be valid CSS properties, and not state keys. */
    $core-attributes: parse-core-attributes($base-attributes);

    @each $state in $states {
      /* The base attributes will be null if the current level of the mapping has no more state
         keys. */
      @if $base-attributes {
        /* With each state key, we are looking 1 level deeper in the set of base attributes, where
           each level corresponds to a different state key. */
        $base-attributes: get-state-properties($base-attributes, $state);
        @if $base-attributes {
          /* If, at the current level of the base attributes, there are CSS properties that
             correspond to the specific state we are looking for at that level, they should be
             merged with the former base attributes, overriding the former properties in cases
             where the property is defined for the current state.

             For instance, in the below structure:

             (
              background-color: theme("colors.blue.600"),
              border-color: theme("colors.blue.800"),
              "hovered": (  ----------------> The level we are currently looking at in the loop.
                background-color: theme("colors.blue.800"), -> Overrides former background-color.
                "active": (
                  ...
                )
              ),
             )

             The background-color for the "hovered" state would replace the background-color for
             the properties defined one level above that state key. */
          $state-attributes: parse-core-attributes($base-attributes);
          $core-attributes: map.merge($core-attributes, $state-attributes);
        }
      }
    }
    @return get-button-attributes($core-attributes...);
  } @else {
    $background-color: partials.get-optional-kwarg(
      background-color,
      $default: theme("colors.transparent"),
      $args...
    );
    $border-color: partials.get-optional-kwarg(border-color, $default: null, $args...);
    $border: partials.get-optional-kwarg(
      border,
      $default: if($border-color, $button-border-width solid $border-color, null),
      $args...
    );
    @return (
      background-color: $background-color,
      border-color: $border-color,
      border: $border,
      color: partials.get-optional-kwarg(color, $default: null, $args...)
    );
  }
}

@mixin button-variant-properties($type, $variant, $state: null) {
  $attrs: get-button-attributes(
    $type: $type,
    $variant: $variant,
    $state: $state,
  );
  @each $attr in map.keys($attrs) {
    // Do not set null values or values.
    @if partials.mapget($attrs, $attr) {
      #{$attr}: partials.mapget($attrs, $attr);
    }
  }
}

@mixin button-variant($type, $variant, $border: false, $active-selector: ".button--active") {
  @include button-variant-properties($type: $type, $variant: $variant);

  @include mixins.button-placeholder {
    color: theme("colors.placeholder");
  }

  @include mixins.button-hovered {
    @include button-variant-properties($type: $type, $variant: $variant, $state: "hovered");
    @include mixins.button-active($active-selector) {
      @include button-variant-properties(
        $type: $type,
        $variant: $variant,
        $state: (
          "focused",
          "active",
        )
      );
    }
  }

  @include mixins.button-focused {
    @include button-variant-properties($type: $type, $variant: $variant, $state: "focused");
    @include mixins.button-active($active-selector) {
      @include button-variant-properties(
        $type: $type,
        $variant: $variant,
        $state: (
          "focused",
          "active",
        )
      );
    }
  }

  @include partials.disabled {
    @include button-variant-properties($type: $type, $variant: $variant, $state: "disabled");
  }

  @include mixins.button-active($active-selector) {
    @include button-variant-properties($type: $type, $variant: $variant, $state: "active");
  }
}

@mixin button-variants($type, $active-selector: ".button--active") {
  @each $variant in partials.mapget($button-variants, $type) {
    &.button--variant-#{$variant} {
      @include button-variant($type: $type, $variant: $variant, $active-selector: $active-selector);
    }
  }
}
