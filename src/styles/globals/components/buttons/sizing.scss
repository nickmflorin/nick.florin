@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "partials";
@use "./constants" as *;

$button-padding: (
  "button": (
    "xsmall": 6px 14px,
    "small": 8px 16px,
    "medium": 10px 20px,
    "large": 14px 30px,
    "xlarge": 16px 30px,
  ),
);

@function get-button-padding($type, $size: null) {
  $size: partials.validate-value(if($size, $size, $button-default-size), $button-size-names);
  $type: partials.validate-value($type, $button-types);
  @if $type == "link" or $type == "icon-button" {
    @return 0px;
  }
  @return partials.mapget(partials.mapget($button-padding, $type), $size);
}

$button-sizes: (
  "button": (
    "xsmall": 28px,
    "small": 32px,
    "medium": 36px,
    "large": 40px,
    "xlarge": 48px,
  ),
  "icon-button": (
    "xsmall": 28px,
    "small": 32px,
    "medium": 36px,
    "large": 40px,
    "xlarge": 48px,
  ),
);

@function get-button-size($type, $size: null) {
  $type: partials.validate-value($type, ("button", "icon-button"));
  $size: partials.validate-value(if($size, $size, $button-default-size), $button-size-names);
  @return partials.mapget($button-sizes, $type, $size);
}

$button-icon-sizes: (
  "button": (
    "xsmall": partials.mapget($button-sizes, "button", "xsmall") - 2 *
      list.nth(partials.mapget($button-padding, "button", "xsmall"), 1),
    "small": partials.mapget($button-sizes, "button", "small") - 2 *
      list.nth(partials.mapget($button-padding, "button", "small"), 1),
    "medium": partials.mapget($button-sizes, "button", "medium") - 2 *
      list.nth(partials.mapget($button-padding, "button", "medium"), 1),
    "large": partials.mapget($button-sizes, "button", "large") - 2 *
      list.nth(partials.mapget($button-padding, "button", "large"), 1),
    "xlarge": partials.mapget($button-sizes, "button", "xlarge") - 2 *
      list.nth(partials.mapget($button-padding, "button", "xlarge"), 1),
    "full": 100%,
  ),
  "icon-button": (
    "xsmall": 13px,
    "small": 14px,
    "medium": 16px,
    "large": 18px,
    "xlarge": 20px,
    "full": 100%,
  ),
);

@function get-button-icon-size($type, $size: null) {
  $type: partials.validate-value($type, ("button", "icon-button"));
  $size: partials.validate-value(if($size, $size, $button-default-size), $button-icon-size-names);
  @return partials.mapget($button-icon-sizes, $type, $size);
}

@mixin button-icon-size($type, $size) {
  $type: partials.validate-value($type, ("button", "icon-button"));
  .icon {
    height: get-button-icon-size($type, $size: $size);
    aspect-ratio: 1;
    width: auto;
  }
}

@mixin button-size($type, $size) {
  $type: partials.validate-value($type, ("icon-button", "button"));
  $height: get-button-size($type, $size: $size);
  $padding: get-button-padding($type, $size: $size);

  height: $height;
  min-height: $height;
  padding: $padding;

  @include button-icon-size($type, $size);

  @if $type == "icon-button" {
    width: $height;
    aspect-ratio: 1;
  }
}

@mixin button-sizes($type) {
  $type: partials.validate-value($type, ("icon-button", "button"));

  $type: partials.validate-value($type, $button-types);

  @each $size in $button-size-names {
    &.button--size-#{$size} {
      @include button-size($type, $size);
      // Allow the icon size in the button to be controlled independently of the button's primary
      // size if the class name is present.
      @each $size in $button-icon-size-names {
        &.button--icon-size-#{$size} {
          @include button-icon-size($type, $size);
        }
      }
    }
  }
}
