@use "sass:map";
@use "sass:meta";
@use "sass:list";

@use "partials";
@use "throw";

$typography-types: ("body", "title", "label");
$font-family-avenir: avenir;
$font-family-roboto: roboto;
$font-family-inter: var(--font-inter);
$font-families: ($font-family-avenir, $font-family-roboto, $font-family-inter);
$text-transforms: ("uppercase", "lowercase", "capitalize", "underline");

/* -------------------------------------- Font Families ----------------------------------------- */
$title_font-family: $font-family-avenir;
$body-font-family: $font-family-inter;
$label-font-family: $font-family-inter;

$typography-font-families: (
  "title": $title_font-family,
  "body": $body-font-family,
  "label": $label-font-family,
);

@function get-font-family($type) {
  $type: partials.validate-value($type, $typography-types);
  @return partials.mapget($typography-font-families, $type);
}

/* --------------------------------------- Font Weights ----------------------------------------- */
$font-weight-names: ("bold", "semibold", "medium", "regular", "light");
$font-weights: (
  "light": theme("fontWeight.light"),
  "regular": theme("fontWeight.regular"),
  "medium": theme("fontWeight.medium"),
  "semibold": theme("fontWeight.semibold"),
  "bold": theme("fontWeight.bold"),
);

// // Used in cases where we are setting the font-weight based on a family but not a weight name.
$font-family-default-weights: (
  avenir: "medium",
  roboto: "regular",
  inter: "regular",
);

@function get-font-weight($type: null, $size: null, $weight: null) {
  @if $weight {
    $weight: partials.validate-value($weight, $font-weight-names);
    @return partials.mapget($font-weights, $weight);
  } @else if $type or $size {
    @if not $type {
      @return throw.error(
        "Invalid arguments: the 'type' must be provided if the 'size' is provided.",
        $source: "get-font-weight()"
      );
    }
    $size: parse-size($type, $size);
    @return partials.mapget(
      $font-weights,
      partials.mapget($typography-size-properties, $type, $size, font-weight)
    );
  } @else {
    @return throw.error(
      "Invalid arguments: the 'type'/'size' or 'weight' arguments be provided.",
      $source: "get-font-weight()"
    );
  }
}

/* --------------------------------------- Font Sizes ----------------------------------------- */
$typography-sizes: ("xxxs", "xxs", "xs", "sm", "smplus", "md", "lg", "xl");

/* Note: We cannot use Tailwind's 'theme' function here, because there are often cases where these
   numbers are used in calculations for other properties elsewhere in the SASS code.  Preprocessors
   like Sass run separately from Tailwind, before Tailwind. This means that you can’t feed output
   from Tailwind’s theme() function into a Sass color function for example, because the theme()
   function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS.

   Important!
   ----------
   This means that when we change font-related properties in Tailwind's configuration file, they
   have to be updated here as well (and vice-versa).

   Reference: https://tailwindcss.com/docs/using-with-preprocessors#using-sass-less-or-stylus */
$typography-size-properties: (
  "body": (
    "xxxs": (
      font-size: 11px,
      line-height: 14px,
      font-weight: "regular",
    ),
    "xxs": (
      font-size: 12px,
      line-height: 14px,
      font-weight: "regular",
    ),
    "xs": (
      font-size: 13px,
      line-height: 16px,
      font-weight: "regular",
    ),
    "sm": (
      font-size: 14px,
      line-height: 18px,
      font-weight: "regular",
    ),
    "smplus": (
      font-size: 15px,
      line-height: 18px,
      font-weight: "regular",
    ),
    "md": (
      font-size: 16px,
      line-height: 20px,
      font-weight: "regular",
    ),
    "lg": (
      font-size: 18px,
      line-height: 24px,
      font-weight: "regular",
    ),
    "xl": (
      font-size: 20px,
      line-height: 24px,
      font-weight: "regular",
    ),
  ),
  "title": (
    "xxxs": (
      font-size: 12px,
      line-height: 16px,
      font-weight: "medium",
    ),
    "xxs": (
      font-size: 13px,
      line-height: 20px,
      font-weight: "medium",
    ),
    "xs": (
      font-size: 14px,
      line-height: 20px,
      font-weight: "medium",
    ),
    "sm": (
      font-size: 16px,
      line-height: 22px,
      font-weight: "semibold",
    ),
    "smplus": (
      font-size: 17px,
      line-height: 22px,
      font-weight: "semibold",
    ),
    "md": (
      font-size: 18px,
      line-height: 26px,
      font-weight: "semibold",
    ),
    "lg": (
      font-size: 22px,
      line-height: 28px,
      font-weight: "semibold",
    ),
    "xl": (
      font-size: 24px,
      line-height: 30px,
      font-weight: "bold",
    ),
  ),
  "label": (
    "xxxs": (
      font-size: 11px,
      line-height: 14px,
      font-weight: "regular",
    ),
    "xxs": (
      font-size: 12px,
      line-height: 14px,
      font-weight: "regular",
    ),
    "xs": (
      font-size: 13px,
      line-height: 16px,
      font-weight: "regular",
    ),
    "sm": (
      font-size: 14px,
      line-height: 16px,
      font-weight: "medium",
    ),
    "smplus": (
      font-size: 15px,
      line-height: 18px,
      font-weight: "medium",
    ),
    "md": (
      font-size: 16px,
      line-height: 20px,
      font-weight: "medium",
    ),
    "lg": (
      font-size: 18px,
      line-height: 24px,
      font-weight: "medium",
    ),
    "xl": (
      font-size: 20px,
      line-height: 24px,
      font-weight: "medium",
    ),
  ),
);

$title_default-size: "md";
$body-default-size: "md";
$label-default-size: "md";

$typography-default-sizes: (
  "body": $body-default-size,
  "title": $title_default-size,
  "label": $label-default-size,
);

@function get-default-size($type) {
  $type: partials.validate-value($type, $typography-types);
  @return partials.mapget($typography-default-sizes, $type);
}

@function parse-size($type, $size: null) {
  @return if($size, partials.validate-value($size, $typography-sizes), get-default-size($type));
}

@function get-font-size($type, $size: null) {
  @return partials.mapget(
    $typography-size-properties,
    $type,
    parse-size($type, $size: $size),
    font-size
  );
}

@function get-line-height($type, $size: null) {
  @return partials.mapget(
    $typography-size-properties,
    $type,
    parse-size($type, $size: $size),
    line-height
  );
}

/* --------------------------------------- Font Colors ------------------------------------------ */
$default-label-color: theme("colors.label");
$default-title_color: theme("colors.title");
$default-body-color: theme("colors.body");

$typography-default-colors: (
  "title": $default-title_color,
  "body": $default-body-color,
  "label": $default-label-color,
);

@function get-font-color($type, $color: null) {
  @return if($color, $color, partials.mapget($typography-default-colors, $type));
}

@function fz($type, $value) {
  @if partials.in-list($value, $typography-sizes) {
    @return get-font-size($type, $size: $value);
  }
  @return $value;
}

@function get-font($type, $size: null, $weight: null, $family: null, $args...) {
  $properties: (
    font-family: if($family, $family, get-font-family($type)),
    font-weight:
      get-font-weight(
        $type: $type,
        $size: $size,
        $weight: $weight,
      ),
    color: partials.get-optional-kwarg(color, $default: get-font-color($type), $args...),
    line-height:
      partials.get-optional-kwarg(
        line-height,
        $default: get-line-height($type, $size: $size),
        $args...
      ),
    font-size:
      fz(
        $type,
        partials.get-optional-kwarg(
          font-size,
          $default: get-font-size($type, $size: $size),
          $args...
        )
      ),
  );
  $overrides: map.get(meta.keywords($args), "override");
  @if $overrides {
    $properties: map.merge($properties, $overrides);
  }
  @return partials.pick-or-ignore($properties, $args...);
}
