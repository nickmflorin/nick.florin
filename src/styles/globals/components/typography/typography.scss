@use "sass:map";
@use "partials";

@use "./font-faces" as font-faces;
@use "./properties" as properties;
@use "./mixins" as mixins;

@include font-faces.font-faces();

%typography-base {
  font-feature-settings:
    "tnum" on,
    "lnum" on;
  font-style: normal !important;
  font-variant: tabular-nums;
  margin: 0;
  padding: 0;

  em,
  b {
    font-style: normal !important;
  }

  i {
    font-style: normal !important;
  }
}

html,
body {
  @extend %typography-base;
  font-family: theme("fontFamily.body");
  color: theme("colors.body");
  margin: 0;
}

p {
  @extend %typography-base;
  @include properties.font("body");

  em,
  b {
    font-family: inherit;
    font-style: inherit;
    font-weight: inherit;
  }
}

@mixin with-fonts($type) {
  @include properties.with-font-weights();
  @include properties.with-font-families();
  @include properties.with-text-transforms();

  @include properties.with-font-sizes($type) using ($size, $data) {
    &.font-size-#{$size} {
      font-size: partials.mapget($data, font-size);
      line-height: partials.mapget($data, line-height);
      font-weight: partials.mapget($data, font-weight);

      // Allow the font-weight to be overridden for each size.
      @include properties.with-font-weights();

      @content ($data);
    }
  }
}

.label {
  // Do not define defaults for the typography properties.  This allows the typography properties to only be applied if
  // the component is provided with the appropriate props, and allows us to override the properties in SASS elsewhere
  // in cases where the component is not provided with those props.
  @extend %typography-base;

  @include properties.font($type: "label");

  @include with-fonts("label") using ($data) {
    $font-size: partials.mapget($data, font-size);
    $line-height: partials.mapget($data, line-height);

    > .icon {
      height: $font-size;
      margin-right: 6px;
      padding-bottom: 0.5 * ($line-height - $font-size);
      padding-top: 0.5 * ($line-height - $font-size);
      width: auto;
    }
  }

  display: flex;

  &--transform-underline {
    text-decoration: underline;
  }

  &--transform-caps {
    text-transform: uppercase;
  }
}

@mixin title() {
  @include with-fonts("title");
}

h1,
h2,
h3,
h4,
h5,
h6 {
  @extend %typography-base;
  width: 100%;

  em,
  b {
    font-family: inherit;
    font-style: inherit;
    font-weight: inherit;
  }
}

h1 {
  @include properties.font("title", $size: "xl");
  @include title();
}

h2 {
  @include properties.font("title", $size: "lg");
  @include title();
}

h3 {
  @include properties.font("title", $size: "md");
  @include title();
}

h4 {
  @include properties.font("title", $size: "sm");
  @include title();
}

h5 {
  @include properties.font("title", $size: "xs");
  @include title();
}

h6 {
  @include properties.font("title", $size: "xxs");
  @include title();
}

@mixin inherit-font-properties() {
  color: inherit;
  font-size: inherit;
  font-style: inherit;
  font-weight: inherit;
  line-height: inherit;
  text-transform: inherit;
  text-decoration: inherit;
}

.body {
  // Do not define defaults for the typography properties.  This allows the typography properties
  // to only be applied if the component is provided with the appropriate props, and allows us to
  // override the properties in SASS elsewhere in cases where the component is not provided with
  // those props.
  @extend %typography-base;

  &:not(.span, .body--inherit) {
    /* If the <Text> component is attributed with 'span' and is inside another <Text> element, do
       not set the defaults based on the default size of the <Text> component.  We want the <Text>
       components that are attributed with 'span' to inherit typography related properties from the
       <Text> component they sit inside of, unless the <Text> component is provided with the props
       explicitly.

       Example
       -------
       <Text fontWeight="medium">
         Foo
         <Text span>Bar</Text>
       </Text>

       Here, "Bar" should be styled with the same font-weight, and other typography attributes, as
       "Foo" is.

       However, if the <Text> component that is attributed with 'span' defines an override, then it
       should be styled based on that override:

       <Text fontWeight="medium">
          Foo
          <Text span fontWeight="bold">Bar</Text>
       </Text>

       Here, "Bar" should be styled with the a "bold" font weight. */
    // @include partials.with-default-font-size("body");
    @include properties.font($type: "body");
  }

  &.span,
  &.body--inherit {
    @include inherit-font-properties();
  }

  @include with-fonts("body") using ($data) {
    $font-size: partials.mapget($data, font-size);
    $line-height: partials.mapget($data, line-height);

    > .icon {
      height: $font-size;
      margin-right: 6px;
      padding-bottom: 0.5 * ($line-height - $font-size);
      padding-top: 0.5 * ($line-height - $font-size);
      width: auto;
    }
  }

  &.truncate {
    @include mixins.truncate();
  }

  &.clamp {
    @include mixins.clamp(2);
  }

  > .icon {
    color: inherit;
    font-size: inherit;
    font-style: inherit;
    font-weight: inherit;
    line-height: inherit;
  }
}

.description {
  // Do not define defaults for the typography properties.  This allows the typography properties
  // to only be applied if the component is provided with the appropriate props, and allows us to
  // override the properties in SASS elsewhere in cases where the component is not provided with
  // those props.
  @extend %typography-base;
  @include with-fonts("body");

  color: theme("colors.body-light");

  > .body {
    @include inherit-font-properties();
  }
}
