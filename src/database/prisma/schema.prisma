generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  output          = "../model/generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // Uses Connection Pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Uses a Direct Connection
}

model User {
  id                   String         @id @default(uuid()) @db.Uuid
  clerkId              String         @unique
  firstName            String
  lastName             String
  profileImageUrl      String?
  emailAddress         String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  updatedSkills        Skill[]        @relation("updatedSkills")
  createdSkills        Skill[]        @relation("createdSkills")
  updatedCompanies     Company[]      @relation("updatedCompanies")
  createdCompanies     Company[]      @relation("createdCompanies")
  updatedExperiences   Experience[]   @relation("updatedExperiences")
  createdExperiences   Experience[]   @relation("createdExperiences")
  updatedSchools       School[]       @relation("updatedSchools")
  createdSchools       School[]       @relation("createdSchools")
  updatedEducations    Education[]    @relation("updatedEducations")
  createdEducations    Education[]    @relation("createdEducations")
  updatedProfiles      Profile[]      @relation("updatedProfiles")
  createdProfiles      Profile[]      @relation("createdProfiles")
  updatedDetails       Detail[]       @relation("updatedDetails")
  createdDetails       Detail[]       @relation("createdDetails")
  updatedNestedDetails NestedDetail[] @relation("updatedNestedDetails")
  createdNestedDetails NestedDetail[] @relation("createdNestedDetails")
  updatedCourses       Course[]       @relation("updatedCourses")
  createdCourses       Course[]       @relation("createdCourses")
  updatedProjects      Project[]      @relation("updatedProjects")
  createdProjects      Project[]      @relation("createdProjects")
  updatedRepositories  Repository[]   @relation("updatedRepositories")
  createdRepositories  Repository[]   @relation("createdRepositories")
  updatedResumes       Resume[]       @relation("updatedResumes")
  createdResumes       Resume[]       @relation("createdResumes")
}

model NestedDetail {
  id               String   @id @default(uuid()) @db.Uuid
  createdAt        DateTime @default(now())
  createdBy        User     @relation("createdNestedDetails", fields: [createdById], references: [id])
  createdById      String   @db.Uuid
  updatedAt        DateTime @updatedAt
  updatedBy        User     @relation("updatedNestedDetails", fields: [updatedById], references: [id])
  updatedById      String   @db.Uuid
  label            String
  description      String?
  shortDescription String?
  visible          Boolean  @default(true)
  detail           Detail   @relation("nestedDetails", fields: [detailId], references: [id])
  detailId         String   @db.Uuid
  project          Project? @relation("nestedDetails", fields: [projectId], references: [id])
  projectId        String?  @db.Uuid
  skills           Skill[]  @relation("nestedDetailSkills")

  @@unique([label, detailId])
}

enum DetailEntityType {
  EXPERIENCE
  EDUCATION
}

model Detail {
  id               String           @id @default(uuid()) @db.Uuid
  createdAt        DateTime         @default(now())
  createdBy        User             @relation("createdDetails", fields: [createdById], references: [id])
  createdById      String           @db.Uuid
  updatedAt        DateTime         @updatedAt
  updatedBy        User             @relation("updatedDetails", fields: [updatedById], references: [id])
  updatedById      String           @db.Uuid
  entityId         String           @db.Uuid
  entityType       DetailEntityType
  label            String
  description      String?
  shortDescription String?
  visible          Boolean          @default(true)
  nestedDetails    NestedDetail[]   @relation("nestedDetails")
  project          Project?         @relation("details", fields: [projectId], references: [id])
  projectId        String?          @db.Uuid
  skills           Skill[]          @relation("detailSkills")

  @@unique([label, entityId, entityType])
}

enum SkillCategory {
  DEVOPS
  DATABASE
  API_DEVELOPMENT
  TESTING
  PROGRAMMING_LANGUAGE
  FRAMEWORK
  PACKAGE
  PACKAGE_MANAGER
  VERSION_MANAGER
  LOGGING_ALERTING_MONITORING
  ACADEMIC
  ORM
  WORKFLOW
}

enum ProgrammingDomain {
  BACKEND
  FRONTEND
  MOBILE
  FULL_STACK
  INFRASTRUCTURE
}

enum ProgrammingLanguage {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  SWIFT
  CSS
  SCSS
  CPLUSPLUS
  BASH
  JQUERY
  HTML
  MATLAB
  R
  REACT
  VBA
}

model Resume {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  createdBy   User     @relation("createdResumes", fields: [createdById], references: [id])
  createdById String   @db.Uuid
  updatedAt   DateTime @updatedAt
  updatedBy   User     @relation("updatedResumes", fields: [updatedById], references: [id])
  updatedById String   @db.Uuid
  primary     Boolean  @default(false)
  downloadUrl String
  url         String
  pathname    String
  filename    String
  size        BigInt
}

model Repository {
  id             String    @id @default(uuid()) @db.Uuid
  slug           String    @unique
  description    String?
  createdAt      DateTime  @default(now())
  createdBy      User      @relation("createdRepositories", fields: [createdById], references: [id])
  createdById    String    @db.Uuid
  updatedAt      DateTime  @updatedAt
  updatedBy      User      @relation("updatedRepositories", fields: [updatedById], references: [id])
  updatedById    String    @db.Uuid
  skills         Skill[]   @relation("skillRepositories")
  projects       Project[] @relation("projectRepositories")
  visible        Boolean   @default(false)
  highlighted    Boolean   @default(false)
  // The start date is used to determine the experience of a given skill in the repository.
  startDate      DateTime
  npmPackageName String?   @unique
}

model Skill {
  id                   String                @id @default(uuid()) @db.Uuid
  label                String                @unique
  slug                 String                @unique
  createdAt            DateTime              @default(now())
  createdBy            User                  @relation("createdSkills", fields: [createdById], references: [id])
  createdById          String                @db.Uuid
  updatedAt            DateTime              @updatedAt
  updatedBy            User                  @relation("updatedSkills", fields: [updatedById], references: [id])
  updatedById          String                @db.Uuid
  experiences          Experience[]          @relation("experienceSkills")
  educations           Education[]           @relation("educationSkills")
  visible              Boolean               @default(true)
  description          String?
  categories           SkillCategory[]       @default([])
  programmingLanguages ProgrammingLanguage[] @default([])
  programmingDomains   ProgrammingDomain[]   @default([])
  // Number of years that the skill has been used in academic/professional settings.  If not
  // defined, it may be determined based on the oldest experience and/or education it is associated
  // with.
  experience           Int?
  calculatedExperience Int
  highlighted          Boolean               @default(false)
  prioritized          Boolean               @default(false)
  courses              Course[]              @relation("courseSkills")
  projects             Project[]             @relation("projectSkills")
  details              Detail[]              @relation("detailSkills")
  nestedDetails        NestedDetail[]        @relation("nestedDetailSkills")
  repositories         Repository[]          @relation("skillRepositories")
}

model Course {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  shortName   String?   @unique
  // This is currently not being used, and we may want to remove it in the near future.
  slug        String    @unique
  createdAt   DateTime  @default(now())
  createdBy   User      @relation("createdCourses", fields: [createdById], references: [id])
  createdById String    @db.Uuid
  updatedAt   DateTime  @updatedAt
  updatedBy   User      @relation("updatedCourses", fields: [updatedById], references: [id])
  updatedById String    @db.Uuid
  education   Education @relation("courses", fields: [educationId], references: [id])
  educationId String    @db.Uuid
  visible     Boolean   @default(true)
  description String?
  skills      Skill[]   @relation("courseSkills")
}

model Project {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  shortName     String?        @unique
  // TODO: We may want to use a rich text editor for this in the future, so we can show it on the
  // projects page with embedded links and things of that nature.
  description   String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  createdBy     User           @relation("createdProjects", fields: [createdById], references: [id])
  createdById   String         @db.Uuid
  updatedAt     DateTime       @updatedAt
  updatedBy     User           @relation("updatedProjects", fields: [updatedById], references: [id])
  updatedById   String         @db.Uuid
  // The start date is used to determine the experience of a given skill in the project.
  startDate     DateTime
  skills        Skill[]        @relation("projectSkills")
  details       Detail[]       @relation("details")
  nestedDetails NestedDetail[] @relation("nestedDetails")
  repositories  Repository[]   @relation("projectRepositories")
  highlighted   Boolean        @default(false)
  visible       Boolean        @default(false)
}

model Company {
  id           String       @id @default(uuid()) @db.Uuid
  createdAt    DateTime     @default(now())
  createdBy    User         @relation("createdCompanies", fields: [createdById], references: [id])
  createdById  String       @db.Uuid
  updatedAt    DateTime     @updatedAt
  updatedBy    User         @relation("updatedCompanies", fields: [updatedById], references: [id])
  updatedById  String       @db.Uuid
  name         String       @unique
  shortName    String?      @unique
  description  String?
  logoImageUrl String?
  websiteUrl   String?
  experiences  Experience[] @relation("experiences")
  city         String
  state        String
}

model School {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  createdBy    User        @relation("createdSchools", fields: [createdById], references: [id])
  createdById  String      @db.Uuid
  updatedAt    DateTime    @updatedAt
  updatedBy    User        @relation("updatedSchools", fields: [updatedById], references: [id])
  updatedById  String      @db.Uuid
  name         String      @unique
  shortName    String?     @unique
  description  String?
  logoImageUrl String?
  websiteUrl   String?
  educations   Education[] @relation("educations")
  city         String
  state        String
}

model Experience {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  createdBy   User      @relation("createdExperiences", fields: [createdById], references: [id])
  createdById String    @db.Uuid
  updatedAt   DateTime  @updatedAt
  updatedBy   User      @relation("updatedExperiences", fields: [updatedById], references: [id])
  updatedById String    @db.Uuid
  skills      Skill[]   @relation("experienceSkills")
  startDate   DateTime
  endDate     DateTime?
  company     Company   @relation("experiences", fields: [companyId], references: [id])
  companyId   String    @db.Uuid
  title       String
  shortTitle  String?
  description String?
  isRemote    Boolean   @default(false)
  visible     Boolean   @default(true)
  highlighted Boolean   @default(true)

  @@unique([title, companyId])
}

enum Degree {
  BACHELORS_OF_SCIENCE
  MASTERS_OF_SCIENCE_IN_ENGINEERING
  MASTERS_OF_SCIENCE
}

model Education {
  id            String    @id @default(uuid()) @db.Uuid
  createdAt     DateTime  @default(now())
  createdBy     User      @relation("createdEducations", fields: [createdById], references: [id])
  createdById   String    @db.Uuid
  updatedAt     DateTime  @updatedAt
  updatedBy     User      @relation("updatedEducations", fields: [updatedById], references: [id])
  updatedById   String    @db.Uuid
  skills        Skill[]   @relation("educationSkills")
  startDate     DateTime
  endDate       DateTime?
  note          String?
  degree        Degree
  description   String?
  major         String
  shortMajor    String?
  minor         String?
  concentration String?
  school        School    @relation("educations", fields: [schoolId], references: [id])
  schoolId      String    @db.Uuid
  postPoned     Boolean   @default(false)
  visible       Boolean   @default(true)
  highlighted   Boolean   @default(true)
  courses       Course[]  @relation("courses")

  @@unique([major, schoolId])
  @@unique([shortMajor, schoolId])
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  createdBy       User     @relation("createdProfiles", fields: [createdById], references: [id])
  createdById     String   @db.Uuid
  updatedAt       DateTime @updatedAt
  updatedBy       User     @relation("updatedProfiles", fields: [updatedById], references: [id])
  updatedById     String   @db.Uuid
  firstName       String
  lastName        String
  displayName     String
  middleName      String?
  profileImageUrl String?
  emailAddress    String
  phoneNumber     String?
  intro           String
  tagline         String?
  githubUrl       String?
  linkedinUrl     String?
}
